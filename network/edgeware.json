{
  "BlockNumber": "U32",
  "SessionIndex": "U32",
  "AuctionIndex": "U32",
  "AuthIndex": "U32",
  "BalanceUpload": "(AccountId, u64)",
  "EgressQueueRoot": "(ParaId, Hash)",
  "EventIndex": "u32",
  "LeasePeriodOf": "BlockNumber",
  "LeasePeriod": "BlockNumber",
  "MemberCount": "u32",
  "MomentOf": "Moment",
  "Offender": "(ValidatorId, Exposure)",
  "ReportIdOf": "Hash",
  "SubId": "u32",
  "Weight": "u32",
  "WeightMultiplier": "u64",
  "WinningData": "Vec<WinningDataEntry>",
  "Index": "U32",
  "Kind": "[u8; 16]",
  "OpaqueTimeSlot": "Bytes",
  "ProposalContents": "Bytes",
  "ProposalTitle": "Bytes",
  "VoteOutcome": "[u8; 32]",
  "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
  "Box<<T as Trait<I>>::Proposal>": "BoxProposal",
  "ValidatorPrefs": {
    "type": "struct",
    "type_mapping": [
      [
        "Commission",
        "Compact<Balance>"
      ]
    ]
  },
  "Keys": {
    "type": "struct",
    "type_mapping": [
      [
        "grandpa",
        "AccountId"
      ],
      [
        "babe",
        "AccountId"
      ],
      [
        "im_online",
        "AccountId"
      ],
      [
        "authority_discovery",
        "AccountId"
      ]
    ]
  },
  "Forcing": {
    "type": "enum",
    "value_list": [
      "NotForcing",
      "ForceNew",
      "ForceNone"
    ]
  },
  "VoteStage": {
    "type": "enum",
    "value_list": [
      "PreVoting",
      "Commit",
      "Voting",
      "Completed"
    ]
  },
  "VoteData": {
    "type": "struct",
    "type_mapping": [
      [
        "initiator",
        "AccountId"
      ],
      [
        "stage",
        "VoteStage"
      ],
      [
        "vote_type",
        "VoteType"
      ],
      [
        "tally_type",
        "TallyType"
      ],
      [
        "is_commit_reveal",
        "Bool"
      ]
    ]
  },
  "VoteRecord": {
    "type": "struct",
    "type_mapping": [
      [
        "id",
        "u64"
      ],
      [
        "commitments",
        "Commitments"
      ],
      [
        "reveals",
        "Reveals"
      ],
      [
        "data",
        "VoteData"
      ],
      [
        "outcomes",
        "Vec<(VoteOutcome)>"
      ]
    ]
  },
  "Commitments": "Vec<(AccountId, VoteOutcome)>",
  "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
  "VoteType": {
    "type": "enum",
    "value_list": [
      "Binary",
      "MultiOption",
      "RankedChoice"
    ]
  },
  "IdentityStage": {
    "type": "enum",
    "value_list": [
      "Registered",
      "Attested",
      "Verified"
    ]
  },
  "IdentityRecord": {
    "type": "struct",
    "type_mapping": [
      [
        "account",
        "AccountId"
      ],
      [
        "identity_type",
        "String"
      ],
      [
        "identity",
        "Bytes"
      ],
      [
        "stage",
        "IdentityStage"
      ],
      [
        "expiration_time",
        "BlockNumber"
      ],
      [
        "proof",
        "Bytes"
      ],
      [
        "metadata",
        "Bytes"
      ]
    ]
  },
  "MetadataRecord": {
    "type": "struct",
    "type_mapping": [
      [
        "avatar",
        "String"
      ],
      [
        "display_name",
        "String"
      ],
      [
        "tagline",
        "String"
      ]
    ]
  },
  "ProposalCategory": {
    "type": "enum",
    "value_list": [
      "Signaling"
    ]
  },
  "ProposalStage": {
    "type": "enum",
    "value_list": [
      "PreVoting",
      "Voting",
      "Completed"
    ]
  },
  "ProposalRecord": {
    "type": "struct",
    "type_mapping": [
      [
        "index",
        "u32"
      ],
      [
        "author",
        "AccountId"
      ],
      [
        "stage",
        "VoteStage"
      ],
      [
        "transition_time",
        "u32"
      ],
      [
        "category",
        "ProposalCategory"
      ],
      [
        "title",
        "Text"
      ],
      [
        "contents",
        "Text"
      ],
      [
        "vote_id",
        "u64"
      ]
    ]
  },
  "Balance2": "Balance",
  "BalanceLock<Balance, BlockNumber>": {
    "type": "struct",
    "type_mapping": [
      [
        "id",
        "LockIdentifier"
      ],
      [
        "amount",
        "Balance"
      ],
      [
        "reasons",
        "Reasons"
      ]
    ]
  },
  "Linkage": {
    "type": "struct",
    "type_mapping": [
      [
        "previous",
        "Option<AccountId>"
      ],
      [
        "next",
        "Option<AccountId>"
      ]
    ]
  },
  "voting::VoteType": {
    "type": "enum",
    "value_list": [
      "Binary",
      "MultiOption"
    ]
  },
  "voting::TallyType": {
    "type": "enum",
    "value_list": [
      "OnePerson",
      "OneCoin"
    ]
  },
  "Points": "u32",
  "EraPoints": {
    "type": "struct",
    "type_mapping": [
      [
        "total",
        "Points"
      ],
      [
        "individual",
        "Vec<Points>"
      ]
    ]
  },
  "Weight#38-?": "u64",
  "DispatchResult#0-37": {
    "type": "enum",
    "type_mapping": [
      [
        "Error",
        "DispatchError"
      ],
      [
        "Ok",
        "Null"
      ]
    ]
  },
  "Address#38-41": "GenericAddress",
  "LookupSource#38-41": "GenericAddress",
  "RefCount": "u32",
  "voting::Tally": "VotingTally",
  "Address#45-?": "MultiAddress",
  "LookupSource#45-?": "MultiAddress",
  "AssetId": "u32"
}
