{
  "modules": [
    {
      "name": "System",
      "prefix": "System",
      "storage": [
        {
          "name": "Account",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Blake2_128Concat",
              "value": 3
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "ExtrinsicCount",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "BlockWeight",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 7
          },
          "fallback": "0x000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "AllExtrinsicsLen",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "BlockHash",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 9
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "ExtrinsicData",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 10
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Number",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "ParentHash",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 9
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Digest",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 11
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Events",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 18
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "EventCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "EventTopics",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Blake2_128Concat",
              "value": 99
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "LastRuntimeUpgrade",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 100
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "UpgradedToU32RefCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 34
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "UpgradedToTripleRefCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 34
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ExecutionPhase",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 97
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0000",
          "name": "fill_block",
          "docs": null,
          "args": [
            {
              "name": "_ratio",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0001",
          "name": "remark",
          "docs": null,
          "args": [
            {
              "name": "_remark",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0002",
          "name": "set_heap_pages",
          "docs": null,
          "args": [
            {
              "name": "pages",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "0003",
          "name": "set_code",
          "docs": null,
          "args": [
            {
              "name": "code",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0004",
          "name": "set_code_without_checks",
          "docs": null,
          "args": [
            {
              "name": "code",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0005",
          "name": "set_changes_trie_config",
          "docs": null,
          "args": [
            {
              "name": "changes_trie_config",
              "type": "option\u003cChangesTrieConfiguration\u003e"
            }
          ]
        },
        {
          "lookup": "0006",
          "name": "set_storage",
          "docs": null,
          "args": [
            {
              "name": "items",
              "type": "Vec\u003c(Vec\u003cU8\u003e,Vec\u003cU8\u003e)\u003e"
            }
          ]
        },
        {
          "lookup": "0007",
          "name": "kill_storage",
          "docs": null,
          "args": [
            {
              "name": "keys",
              "type": "Vec\u003cVec\u003cU8\u003e\u003e"
            }
          ]
        },
        {
          "lookup": "0008",
          "name": "kill_prefix",
          "docs": null,
          "args": [
            {
              "name": "prefix",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "_subkeys",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0009",
          "name": "remark_with_event",
          "docs": null,
          "args": [
            {
              "name": "remark",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 103
      },
      "events": [
        {
          "lookup": "0000",
          "name": "ExtrinsicSuccess",
          "docs": [
            "An extrinsic completed successfully. \\[info\\]"
          ],
          "args": [
            "DispatchInfo"
          ]
        },
        {
          "lookup": "0001",
          "name": "ExtrinsicFailed",
          "docs": [
            "An extrinsic failed. \\[error, info\\]"
          ],
          "args": [
            "DispatchError",
            "DispatchInfo"
          ]
        },
        {
          "lookup": "0002",
          "name": "CodeUpdated",
          "docs": [
            "`:code` was updated."
          ],
          "args": null
        },
        {
          "lookup": "0003",
          "name": "NewAccount",
          "docs": [
            "A new \\[account\\] was created."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0004",
          "name": "KilledAccount",
          "docs": [
            "An \\[account\\] was reaped."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0005",
          "name": "Remarked",
          "docs": [
            "On on-chain remark happened. \\[origin, remark_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 21
      },
      "constants": [
        {
          "name": "BlockWeights",
          "type": "",
          "type_value": 108,
          "constants_value": "00f2052a0100000000204aa9d1010000405973070000000001c06e96a62e010000010098f73e5d010000010000000000000000405973070000000001c0f6e810a30100000100204aa9d1010000010088526a740000004059730700000000000000",
          "docs": null
        },
        {
          "name": "BlockLength",
          "type": "",
          "type_value": 112,
          "constants_value": "00003c000000500000005000",
          "docs": null
        },
        {
          "name": "BlockHashCount",
          "type": "",
          "type_value": 4,
          "constants_value": "60090000",
          "docs": null
        },
        {
          "name": "DbWeight",
          "type": "",
          "type_value": 114,
          "constants_value": "40787d010000000000e1f50500000000",
          "docs": null
        },
        {
          "name": "Version",
          "type": "",
          "type_value": 115,
          "constants_value": "106e6f6465387375627374726174652d6e6f64650a0000000b0100000000000034df6acb689907609b0300000037e397fc7c91f5e40100000040fe3ad401f8959a05000000d2bc9897eed08f1503000000f78b278be53f454c02000000ed99c5acb25eedf502000000cbca25e39f14238702000000687ad44ad37f03c201000000bc9d89904f5b923f0100000068b66ba122c93fa70100000037c8bb1350a9a2a80100000091d5df18b0d2cf5801000000ab3c0572291feb8b0100000002000000",
          "docs": null
        },
        {
          "name": "SS58Prefix",
          "type": "",
          "type_value": 81,
          "constants_value": "2a00",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "InvalidSpecName",
          "doc": [
            "The name of specification does not match between the current runtime",
            "and the new runtime."
          ]
        },
        {
          "name": "SpecVersionNeedsToIncrease",
          "doc": [
            "The specification version is not allowed to decrease between the current runtime",
            "and the new runtime."
          ]
        },
        {
          "name": "FailedToExtractRuntimeVersion",
          "doc": [
            "Failed to extract the runtime version from the new runtime.",
            "",
            "Either calling `Core_version` or decoding `RuntimeVersion` failed."
          ]
        },
        {
          "name": "NonDefaultComposite",
          "doc": [
            "Suicide called when the account has non-default composite data."
          ]
        },
        {
          "name": "NonZeroRefCount",
          "doc": [
            "There is a non-zero reference count preventing the account from being purged."
          ]
        }
      ],
      "errors_value": {
        "type": 120
      },
      "index": 0
    },
    {
      "name": "Utility",
      "prefix": "",
      "storage": null,
      "calls": [
        {
          "lookup": "0100",
          "name": "batch",
          "docs": null,
          "args": [
            {
              "name": "calls",
              "type": "Vec\u003cCall\u003e"
            }
          ]
        },
        {
          "lookup": "0101",
          "name": "as_derivative",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "U16"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "0102",
          "name": "batch_all",
          "docs": null,
          "args": [
            {
              "name": "calls",
              "type": "Vec\u003cCall\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 121
      },
      "events": [
        {
          "lookup": "0100",
          "name": "BatchInterrupted",
          "docs": [
            "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
            "well as the error. \\[index, error\\]"
          ],
          "args": [
            "U32",
            "DispatchError"
          ]
        },
        {
          "lookup": "0101",
          "name": "BatchCompleted",
          "docs": [
            "Batch of dispatches completed fully with no error."
          ],
          "args": null
        }
      ],
      "events_value": {
        "type": 28
      },
      "errors": null,
      "errors_value": null,
      "index": 1
    },
    {
      "name": "Babe",
      "prefix": "Babe",
      "storage": [
        {
          "name": "EpochIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": null
        },
        {
          "name": "Authorities",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 307
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "GenesisSlot",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 128
          },
          "fallback": "0x0000000000000000",
          "docs": null
        },
        {
          "name": "CurrentSlot",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 128
          },
          "fallback": "0x0000000000000000",
          "docs": null
        },
        {
          "name": "Randomness",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 1
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "PendingEpochConfigChange",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 130
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "NextRandomness",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 1
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "NextAuthorities",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 307
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SegmentIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "UnderConstruction",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 309
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Initialized",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 310
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "AuthorVrfRandomness",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 310
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "EpochStart",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 77
          },
          "fallback": "0x0000000000000000",
          "docs": null
        },
        {
          "name": "Lateness",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "EpochConfig",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 311
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "NextEpochConfig",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 311
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0200",
          "name": "report_equivocation",
          "docs": null,
          "args": [
            {
              "name": "equivocation_proof",
              "type": "EquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "type": "MembershipProof"
            }
          ]
        },
        {
          "lookup": "0201",
          "name": "report_equivocation_unsigned",
          "docs": null,
          "args": [
            {
              "name": "equivocation_proof",
              "type": "EquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "type": "MembershipProof"
            }
          ]
        },
        {
          "lookup": "0202",
          "name": "plan_config_change",
          "docs": null,
          "args": [
            {
              "name": "config",
              "type": "NextConfigDescriptor"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 124
      },
      "constants": [
        {
          "name": "EpochDuration",
          "type": "",
          "type_value": 8,
          "constants_value": "c800000000000000",
          "docs": null
        },
        {
          "name": "ExpectedBlockTime",
          "type": "",
          "type_value": 8,
          "constants_value": "b80b000000000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "InvalidEquivocationProof",
          "doc": [
            "An equivocation proof provided as part of an equivocation report is invalid."
          ]
        },
        {
          "name": "InvalidKeyOwnershipProof",
          "doc": [
            "A key ownership proof provided as part of an equivocation report is invalid."
          ]
        },
        {
          "name": "DuplicateOffenceReport",
          "doc": [
            "A given equivocation report is valid but already previously reported."
          ]
        }
      ],
      "errors_value": {
        "type": 312
      },
      "index": 2
    },
    {
      "name": "Timestamp",
      "prefix": "Timestamp",
      "storage": [
        {
          "name": "Now",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": null
        },
        {
          "name": "DidUpdate",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 34
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0300",
          "name": "set",
          "docs": null,
          "args": [
            {
              "name": "now",
              "type": "compact\u003cU64\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 133
      },
      "constants": [
        {
          "name": "MinimumPeriod",
          "type": "",
          "type_value": 8,
          "constants_value": "dc05000000000000",
          "docs": null
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 3
    },
    {
      "name": "Authorship",
      "prefix": "Authorship",
      "storage": [
        {
          "name": "Uncles",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 313
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Author",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "DidSetUncles",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 34
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0400",
          "name": "set_uncles",
          "docs": null,
          "args": [
            {
              "name": "new_uncles",
              "type": "Vec\u003cHeader\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 135
      },
      "constants": [
        {
          "name": "UncleGenerations",
          "type": "",
          "type_value": 4,
          "constants_value": "05000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "InvalidUncleParent",
          "doc": [
            "The uncle parent not in the chain."
          ]
        },
        {
          "name": "UnclesAlreadySet",
          "doc": [
            "Uncles already set in the block."
          ]
        },
        {
          "name": "TooManyUncles",
          "doc": [
            "Too many uncles."
          ]
        },
        {
          "name": "GenesisUncle",
          "doc": [
            "The uncle is genesis."
          ]
        },
        {
          "name": "TooHighUncle",
          "doc": [
            "The uncle is too high in chain."
          ]
        },
        {
          "name": "UncleAlreadyIncluded",
          "doc": [
            "The uncle is already included."
          ]
        },
        {
          "name": "OldUncle",
          "doc": [
            "The uncle isn't recent enough to be included."
          ]
        }
      ],
      "errors_value": {
        "type": 315
      },
      "index": 4
    },
    {
      "name": "Indices",
      "prefix": "Indices",
      "storage": [
        {
          "name": "Accounts",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 316
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0500",
          "name": "claim",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0501",
          "name": "transfer",
          "docs": null,
          "args": [
            {
              "name": "new",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0502",
          "name": "free",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0503",
          "name": "force_transfer",
          "docs": null,
          "args": [
            {
              "name": "new",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "U32"
            },
            {
              "name": "freeze",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "0504",
          "name": "freeze",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 137
      },
      "events": [
        {
          "lookup": "0500",
          "name": "IndexAssigned",
          "docs": [
            "A account index was assigned. \\[index, who\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0501",
          "name": "IndexFreed",
          "docs": [
            "A account index has been freed up (unassigned). \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0502",
          "name": "IndexFrozen",
          "docs": [
            "A account index has been frozen to its current account ID. \\[index, who\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 29
      },
      "constants": [
        {
          "name": "Deposit",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "NotAssigned",
          "doc": [
            "The index was not already assigned."
          ]
        },
        {
          "name": "NotOwner",
          "doc": [
            "The index is assigned to another account."
          ]
        },
        {
          "name": "InUse",
          "doc": [
            "The index was not available."
          ]
        },
        {
          "name": "NotTransfer",
          "doc": [
            "The source and destination accounts are identical."
          ]
        },
        {
          "name": "Permanent",
          "doc": [
            "The index is permanent and may not be freed/changed."
          ]
        }
      ],
      "errors_value": {
        "type": 317
      },
      "index": 5
    },
    {
      "name": "Balances",
      "prefix": "Balances",
      "storage": [
        {
          "name": "TotalIssuance",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Account",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Blake2_128Concat",
              "value": 5
            }
          },
          "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Locks",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Blake2_128Concat",
              "value": 318
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Reserves",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Blake2_128Concat",
              "value": 322
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 325
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0600",
          "name": "transfer",
          "docs": null,
          "args": [
            {
              "name": "dest",
              "type": "MultiAddress"
            },
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0601",
          "name": "set_balance",
          "docs": null,
          "args": [
            {
              "name": "who",
              "type": "MultiAddress"
            },
            {
              "name": "new_free",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "new_reserved",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0602",
          "name": "force_transfer",
          "docs": null,
          "args": [
            {
              "name": "source",
              "type": "MultiAddress"
            },
            {
              "name": "dest",
              "type": "MultiAddress"
            },
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0603",
          "name": "transfer_keep_alive",
          "docs": null,
          "args": [
            {
              "name": "dest",
              "type": "MultiAddress"
            },
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0604",
          "name": "transfer_all",
          "docs": null,
          "args": [
            {
              "name": "dest",
              "type": "MultiAddress"
            },
            {
              "name": "keep_alive",
              "type": "Bool"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 138
      },
      "events": [
        {
          "lookup": "0600",
          "name": "Endowed",
          "docs": [
            "An account was created with some free balance. \\[account, free_balance\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0601",
          "name": "DustLost",
          "docs": [
            "An account was removed whose balance was non-zero but below ExistentialDeposit,",
            "resulting in an outright loss. \\[account, balance\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0602",
          "name": "Transfer",
          "docs": [
            "Transfer succeeded. \\[from, to, value\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0603",
          "name": "BalanceSet",
          "docs": [
            "A balance was set by root. \\[who, free, reserved\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "U128"
          ]
        },
        {
          "lookup": "0604",
          "name": "Deposit",
          "docs": [
            "Some amount was deposited (e.g. for transaction fees). \\[who, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0605",
          "name": "Reserved",
          "docs": [
            "Some balance was reserved (moved from free to reserved). \\[who, value\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0606",
          "name": "Unreserved",
          "docs": [
            "Some balance was unreserved (moved from reserved to free). \\[who, value\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0607",
          "name": "ReserveRepatriated",
          "docs": [
            "Some balance was moved from the reserve of the first account to the second account.",
            "Final argument indicates the destination balance type.",
            "\\[from, to, balance, destination_status\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128",
            "BalanceStatus"
          ]
        }
      ],
      "events_value": {
        "type": 30
      },
      "constants": [
        {
          "name": "ExistentialDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "MaxLocks",
          "type": "",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": null
        },
        {
          "name": "MaxReserves",
          "type": "",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "VestingBalance",
          "doc": [
            "Vesting balance too high to send value"
          ]
        },
        {
          "name": "LiquidityRestrictions",
          "doc": [
            "Account liquidity restrictions prevent withdrawal"
          ]
        },
        {
          "name": "InsufficientBalance",
          "doc": [
            "Balance too low to send value"
          ]
        },
        {
          "name": "ExistentialDeposit",
          "doc": [
            "Value too low to create account due to existential deposit"
          ]
        },
        {
          "name": "KeepAlive",
          "doc": [
            "Transfer/payment would kill account"
          ]
        },
        {
          "name": "ExistingVestingSchedule",
          "doc": [
            "A vesting schedule already exists for this account"
          ]
        },
        {
          "name": "DeadAccount",
          "doc": [
            "Beneficiary account must pre-exist"
          ]
        },
        {
          "name": "TooManyReserves",
          "doc": [
            "Number of named reserves exceed MaxReserves"
          ]
        }
      ],
      "errors_value": {
        "type": 326
      },
      "index": 6
    },
    {
      "name": "TransactionPayment",
      "prefix": "TransactionPayment",
      "storage": [
        {
          "name": "NextFeeMultiplier",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 327
          },
          "fallback": "0x000064a7b3b6e00d0000000000000000",
          "docs": null
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 328
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "constants": [
        {
          "name": "TransactionByteFee",
          "type": "",
          "type_value": 6,
          "constants_value": "00e40b54020000000000000000000000",
          "docs": null
        },
        {
          "name": "WeightToFee",
          "type": "",
          "type_value": 329,
          "constants_value": "0401000000000000000000000000000000000000000001",
          "docs": null
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 7
    },
    {
      "name": "ElectionProviderMultiPhase",
      "prefix": "ElectionProviderMultiPhase",
      "storage": [
        {
          "name": "Round",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x01000000",
          "docs": null
        },
        {
          "name": "CurrentPhase",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 331
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "QueuedSolution",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 333
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Snapshot",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 334
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "DesiredTargets",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SnapshotMetadata",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 195
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SignedSubmissionNextIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "SignedSubmissionIndices",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 337
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SignedSubmissionsMap",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 341
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000",
          "docs": null
        },
        {
          "name": "MinimumUntrustedScore",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 194
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0800",
          "name": "submit_unsigned",
          "docs": null,
          "args": [
            {
              "name": "solution",
              "type": "RawSolution"
            },
            {
              "name": "witness",
              "type": "SolutionOrSnapshotSize"
            }
          ]
        },
        {
          "lookup": "0801",
          "name": "set_minimum_untrusted_score",
          "docs": null,
          "args": [
            {
              "name": "maybe_next_score",
              "type": "option\u003c[U128; 3]\u003e"
            }
          ]
        },
        {
          "lookup": "0802",
          "name": "set_emergency_election_result",
          "docs": null,
          "args": [
            {
              "name": "supports",
              "type": "Vec\u003c([U8; 32],Support)\u003e"
            }
          ]
        },
        {
          "lookup": "0803",
          "name": "submit",
          "docs": null,
          "args": [
            {
              "name": "solution",
              "type": "RawSolution"
            },
            {
              "name": "num_signed_submissions",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 141
      },
      "events": [
        {
          "lookup": "0800",
          "name": "SolutionStored",
          "docs": [
            "A solution was stored with the given compute.",
            "",
            "If the solution is signed, this means that it hasn't yet been processed. If the",
            "solution is unsigned, this means that it has also been processed.",
            "",
            "The `bool` is `true` when a previous solution was ejected to make room for this one."
          ],
          "args": [
            "ElectionCompute",
            "Bool"
          ]
        },
        {
          "lookup": "0801",
          "name": "ElectionFinalized",
          "docs": [
            "The election has been finalized, with `Some` of the given computation, or else if the",
            "election failed, `None`."
          ],
          "args": [
            "option\u003cElectionCompute\u003e"
          ]
        },
        {
          "lookup": "0802",
          "name": "Rewarded",
          "docs": [
            "An account has been rewarded for their signed submission being finalized."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0803",
          "name": "Slashed",
          "docs": [
            "An account has been slashed for submitting an invalid signed submission."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0804",
          "name": "SignedPhaseStarted",
          "docs": [
            "The signed phase of the given round has started."
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0805",
          "name": "UnsignedPhaseStarted",
          "docs": [
            "The unsigned phase of the given round has started."
          ],
          "args": [
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 32
      },
      "constants": [
        {
          "name": "UnsignedPhase",
          "type": "",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": null
        },
        {
          "name": "SignedPhase",
          "type": "",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": null
        },
        {
          "name": "SolutionImprovementThreshold",
          "type": "",
          "type_value": 104,
          "constants_value": "a0860100",
          "docs": null
        },
        {
          "name": "OffchainRepeat",
          "type": "",
          "type_value": 4,
          "constants_value": "05000000",
          "docs": null
        },
        {
          "name": "MinerTxPriority",
          "type": "",
          "type_value": 8,
          "constants_value": "feffffffffffff7f",
          "docs": null
        },
        {
          "name": "MinerMaxIterations",
          "type": "",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": null
        },
        {
          "name": "MinerMaxWeight",
          "type": "",
          "type_value": 8,
          "constants_value": "c07c907c2d010000",
          "docs": null
        },
        {
          "name": "SignedMaxSubmissions",
          "type": "",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": null
        },
        {
          "name": "SignedMaxWeight",
          "type": "",
          "type_value": 8,
          "constants_value": "c07c907c2d010000",
          "docs": null
        },
        {
          "name": "SignedRewardBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "SignedDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "SignedDepositByte",
          "type": "",
          "type_value": 6,
          "constants_value": "0010a5d4e80000000000000000000000",
          "docs": null
        },
        {
          "name": "SignedDepositWeight",
          "type": "",
          "type_value": 6,
          "constants_value": "00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "MinerMaxLength",
          "type": "",
          "type_value": 4,
          "constants_value": "00003600",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "PreDispatchEarlySubmission",
          "doc": [
            "Submission was too early."
          ]
        },
        {
          "name": "PreDispatchWrongWinnerCount",
          "doc": [
            "Wrong number of winners presented."
          ]
        },
        {
          "name": "PreDispatchWeakSubmission",
          "doc": [
            "Submission was too weak, score-wise."
          ]
        },
        {
          "name": "SignedQueueFull",
          "doc": [
            "The queue was full, and the solution was not better than any of the existing ones."
          ]
        },
        {
          "name": "SignedCannotPayDeposit",
          "doc": [
            "The origin failed to pay the deposit."
          ]
        },
        {
          "name": "SignedInvalidWitness",
          "doc": [
            "Witness data to dispatchable is invalid."
          ]
        },
        {
          "name": "SignedTooMuchWeight",
          "doc": [
            "The signed submission consumes too much weight"
          ]
        },
        {
          "name": "OcwCallWrongEra",
          "doc": [
            "OCW submitted solution for wrong round"
          ]
        },
        {
          "name": "MissingSnapshotMetadata",
          "doc": [
            "Snapshot metadata should exist but didn't."
          ]
        },
        {
          "name": "InvalidSubmissionIndex",
          "doc": [
            "`Self::insert_submission` returned an invalid index."
          ]
        },
        {
          "name": "CallNotAllowed",
          "doc": [
            "The call is not allowed at this point."
          ]
        }
      ],
      "errors_value": {
        "type": 342
      },
      "index": 8
    },
    {
      "name": "Staking",
      "prefix": "Staking",
      "storage": [
        {
          "name": "HistoryDepth",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x54000000",
          "docs": null
        },
        {
          "name": "ValidatorCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "MinimumValidatorCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Invulnerables",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 39
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Bonded",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 0
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "MinNominatorBond",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "MinValidatorBond",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Ledger",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Blake2_128Concat",
              "value": 343
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Payee",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 201
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Validators",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 202
            }
          },
          "fallback": "0x0000",
          "docs": null
        },
        {
          "name": "CounterForValidators",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "MaxValidatorsCount",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Nominators",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 346
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "CounterForNominators",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "MaxNominatorsCount",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "CurrentEra",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ActiveEra",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 347
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ErasStartSessionIndex",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 4
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ErasStakers",
          "modifier": "Default",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 65
            }
          },
          "fallback": "0x000000",
          "docs": null
        },
        {
          "name": "ErasStakersClipped",
          "modifier": "Default",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 65
            }
          },
          "fallback": "0x000000",
          "docs": null
        },
        {
          "name": "ErasValidatorPrefs",
          "modifier": "Default",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 202
            }
          },
          "fallback": "0x0000",
          "docs": null
        },
        {
          "name": "ErasValidatorReward",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 6
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ErasRewardPoints",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 348
            }
          },
          "fallback": "0x0000000000",
          "docs": null
        },
        {
          "name": "ErasTotalStake",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 6
            }
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "ForceEra",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 352
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SlashRewardFraction",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 104
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "CanceledSlashPayout",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "UnappliedSlashes",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 353
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "BondedEras",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 99
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ValidatorSlashInEra",
          "modifier": "Optional",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 355
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "NominatorSlashInEra",
          "modifier": "Optional",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 6
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SlashingSpans",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 356
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SpanSlash",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 351,
              "hasher": "Twox64Concat",
              "value": 357
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "EarliestUnappliedSlash",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "CurrentPlannedSession",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 358
          },
          "fallback": "0x06",
          "docs": null
        },
        {
          "name": "ChillThreshold",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 205
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0900",
          "name": "bond",
          "docs": null,
          "args": [
            {
              "name": "controller",
              "type": "MultiAddress"
            },
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "payee",
              "type": "RewardDestination"
            }
          ]
        },
        {
          "lookup": "0901",
          "name": "bond_extra",
          "docs": null,
          "args": [
            {
              "name": "max_additional",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0902",
          "name": "unbond",
          "docs": null,
          "args": [
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0903",
          "name": "withdraw_unbonded",
          "docs": null,
          "args": [
            {
              "name": "num_slashing_spans",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0904",
          "name": "validate",
          "docs": null,
          "args": [
            {
              "name": "prefs",
              "type": "ValidatorPrefs"
            }
          ]
        },
        {
          "lookup": "0905",
          "name": "nominate",
          "docs": null,
          "args": [
            {
              "name": "targets",
              "type": "Vec\u003cMultiAddress\u003e"
            }
          ]
        },
        {
          "lookup": "0906",
          "name": "chill",
          "docs": null,
          "args": null
        },
        {
          "lookup": "0907",
          "name": "set_payee",
          "docs": null,
          "args": [
            {
              "name": "payee",
              "type": "RewardDestination"
            }
          ]
        },
        {
          "lookup": "0908",
          "name": "set_controller",
          "docs": null,
          "args": [
            {
              "name": "controller",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "0909",
          "name": "set_validator_count",
          "docs": null,
          "args": [
            {
              "name": "new",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "090a",
          "name": "increase_validator_count",
          "docs": null,
          "args": [
            {
              "name": "additional",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "090b",
          "name": "scale_validator_count",
          "docs": null,
          "args": [
            {
              "name": "factor",
              "type": "U8"
            }
          ]
        },
        {
          "lookup": "090c",
          "name": "force_no_eras",
          "docs": null,
          "args": null
        },
        {
          "lookup": "090d",
          "name": "force_new_era",
          "docs": null,
          "args": null
        },
        {
          "lookup": "090e",
          "name": "set_invulnerables",
          "docs": null,
          "args": [
            {
              "name": "invulnerables",
              "type": "Vec\u003c[U8; 32]\u003e"
            }
          ]
        },
        {
          "lookup": "090f",
          "name": "force_unstake",
          "docs": null,
          "args": [
            {
              "name": "stash",
              "type": "[U8; 32]"
            },
            {
              "name": "num_slashing_spans",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0910",
          "name": "force_new_era_always",
          "docs": null,
          "args": null
        },
        {
          "lookup": "0911",
          "name": "cancel_deferred_slash",
          "docs": null,
          "args": [
            {
              "name": "era",
              "type": "U32"
            },
            {
              "name": "slash_indices",
              "type": "Vec\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0912",
          "name": "payout_stakers",
          "docs": null,
          "args": [
            {
              "name": "validator_stash",
              "type": "[U8; 32]"
            },
            {
              "name": "era",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0913",
          "name": "rebond",
          "docs": null,
          "args": [
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0914",
          "name": "set_history_depth",
          "docs": null,
          "args": [
            {
              "name": "new_history_depth",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "_era_items_deleted",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0915",
          "name": "reap_stash",
          "docs": null,
          "args": [
            {
              "name": "stash",
              "type": "[U8; 32]"
            },
            {
              "name": "num_slashing_spans",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0916",
          "name": "kick",
          "docs": null,
          "args": [
            {
              "name": "who",
              "type": "Vec\u003cMultiAddress\u003e"
            }
          ]
        },
        {
          "lookup": "0917",
          "name": "set_staking_limits",
          "docs": null,
          "args": [
            {
              "name": "min_nominator_bond",
              "type": "U128"
            },
            {
              "name": "min_validator_bond",
              "type": "U128"
            },
            {
              "name": "max_nominator_count",
              "type": "option\u003cU32\u003e"
            },
            {
              "name": "max_validator_count",
              "type": "option\u003cU32\u003e"
            },
            {
              "name": "threshold",
              "type": "option\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0918",
          "name": "chill_other",
          "docs": null,
          "args": [
            {
              "name": "controller",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 200
      },
      "events": [
        {
          "lookup": "0900",
          "name": "EraPayout",
          "docs": [
            "The era payout has been set; the first balance is the validator-payout; the second is",
            "the remainder from the maximum amount of reward.",
            "\\[era_index, validator_payout, remainder\\]"
          ],
          "args": [
            "U32",
            "U128",
            "U128"
          ]
        },
        {
          "lookup": "0901",
          "name": "Reward",
          "docs": [
            "The staker has been rewarded by this amount. \\[stash, amount\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0902",
          "name": "Slash",
          "docs": [
            "One validator (and its nominators) has been slashed by the given amount.",
            "\\[validator, amount\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0903",
          "name": "OldSlashingReportDiscarded",
          "docs": [
            "An old slashing report from a prior era was discarded because it could",
            "not be processed. \\[session_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0904",
          "name": "StakingElection",
          "docs": [
            "A new set of stakers was elected."
          ],
          "args": null
        },
        {
          "lookup": "0905",
          "name": "Bonded",
          "docs": [
            "An account has bonded this amount. \\[stash, amount\\]",
            "",
            "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
            "it will not be emitted for staking rewards when they are added to stake."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0906",
          "name": "Unbonded",
          "docs": [
            "An account has unbonded this amount. \\[stash, amount\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0907",
          "name": "Withdrawn",
          "docs": [
            "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
            "from the unlocking queue. \\[stash, amount\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0908",
          "name": "Kicked",
          "docs": [
            "A nominator has been kicked from a validator. \\[nominator, stash\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0909",
          "name": "StakingElectionFailed",
          "docs": [
            "The election failed. No new era is planned."
          ],
          "args": null
        },
        {
          "lookup": "090a",
          "name": "Chilled",
          "docs": [
            "An account has stopped participating as either a validator or nominator.",
            "\\[stash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 36
      },
      "constants": [
        {
          "name": "SessionsPerEra",
          "type": "",
          "type_value": 4,
          "constants_value": "06000000",
          "docs": null
        },
        {
          "name": "BondingDuration",
          "type": "",
          "type_value": 4,
          "constants_value": "a0020000",
          "docs": null
        },
        {
          "name": "SlashDeferDuration",
          "type": "",
          "type_value": 4,
          "constants_value": "a8000000",
          "docs": null
        },
        {
          "name": "MaxNominatorRewardedPerValidator",
          "type": "",
          "type_value": 4,
          "constants_value": "00010000",
          "docs": null
        },
        {
          "name": "MaxNominations",
          "type": "",
          "type_value": 4,
          "constants_value": "10000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "NotController",
          "doc": [
            "Not a controller account."
          ]
        },
        {
          "name": "NotStash",
          "doc": [
            "Not a stash account."
          ]
        },
        {
          "name": "AlreadyBonded",
          "doc": [
            "Stash is already bonded."
          ]
        },
        {
          "name": "AlreadyPaired",
          "doc": [
            "Controller is already paired."
          ]
        },
        {
          "name": "EmptyTargets",
          "doc": [
            "Targets cannot be empty."
          ]
        },
        {
          "name": "DuplicateIndex",
          "doc": [
            "Duplicate index."
          ]
        },
        {
          "name": "InvalidSlashIndex",
          "doc": [
            "Slash record index out of bounds."
          ]
        },
        {
          "name": "InsufficientBond",
          "doc": [
            "Can not bond with value less than minimum required."
          ]
        },
        {
          "name": "NoMoreChunks",
          "doc": [
            "Can not schedule more unlock chunks."
          ]
        },
        {
          "name": "NoUnlockChunk",
          "doc": [
            "Can not rebond without unlocking chunks."
          ]
        },
        {
          "name": "FundedTarget",
          "doc": [
            "Attempting to target a stash that still has funds."
          ]
        },
        {
          "name": "InvalidEraToReward",
          "doc": [
            "Invalid era to reward."
          ]
        },
        {
          "name": "InvalidNumberOfNominations",
          "doc": [
            "Invalid number of nominations."
          ]
        },
        {
          "name": "NotSortedAndUnique",
          "doc": [
            "Items are not sorted and unique."
          ]
        },
        {
          "name": "AlreadyClaimed",
          "doc": [
            "Rewards for this era have already been claimed for this validator."
          ]
        },
        {
          "name": "IncorrectHistoryDepth",
          "doc": [
            "Incorrect previous history depth input provided."
          ]
        },
        {
          "name": "IncorrectSlashingSpans",
          "doc": [
            "Incorrect number of slashing spans provided."
          ]
        },
        {
          "name": "BadState",
          "doc": [
            "Internal state has become somehow corrupted and the operation cannot continue."
          ]
        },
        {
          "name": "TooManyTargets",
          "doc": [
            "Too many nomination targets supplied."
          ]
        },
        {
          "name": "BadTarget",
          "doc": [
            "A nomination target was supplied that was blocked or otherwise not a validator."
          ]
        },
        {
          "name": "CannotChillOther",
          "doc": [
            "The user has enough bond and thus cannot be chilled forcefully by an external person."
          ]
        },
        {
          "name": "TooManyNominators",
          "doc": [
            "There are too many nominators in the system. Governance needs to adjust the staking settings",
            "to keep things safe for the runtime."
          ]
        },
        {
          "name": "TooManyValidators",
          "doc": [
            "There are too many validators in the system. Governance needs to adjust the staking settings",
            "to keep things safe for the runtime."
          ]
        }
      ],
      "errors_value": {
        "type": 359
      },
      "index": 9
    },
    {
      "name": "Session",
      "prefix": "Session",
      "storage": [
        {
          "name": "Validators",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 39
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "CurrentIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "QueuedChanged",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 34
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "QueuedKeys",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 360
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "DisabledValidators",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 92
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "NextKeys",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 208
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "KeyOwner",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 362,
              "hasher": "Twox64Concat",
              "value": 0
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0a00",
          "name": "set_keys",
          "docs": [
            "Sets the session key(s) of the function caller to `keys`.",
            "Allows an account to set its session key prior to becoming a validator.",
            "This doesn't take effect until the next session.",
            "",
            "The dispatch origin of this function must be signed.",
            "",
            "# \u003cweight\u003e",
            "- Complexity: `O(1)`",
            "  Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
            "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
            "- DbWrites: `origin account`, `NextKeys`",
            "- DbReads per key id: `KeyOwner`",
            "- DbWrites per key id: `KeyOwner`",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "keys",
              "type": "SessionKeys"
            },
            {
              "name": "proof",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0a01",
          "name": "purge_keys",
          "docs": [
            "Removes any session key(s) of the function caller.",
            "This doesn't take effect until the next session.",
            "",
            "The dispatch origin of this function must be signed.",
            "",
            "# \u003cweight\u003e",
            "- Complexity: `O(1)` in number of key types.",
            "  Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
            "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
            "- DbWrites: `NextKeys`, `origin account`",
            "- DbWrites per key id: `KeyOwner`",
            "# \u003c/weight\u003e"
          ],
          "args": null
        }
      ],
      "calls_value": {
        "type": 207
      },
      "events": [
        {
          "lookup": "0a00",
          "name": "NewSession",
          "docs": [
            "New session has happened. Note that the argument is the \\[session_index\\], not the block",
            "number as the type might suggest."
          ],
          "args": [
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 37
      },
      "errors": [
        {
          "name": "InvalidProof",
          "doc": [
            "Invalid ownership proof."
          ]
        },
        {
          "name": "NoAssociatedValidatorId",
          "doc": [
            "No associated validator ID for account."
          ]
        },
        {
          "name": "DuplicatedKey",
          "doc": [
            "Registered duplicate key."
          ]
        },
        {
          "name": "NoKeys",
          "doc": [
            "No keys are associated with this account."
          ]
        },
        {
          "name": "NoAccount",
          "doc": [
            "Key setting account is not live, so it's impossible to associate keys."
          ]
        }
      ],
      "errors_value": {
        "type": 364
      },
      "index": 10
    },
    {
      "name": "Democracy",
      "prefix": "Democracy",
      "storage": [
        {
          "name": "PublicPropCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "PublicProps",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 365
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "DepositOf",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 367
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Preimages",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 368
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ReferendumCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "LowestUnbaked",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "ReferendumInfoOf",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 369
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "VotingOf",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 372
            }
          },
          "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Locks",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 4
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "LastTabledWasExternal",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 34
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "NextExternal",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 377
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Blacklist",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 378
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Cancellations",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 34
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "StorageVersion",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 379
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0b00",
          "name": "propose",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0b01",
          "name": "second",
          "docs": null,
          "args": [
            {
              "name": "proposal",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "seconds_upper_bound",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0b02",
          "name": "vote",
          "docs": null,
          "args": [
            {
              "name": "ref_index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "vote",
              "type": "AccountVote"
            }
          ]
        },
        {
          "lookup": "0b03",
          "name": "emergency_cancel",
          "docs": null,
          "args": [
            {
              "name": "ref_index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0b04",
          "name": "external_propose",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0b05",
          "name": "external_propose_majority",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0b06",
          "name": "external_propose_default",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0b07",
          "name": "fast_track",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "voting_period",
              "type": "U32"
            },
            {
              "name": "delay",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0b08",
          "name": "veto_external",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0b09",
          "name": "cancel_referendum",
          "docs": null,
          "args": [
            {
              "name": "ref_index",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0b0a",
          "name": "cancel_queued",
          "docs": null,
          "args": [
            {
              "name": "which",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0b0b",
          "name": "delegate",
          "docs": null,
          "args": [
            {
              "name": "to",
              "type": "[U8; 32]"
            },
            {
              "name": "conviction",
              "type": "Conviction"
            },
            {
              "name": "balance",
              "type": "U128"
            }
          ]
        },
        {
          "lookup": "0b0c",
          "name": "undelegate",
          "docs": null,
          "args": null
        },
        {
          "lookup": "0b0d",
          "name": "clear_public_proposals",
          "docs": null,
          "args": null
        },
        {
          "lookup": "0b0e",
          "name": "note_preimage",
          "docs": null,
          "args": [
            {
              "name": "encoded_proposal",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0b0f",
          "name": "note_preimage_operational",
          "docs": null,
          "args": [
            {
              "name": "encoded_proposal",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0b10",
          "name": "note_imminent_preimage",
          "docs": null,
          "args": [
            {
              "name": "encoded_proposal",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0b11",
          "name": "note_imminent_preimage_operational",
          "docs": null,
          "args": [
            {
              "name": "encoded_proposal",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "0b12",
          "name": "reap_preimage",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "proposal_len_upper_bound",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0b13",
          "name": "unlock",
          "docs": null,
          "args": [
            {
              "name": "target",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0b14",
          "name": "remove_vote",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0b15",
          "name": "remove_other_vote",
          "docs": null,
          "args": [
            {
              "name": "target",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0b16",
          "name": "enact_proposal",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0b17",
          "name": "blacklist",
          "docs": null,
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "maybe_ref_index",
              "type": "option\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0b18",
          "name": "cancel_proposal",
          "docs": null,
          "args": [
            {
              "name": "prop_index",
              "type": "compact\u003cU32\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 210
      },
      "events": [
        {
          "lookup": "0b00",
          "name": "Proposed",
          "docs": [
            "A motion has been proposed by a public account. \\[proposal_index, deposit\\]"
          ],
          "args": [
            "U32",
            "U128"
          ]
        },
        {
          "lookup": "0b01",
          "name": "Tabled",
          "docs": [
            "A public proposal has been tabled for referendum vote. \\[proposal_index, deposit, depositors\\]"
          ],
          "args": [
            "U32",
            "U128",
            "Vec\u003c[U8; 32]\u003e"
          ]
        },
        {
          "lookup": "0b02",
          "name": "ExternalTabled",
          "docs": [
            "An external proposal has been tabled."
          ],
          "args": null
        },
        {
          "lookup": "0b03",
          "name": "Started",
          "docs": [
            "A referendum has begun. \\[ref_index, threshold\\]"
          ],
          "args": [
            "U32",
            "VoteThreshold"
          ]
        },
        {
          "lookup": "0b04",
          "name": "Passed",
          "docs": [
            "A proposal has been approved by referendum. \\[ref_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0b05",
          "name": "NotPassed",
          "docs": [
            "A proposal has been rejected by referendum. \\[ref_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0b06",
          "name": "Cancelled",
          "docs": [
            "A referendum has been cancelled. \\[ref_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0b07",
          "name": "Executed",
          "docs": [
            "A proposal has been enacted. \\[ref_index, result\\]"
          ],
          "args": [
            "U32",
            "Results\u003cNULL,DispatchError\u003e"
          ]
        },
        {
          "lookup": "0b08",
          "name": "Delegated",
          "docs": [
            "An account has delegated their vote to another account. \\[who, target\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0b09",
          "name": "Undelegated",
          "docs": [
            "An \\[account\\] has cancelled a previous delegation operation."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0b0a",
          "name": "Vetoed",
          "docs": [
            "An external proposal has been vetoed. \\[who, proposal_hash, until\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0b0b",
          "name": "PreimageNoted",
          "docs": [
            "A proposal's preimage was noted, and the deposit taken. \\[proposal_hash, who, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0b0c",
          "name": "PreimageUsed",
          "docs": [
            "A proposal preimage was removed and used (the deposit was returned).",
            "\\[proposal_hash, provider, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0b0d",
          "name": "PreimageInvalid",
          "docs": [
            "A proposal could not be executed because its preimage was invalid.",
            "\\[proposal_hash, ref_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0b0e",
          "name": "PreimageMissing",
          "docs": [
            "A proposal could not be executed because its preimage was missing.",
            "\\[proposal_hash, ref_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0b0f",
          "name": "PreimageReaped",
          "docs": [
            "A registered preimage was removed and the deposit collected by the reaper.",
            "\\[proposal_hash, provider, deposit, reaper\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0b10",
          "name": "Unlocked",
          "docs": [
            "An \\[account\\] has been unlocked successfully."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0b11",
          "name": "Blacklisted",
          "docs": [
            "A proposal \\[hash\\] has been blacklisted permanently."
          ],
          "args": [
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 38
      },
      "constants": [
        {
          "name": "EnactmentPeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "002f0d00",
          "docs": null
        },
        {
          "name": "LaunchPeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "004e0c00",
          "docs": null
        },
        {
          "name": "VotingPeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "004e0c00",
          "docs": null
        },
        {
          "name": "MinimumDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "0000c16ff28623000000000000000000",
          "docs": null
        },
        {
          "name": "InstantAllowed",
          "type": "",
          "type_value": 34,
          "constants_value": "01",
          "docs": null
        },
        {
          "name": "FastTrackVotingPeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "80510100",
          "docs": null
        },
        {
          "name": "CooloffPeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "004e0c00",
          "docs": null
        },
        {
          "name": "PreimageByteDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "0010a5d4e80000000000000000000000",
          "docs": null
        },
        {
          "name": "MaxVotes",
          "type": "",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": null
        },
        {
          "name": "MaxProposals",
          "type": "",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "ValueLow",
          "doc": [
            "Value too low"
          ]
        },
        {
          "name": "ProposalMissing",
          "doc": [
            "Proposal does not exist"
          ]
        },
        {
          "name": "BadIndex",
          "doc": [
            "Unknown index"
          ]
        },
        {
          "name": "AlreadyCanceled",
          "doc": [
            "Cannot cancel the same proposal twice"
          ]
        },
        {
          "name": "DuplicateProposal",
          "doc": [
            "Proposal already made"
          ]
        },
        {
          "name": "ProposalBlacklisted",
          "doc": [
            "Proposal still blacklisted"
          ]
        },
        {
          "name": "NotSimpleMajority",
          "doc": [
            "Next external proposal not simple majority"
          ]
        },
        {
          "name": "InvalidHash",
          "doc": [
            "Invalid hash"
          ]
        },
        {
          "name": "NoProposal",
          "doc": [
            "No external proposal"
          ]
        },
        {
          "name": "AlreadyVetoed",
          "doc": [
            "Identity may not veto a proposal twice"
          ]
        },
        {
          "name": "NotDelegated",
          "doc": [
            "Not delegated"
          ]
        },
        {
          "name": "DuplicatePreimage",
          "doc": [
            "Preimage already noted"
          ]
        },
        {
          "name": "NotImminent",
          "doc": [
            "Not imminent"
          ]
        },
        {
          "name": "TooEarly",
          "doc": [
            "Too early"
          ]
        },
        {
          "name": "Imminent",
          "doc": [
            "Imminent"
          ]
        },
        {
          "name": "PreimageMissing",
          "doc": [
            "Preimage not found"
          ]
        },
        {
          "name": "ReferendumInvalid",
          "doc": [
            "Vote given for invalid referendum"
          ]
        },
        {
          "name": "PreimageInvalid",
          "doc": [
            "Invalid preimage"
          ]
        },
        {
          "name": "NoneWaiting",
          "doc": [
            "No proposals waiting"
          ]
        },
        {
          "name": "NotLocked",
          "doc": [
            "The target account does not have a lock."
          ]
        },
        {
          "name": "NotExpired",
          "doc": [
            "The lock on the account to be unlocked has not yet expired."
          ]
        },
        {
          "name": "NotVoter",
          "doc": [
            "The given account did not vote on the referendum."
          ]
        },
        {
          "name": "NoPermission",
          "doc": [
            "The actor has no permission to conduct the action."
          ]
        },
        {
          "name": "AlreadyDelegating",
          "doc": [
            "The account is already delegating."
          ]
        },
        {
          "name": "InsufficientFunds",
          "doc": [
            "Too high a balance was provided that the account cannot afford."
          ]
        },
        {
          "name": "NotDelegating",
          "doc": [
            "The account is not currently delegating."
          ]
        },
        {
          "name": "VotesExist",
          "doc": [
            "The account currently has votes attached to it and the operation cannot succeed until",
            "these are removed, either through `unvote` or `reap_vote`."
          ]
        },
        {
          "name": "InstantNotAllowed",
          "doc": [
            "The instant referendum origin is currently disallowed."
          ]
        },
        {
          "name": "Nonsense",
          "doc": [
            "Delegation to oneself makes no sense."
          ]
        },
        {
          "name": "WrongUpperBound",
          "doc": [
            "Invalid upper bound."
          ]
        },
        {
          "name": "MaxVotesReached",
          "doc": [
            "Maximum number of votes reached."
          ]
        },
        {
          "name": "InvalidWitness",
          "doc": [
            "The provided witness data is wrong."
          ]
        },
        {
          "name": "TooManyProposals",
          "doc": [
            "Maximum number of proposals reached."
          ]
        }
      ],
      "errors_value": {
        "type": 380
      },
      "index": 11
    },
    {
      "name": "Council",
      "prefix": "Instance1Collective",
      "storage": [
        {
          "name": "Proposals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 381
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ProposalOf",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 123
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Voting",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 382
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ProposalCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 39
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Prime",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0c00",
          "name": "set_members",
          "docs": [
            "Set the collective's membership.",
            "",
            "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
            "- `prime`: The prime member whose vote sets the default.",
            "- `old_count`: The upper bound for the previous number of members in storage.",
            "               Used for weight estimation.",
            "",
            "Requires root origin.",
            "",
            "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
            "      the weight estimations rely on it to estimate dispatchable weight.",
            "",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(MP + N)` where:",
            "  - `M` old-members-count (code- and governance-bounded)",
            "  - `N` new-members-count (code- and governance-bounded)",
            "  - `P` proposals-count (code-bounded)",
            "- DB:",
            "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
            "  - 1 storage read (codec `O(P)`) for reading the proposals",
            "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
            "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "new_members",
              "type": "Vec\u003c[U8; 32]\u003e"
            },
            {
              "name": "prime",
              "type": "option\u003c[U8; 32]\u003e"
            },
            {
              "name": "old_count",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0c01",
          "name": "execute",
          "docs": [
            "Dispatch a proposal from a member using the `Member` origin.",
            "",
            "Origin must be a member of the collective.",
            "",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
            "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
            "- 1 event",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "proposal",
              "type": "Call"
            },
            {
              "name": "length_bound",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0c02",
          "name": "propose",
          "docs": [
            "Add a new proposal to either be voted on or executed directly.",
            "",
            "Requires the sender to be member.",
            "",
            "`threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)",
            "or put up for voting.",
            "",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(B + M + P1)` or `O(B + M + P2)` where:",
            "  - `B` is `proposal` size in bytes (length-fee-bounded)",
            "  - `M` is members-count (code- and governance-bounded)",
            "  - branching is influenced by `threshold` where:",
            "    - `P1` is proposal execution complexity (`threshold \u003c 2`)",
            "    - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)",
            "- DB:",
            "  - 1 storage read `is_member` (codec `O(M)`)",
            "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
            "  - DB accesses influenced by `threshold`:",
            "    - EITHER storage accesses done by `proposal` (`threshold \u003c 2`)",
            "    - OR proposal insertion (`threshold \u003c= 2`)",
            "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
            "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
            "      - 1 storage write `ProposalOf` (codec `O(B)`)",
            "      - 1 storage write `Voting` (codec `O(M)`)",
            "  - 1 event",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "threshold",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "proposal",
              "type": "Call"
            },
            {
              "name": "length_bound",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0c03",
          "name": "vote",
          "docs": [
            "Add an aye or nay vote for the sender to the given proposal.",
            "",
            "Requires the sender to be a member.",
            "",
            "Transaction fees will be waived if the member is voting on any particular proposal",
            "for the first time and the call is successful. Subsequent vote changes will charge a fee.",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(M)` where `M` is members-count (code- and governance-bounded)",
            "- DB:",
            "  - 1 storage read `Members` (codec `O(M)`)",
            "  - 1 storage mutation `Voting` (codec `O(M)`)",
            "- 1 event",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "proposal",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "approve",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "0c04",
          "name": "close",
          "docs": [
            "Close a vote that is either approved, disapproved or whose voting period has ended.",
            "",
            "May be called by any signed account in order to finish voting and close the proposal.",
            "",
            "If called before the end of the voting period it will only close the vote if it is",
            "has enough votes to be approved or disapproved.",
            "",
            "If called after the end of the voting period abstentions are counted as rejections",
            "unless there is a prime member set and the prime member cast an approval.",
            "",
            "If the close operation completes successfully with disapproval, the transaction fee will",
            "be waived. Otherwise execution of the approved operation will be charged to the caller.",
            "",
            "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
            "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
            "                  `storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",
            "",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(B + M + P1 + P2)` where:",
            "  - `B` is `proposal` size in bytes (length-fee-bounded)",
            "  - `M` is members-count (code- and governance-bounded)",
            "  - `P1` is the complexity of `proposal` preimage.",
            "  - `P2` is proposal-count (code-bounded)",
            "- DB:",
            " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
            " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
            " - any mutations done while executing `proposal` (`P1`)",
            "- up to 3 events",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "proposal_weight_bound",
              "type": "compact\u003cU64\u003e"
            },
            {
              "name": "length_bound",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0c05",
          "name": "disapprove_proposal",
          "docs": [
            "Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
            "",
            "Must be called by the Root origin.",
            "",
            "Parameters:",
            "* `proposal_hash`: The hash of the proposal that should be disapproved.",
            "",
            "# \u003cweight\u003e",
            "Complexity: O(P) where P is the number of max proposals",
            "DB Weight:",
            "* Reads: Proposals",
            "* Writes: Voting, Proposals, ProposalOf",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 214
      },
      "events": [
        {
          "lookup": "0c00",
          "name": "Proposed",
          "docs": [
            "A motion (given hash) has been proposed (by given account) with a threshold (given",
            "`MemberCount`).",
            "\\[account, proposal_index, proposal_hash, threshold\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0c01",
          "name": "Voted",
          "docs": [
            "A motion (given hash) has been voted on by given account, leaving",
            "a tally (yes votes and no votes given respectively as `MemberCount`).",
            "\\[account, proposal_hash, voted, yes, no\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "Bool",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "0c02",
          "name": "Approved",
          "docs": [
            "A motion was approved by the required threshold.",
            "\\[proposal_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0c03",
          "name": "Disapproved",
          "docs": [
            "A motion was not approved by the required threshold.",
            "\\[proposal_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0c04",
          "name": "Executed",
          "docs": [
            "A motion was executed; result will be `Ok` if it returned without error.",
            "\\[proposal_hash, result\\]"
          ],
          "args": [
            "[U8; 32]",
            "Results\u003cNULL,DispatchError\u003e"
          ]
        },
        {
          "lookup": "0c05",
          "name": "MemberExecuted",
          "docs": [
            "A single member did some action; result will be `Ok` if it returned without error.",
            "\\[proposal_hash, result\\]"
          ],
          "args": [
            "[U8; 32]",
            "Results\u003cNULL,DispatchError\u003e"
          ]
        },
        {
          "lookup": "0c06",
          "name": "Closed",
          "docs": [
            "A proposal was closed because its threshold was reached or after its duration was up.",
            "\\[proposal_hash, yes, no\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 43
      },
      "errors": [
        {
          "name": "NotMember",
          "doc": [
            "Account is not a member"
          ]
        },
        {
          "name": "DuplicateProposal",
          "doc": [
            "Duplicate proposals not allowed"
          ]
        },
        {
          "name": "ProposalMissing",
          "doc": [
            "Proposal must exist"
          ]
        },
        {
          "name": "WrongIndex",
          "doc": [
            "Mismatched index"
          ]
        },
        {
          "name": "DuplicateVote",
          "doc": [
            "Duplicate vote ignored"
          ]
        },
        {
          "name": "AlreadyInitialized",
          "doc": [
            "Members are already initialized!"
          ]
        },
        {
          "name": "TooEarly",
          "doc": [
            "The close call was made too early, before the end of the voting."
          ]
        },
        {
          "name": "TooManyProposals",
          "doc": [
            "There can only be a maximum of `MaxProposals` active proposals."
          ]
        },
        {
          "name": "WrongProposalWeight",
          "doc": [
            "The given weight bound for the proposal was too low."
          ]
        },
        {
          "name": "WrongProposalLength",
          "doc": [
            "The given length bound for the proposal was too low."
          ]
        }
      ],
      "errors_value": {
        "type": 383
      },
      "index": 12
    },
    {
      "name": "TechnicalCommittee",
      "prefix": "Instance2Collective",
      "storage": [
        {
          "name": "Proposals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 384
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ProposalOf",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 123
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Voting",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 382
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ProposalCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 39
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Prime",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0d00",
          "name": "set_members",
          "docs": [
            "Set the collective's membership.",
            "",
            "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
            "- `prime`: The prime member whose vote sets the default.",
            "- `old_count`: The upper bound for the previous number of members in storage.",
            "               Used for weight estimation.",
            "",
            "Requires root origin.",
            "",
            "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
            "      the weight estimations rely on it to estimate dispatchable weight.",
            "",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(MP + N)` where:",
            "  - `M` old-members-count (code- and governance-bounded)",
            "  - `N` new-members-count (code- and governance-bounded)",
            "  - `P` proposals-count (code-bounded)",
            "- DB:",
            "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
            "  - 1 storage read (codec `O(P)`) for reading the proposals",
            "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
            "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "new_members",
              "type": "Vec\u003c[U8; 32]\u003e"
            },
            {
              "name": "prime",
              "type": "option\u003c[U8; 32]\u003e"
            },
            {
              "name": "old_count",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0d01",
          "name": "execute",
          "docs": [
            "Dispatch a proposal from a member using the `Member` origin.",
            "",
            "Origin must be a member of the collective.",
            "",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
            "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
            "- 1 event",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "proposal",
              "type": "Call"
            },
            {
              "name": "length_bound",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0d02",
          "name": "propose",
          "docs": [
            "Add a new proposal to either be voted on or executed directly.",
            "",
            "Requires the sender to be member.",
            "",
            "`threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)",
            "or put up for voting.",
            "",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(B + M + P1)` or `O(B + M + P2)` where:",
            "  - `B` is `proposal` size in bytes (length-fee-bounded)",
            "  - `M` is members-count (code- and governance-bounded)",
            "  - branching is influenced by `threshold` where:",
            "    - `P1` is proposal execution complexity (`threshold \u003c 2`)",
            "    - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)",
            "- DB:",
            "  - 1 storage read `is_member` (codec `O(M)`)",
            "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
            "  - DB accesses influenced by `threshold`:",
            "    - EITHER storage accesses done by `proposal` (`threshold \u003c 2`)",
            "    - OR proposal insertion (`threshold \u003c= 2`)",
            "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
            "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
            "      - 1 storage write `ProposalOf` (codec `O(B)`)",
            "      - 1 storage write `Voting` (codec `O(M)`)",
            "  - 1 event",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "threshold",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "proposal",
              "type": "Call"
            },
            {
              "name": "length_bound",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0d03",
          "name": "vote",
          "docs": [
            "Add an aye or nay vote for the sender to the given proposal.",
            "",
            "Requires the sender to be a member.",
            "",
            "Transaction fees will be waived if the member is voting on any particular proposal",
            "for the first time and the call is successful. Subsequent vote changes will charge a fee.",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(M)` where `M` is members-count (code- and governance-bounded)",
            "- DB:",
            "  - 1 storage read `Members` (codec `O(M)`)",
            "  - 1 storage mutation `Voting` (codec `O(M)`)",
            "- 1 event",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "proposal",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "approve",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "0d04",
          "name": "close",
          "docs": [
            "Close a vote that is either approved, disapproved or whose voting period has ended.",
            "",
            "May be called by any signed account in order to finish voting and close the proposal.",
            "",
            "If called before the end of the voting period it will only close the vote if it is",
            "has enough votes to be approved or disapproved.",
            "",
            "If called after the end of the voting period abstentions are counted as rejections",
            "unless there is a prime member set and the prime member cast an approval.",
            "",
            "If the close operation completes successfully with disapproval, the transaction fee will",
            "be waived. Otherwise execution of the approved operation will be charged to the caller.",
            "",
            "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
            "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
            "                  `storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",
            "",
            "# \u003cweight\u003e",
            "## Weight",
            "- `O(B + M + P1 + P2)` where:",
            "  - `B` is `proposal` size in bytes (length-fee-bounded)",
            "  - `M` is members-count (code- and governance-bounded)",
            "  - `P1` is the complexity of `proposal` preimage.",
            "  - `P2` is proposal-count (code-bounded)",
            "- DB:",
            " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
            " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
            " - any mutations done while executing `proposal` (`P1`)",
            "- up to 3 events",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "proposal_weight_bound",
              "type": "compact\u003cU64\u003e"
            },
            {
              "name": "length_bound",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0d05",
          "name": "disapprove_proposal",
          "docs": [
            "Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
            "",
            "Must be called by the Root origin.",
            "",
            "Parameters:",
            "* `proposal_hash`: The hash of the proposal that should be disapproved.",
            "",
            "# \u003cweight\u003e",
            "Complexity: O(P) where P is the number of max proposals",
            "DB Weight:",
            "* Reads: Proposals",
            "* Writes: Voting, Proposals, ProposalOf",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 216
      },
      "events": [
        {
          "lookup": "0d00",
          "name": "Proposed",
          "docs": [
            "A motion (given hash) has been proposed (by given account) with a threshold (given",
            "`MemberCount`).",
            "\\[account, proposal_index, proposal_hash, threshold\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0d01",
          "name": "Voted",
          "docs": [
            "A motion (given hash) has been voted on by given account, leaving",
            "a tally (yes votes and no votes given respectively as `MemberCount`).",
            "\\[account, proposal_hash, voted, yes, no\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "Bool",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "0d02",
          "name": "Approved",
          "docs": [
            "A motion was approved by the required threshold.",
            "\\[proposal_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0d03",
          "name": "Disapproved",
          "docs": [
            "A motion was not approved by the required threshold.",
            "\\[proposal_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0d04",
          "name": "Executed",
          "docs": [
            "A motion was executed; result will be `Ok` if it returned without error.",
            "\\[proposal_hash, result\\]"
          ],
          "args": [
            "[U8; 32]",
            "Results\u003cNULL,DispatchError\u003e"
          ]
        },
        {
          "lookup": "0d05",
          "name": "MemberExecuted",
          "docs": [
            "A single member did some action; result will be `Ok` if it returned without error.",
            "\\[proposal_hash, result\\]"
          ],
          "args": [
            "[U8; 32]",
            "Results\u003cNULL,DispatchError\u003e"
          ]
        },
        {
          "lookup": "0d06",
          "name": "Closed",
          "docs": [
            "A proposal was closed because its threshold was reached or after its duration was up.",
            "\\[proposal_hash, yes, no\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 45
      },
      "errors": [
        {
          "name": "NotMember",
          "doc": [
            "Account is not a member"
          ]
        },
        {
          "name": "DuplicateProposal",
          "doc": [
            "Duplicate proposals not allowed"
          ]
        },
        {
          "name": "ProposalMissing",
          "doc": [
            "Proposal must exist"
          ]
        },
        {
          "name": "WrongIndex",
          "doc": [
            "Mismatched index"
          ]
        },
        {
          "name": "DuplicateVote",
          "doc": [
            "Duplicate vote ignored"
          ]
        },
        {
          "name": "AlreadyInitialized",
          "doc": [
            "Members are already initialized!"
          ]
        },
        {
          "name": "TooEarly",
          "doc": [
            "The close call was made too early, before the end of the voting."
          ]
        },
        {
          "name": "TooManyProposals",
          "doc": [
            "There can only be a maximum of `MaxProposals` active proposals."
          ]
        },
        {
          "name": "WrongProposalWeight",
          "doc": [
            "The given weight bound for the proposal was too low."
          ]
        },
        {
          "name": "WrongProposalLength",
          "doc": [
            "The given length bound for the proposal was too low."
          ]
        }
      ],
      "errors_value": {
        "type": 385
      },
      "index": 13
    },
    {
      "name": "Elections",
      "prefix": "Elections",
      "storage": [
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 386
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "RunnersUp",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 386
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Candidates",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 48
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ElectionRounds",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Voting",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 388
            }
          },
          "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0e00",
          "name": "vote",
          "docs": null,
          "args": [
            {
              "name": "votes",
              "type": "Vec\u003c[U8; 32]\u003e"
            },
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "0e01",
          "name": "remove_voter",
          "docs": null,
          "args": null
        },
        {
          "lookup": "0e02",
          "name": "submit_candidacy",
          "docs": null,
          "args": [
            {
              "name": "candidate_count",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "0e03",
          "name": "renounce_candidacy",
          "docs": null,
          "args": [
            {
              "name": "renouncing",
              "type": "Renouncing"
            }
          ]
        },
        {
          "lookup": "0e04",
          "name": "remove_member",
          "docs": null,
          "args": [
            {
              "name": "who",
              "type": "MultiAddress"
            },
            {
              "name": "has_replacement",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "0e05",
          "name": "clean_defunct_voters",
          "docs": null,
          "args": [
            {
              "name": "_num_voters",
              "type": "U32"
            },
            {
              "name": "_num_defunct",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 217
      },
      "events": [
        {
          "lookup": "0e00",
          "name": "NewTerm",
          "docs": [
            "A new term with \\[new_members\\]. This indicates that enough candidates existed to run",
            "the election, not that enough have has been elected. The inner value must be examined",
            "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
            "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
            "begin with."
          ],
          "args": [
            "Vec\u003c([U8; 32],U128)\u003e"
          ]
        },
        {
          "lookup": "0e01",
          "name": "EmptyTerm",
          "docs": [
            "No (or not enough) candidates existed for this round. This is different from",
            "`NewTerm(\\[\\])`. See the description of `NewTerm`."
          ],
          "args": null
        },
        {
          "lookup": "0e02",
          "name": "ElectionError",
          "docs": [
            "Internal error happened while trying to perform election."
          ],
          "args": null
        },
        {
          "lookup": "0e03",
          "name": "MemberKicked",
          "docs": [
            "A \\[member\\] has been removed. This should always be followed by either `NewTerm` or",
            "`EmptyTerm`."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0e04",
          "name": "Renounced",
          "docs": [
            "Someone has renounced their candidacy."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0e05",
          "name": "CandidateSlashed",
          "docs": [
            "A \\[candidate\\] was slashed by \\[amount\\] due to failing to obtain a seat as member or",
            "runner-up.",
            "",
            "Note that old members and runners-up are also candidates."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0e06",
          "name": "SeatHolderSlashed",
          "docs": [
            "A \\[seat holder\\] was slashed by \\[amount\\] by being forcefully removed from the set."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 47
      },
      "constants": [
        {
          "name": "PalletId",
          "type": "",
          "type_value": 119,
          "constants_value": "phrelect",
          "docs": null
        },
        {
          "name": "CandidacyBond",
          "type": "",
          "type_value": 6,
          "constants_value": "0080c6a47e8d03000000000000000000",
          "docs": null
        },
        {
          "name": "VotingBondBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00f0436de36a01000000000000000000",
          "docs": null
        },
        {
          "name": "VotingBondFactor",
          "type": "",
          "type_value": 6,
          "constants_value": "0000cc7b9fae00000000000000000000",
          "docs": null
        },
        {
          "name": "DesiredMembers",
          "type": "",
          "type_value": 4,
          "constants_value": "0d000000",
          "docs": null
        },
        {
          "name": "DesiredRunnersUp",
          "type": "",
          "type_value": 4,
          "constants_value": "07000000",
          "docs": null
        },
        {
          "name": "TermDuration",
          "type": "",
          "type_value": 4,
          "constants_value": "80130300",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "UnableToVote",
          "doc": [
            "Cannot vote when no candidates or members exist."
          ]
        },
        {
          "name": "NoVotes",
          "doc": [
            "Must vote for at least one candidate."
          ]
        },
        {
          "name": "TooManyVotes",
          "doc": [
            "Cannot vote more than candidates."
          ]
        },
        {
          "name": "MaximumVotesExceeded",
          "doc": [
            "Cannot vote more than maximum allowed."
          ]
        },
        {
          "name": "LowBalance",
          "doc": [
            "Cannot vote with stake less than minimum balance."
          ]
        },
        {
          "name": "UnableToPayBond",
          "doc": [
            "Voter can not pay voting bond."
          ]
        },
        {
          "name": "MustBeVoter",
          "doc": [
            "Must be a voter."
          ]
        },
        {
          "name": "ReportSelf",
          "doc": [
            "Cannot report self."
          ]
        },
        {
          "name": "DuplicatedCandidate",
          "doc": [
            "Duplicated candidate submission."
          ]
        },
        {
          "name": "MemberSubmit",
          "doc": [
            "Member cannot re-submit candidacy."
          ]
        },
        {
          "name": "RunnerUpSubmit",
          "doc": [
            "Runner cannot re-submit candidacy."
          ]
        },
        {
          "name": "InsufficientCandidateFunds",
          "doc": [
            "Candidate does not have enough funds."
          ]
        },
        {
          "name": "NotMember",
          "doc": [
            "Not a member."
          ]
        },
        {
          "name": "InvalidWitnessData",
          "doc": [
            "The provided count of number of candidates is incorrect."
          ]
        },
        {
          "name": "InvalidVoteCount",
          "doc": [
            "The provided count of number of votes is incorrect."
          ]
        },
        {
          "name": "InvalidRenouncing",
          "doc": [
            "The renouncing origin presented a wrong `Renouncing` parameter."
          ]
        },
        {
          "name": "InvalidReplacement",
          "doc": [
            "Prediction regarding replacement after member removal is wrong."
          ]
        }
      ],
      "errors_value": {
        "type": 389
      },
      "index": 14
    },
    {
      "name": "TechnicalMembership",
      "prefix": "Instance1Membership",
      "storage": [
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 39
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Prime",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "0f00",
          "name": "add_member",
          "docs": [
            "Add a member `who` to the set.",
            "",
            "May only be called from `T::AddOrigin`."
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0f01",
          "name": "remove_member",
          "docs": [
            "Remove a member `who` from the set.",
            "",
            "May only be called from `T::RemoveOrigin`."
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0f02",
          "name": "swap_member",
          "docs": [
            "Swap out one member `remove` for another `add`.",
            "",
            "May only be called from `T::SwapOrigin`.",
            "",
            "Prime membership is *not* passed from `remove` to `add`, if extant."
          ],
          "args": [
            {
              "name": "remove",
              "type": "[U8; 32]"
            },
            {
              "name": "add",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0f03",
          "name": "reset_members",
          "docs": [
            "Change the membership to a new set, disregarding the existing membership. Be nice and",
            "pass `members` pre-sorted.",
            "",
            "May only be called from `T::ResetOrigin`."
          ],
          "args": [
            {
              "name": "members",
              "type": "Vec\u003c[U8; 32]\u003e"
            }
          ]
        },
        {
          "lookup": "0f04",
          "name": "change_key",
          "docs": [
            "Swap out the sending member for some other key `new`.",
            "",
            "May only be called from `Signed` origin of a current member.",
            "",
            "Prime membership is passed from the origin account to `new`, if extant."
          ],
          "args": [
            {
              "name": "new",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0f05",
          "name": "set_prime",
          "docs": [
            "Set the prime member. Must be a current member.",
            "",
            "May only be called from `T::PrimeOrigin`."
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0f06",
          "name": "clear_prime",
          "docs": [
            "Remove the prime member if it exists.",
            "",
            "May only be called from `T::PrimeOrigin`."
          ],
          "args": null
        }
      ],
      "calls_value": {
        "type": 219
      },
      "events": [
        {
          "lookup": "0f00",
          "name": "MemberAdded",
          "docs": [
            "The given member was added; see the transaction for who."
          ],
          "args": null
        },
        {
          "lookup": "0f01",
          "name": "MemberRemoved",
          "docs": [
            "The given member was removed; see the transaction for who."
          ],
          "args": null
        },
        {
          "lookup": "0f02",
          "name": "MembersSwapped",
          "docs": [
            "Two members were swapped; see the transaction for who."
          ],
          "args": null
        },
        {
          "lookup": "0f03",
          "name": "MembersReset",
          "docs": [
            "The membership was reset; see the transaction for who the new set is."
          ],
          "args": null
        },
        {
          "lookup": "0f04",
          "name": "KeyChanged",
          "docs": [
            "One of the members' keys changed."
          ],
          "args": null
        },
        {
          "lookup": "0f05",
          "name": "Dummy",
          "docs": [
            "Phantom member, never used."
          ],
          "args": null
        }
      ],
      "events_value": {
        "type": 50
      },
      "errors": [
        {
          "name": "AlreadyMember",
          "doc": [
            "Already a member."
          ]
        },
        {
          "name": "NotMember",
          "doc": [
            "Not a member."
          ]
        }
      ],
      "errors_value": {
        "type": 390
      },
      "index": 15
    },
    {
      "name": "Grandpa",
      "prefix": "Grandpa",
      "storage": [
        {
          "name": "State",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 391
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "PendingChange",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 392
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "NextForced",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Stalled",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 77
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "CurrentSetId",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": null
        },
        {
          "name": "SetIdSession",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 8,
              "hasher": "Twox64Concat",
              "value": 4
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1000",
          "name": "report_equivocation",
          "docs": null,
          "args": [
            {
              "name": "equivocation_proof",
              "type": "EquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "type": "MembershipProof"
            }
          ]
        },
        {
          "lookup": "1001",
          "name": "report_equivocation_unsigned",
          "docs": null,
          "args": [
            {
              "name": "equivocation_proof",
              "type": "EquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "type": "MembershipProof"
            }
          ]
        },
        {
          "lookup": "1002",
          "name": "note_stalled",
          "docs": null,
          "args": [
            {
              "name": "delay",
              "type": "U32"
            },
            {
              "name": "best_finalized_block_number",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 220
      },
      "events": [
        {
          "lookup": "1000",
          "name": "NewAuthorities",
          "docs": [
            "New authority set has been applied. \\[authority_set\\]"
          ],
          "args": [
            "Vec\u003c([U8; 32],U64)\u003e"
          ]
        },
        {
          "lookup": "1001",
          "name": "Paused",
          "docs": [
            "Current authority set has been paused."
          ],
          "args": null
        },
        {
          "lookup": "1002",
          "name": "Resumed",
          "docs": [
            "Current authority set has been resumed."
          ],
          "args": null
        }
      ],
      "events_value": {
        "type": 52
      },
      "errors": [
        {
          "name": "PauseFailed",
          "doc": [
            "Attempt to signal GRANDPA pause when the authority set isn't live",
            "(either paused or already pending pause)."
          ]
        },
        {
          "name": "ResumeFailed",
          "doc": [
            "Attempt to signal GRANDPA resume when the authority set isn't paused",
            "(either live or already pending resume)."
          ]
        },
        {
          "name": "ChangePending",
          "doc": [
            "Attempt to signal GRANDPA change with one already pending."
          ]
        },
        {
          "name": "TooSoon",
          "doc": [
            "Cannot signal forced change so soon after last."
          ]
        },
        {
          "name": "InvalidKeyOwnershipProof",
          "doc": [
            "A key ownership proof provided as part of an equivocation report is invalid."
          ]
        },
        {
          "name": "InvalidEquivocationProof",
          "doc": [
            "An equivocation proof provided as part of an equivocation report is invalid."
          ]
        },
        {
          "name": "DuplicateOffenceReport",
          "doc": [
            "A given equivocation report is valid but already previously reported."
          ]
        }
      ],
      "errors_value": {
        "type": 393
      },
      "index": 16
    },
    {
      "name": "Treasury",
      "prefix": "Treasury",
      "storage": [
        {
          "name": "ProposalCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Proposals",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 394
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Approvals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 395
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1100",
          "name": "propose_spend",
          "docs": null,
          "args": [
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "beneficiary",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "1101",
          "name": "reject_proposal",
          "docs": null,
          "args": [
            {
              "name": "proposal_id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "1102",
          "name": "approve_proposal",
          "docs": null,
          "args": [
            {
              "name": "proposal_id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 232
      },
      "events": [
        {
          "lookup": "1100",
          "name": "Proposed",
          "docs": [
            "New proposal. \\[proposal_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "1101",
          "name": "Spending",
          "docs": [
            "We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
          ],
          "args": [
            "U128"
          ]
        },
        {
          "lookup": "1102",
          "name": "Awarded",
          "docs": [
            "Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
          ],
          "args": [
            "U32",
            "U128",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1103",
          "name": "Rejected",
          "docs": [
            "A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
          ],
          "args": [
            "U32",
            "U128"
          ]
        },
        {
          "lookup": "1104",
          "name": "Burnt",
          "docs": [
            "Some of our funds have been burnt. \\[burn\\]"
          ],
          "args": [
            "U128"
          ]
        },
        {
          "lookup": "1105",
          "name": "Rollover",
          "docs": [
            "Spending has finished; this is the amount that rolls over until next spend.",
            "\\[budget_remaining\\]"
          ],
          "args": [
            "U128"
          ]
        },
        {
          "lookup": "1106",
          "name": "Deposit",
          "docs": [
            "Some funds have been deposited. \\[deposit\\]"
          ],
          "args": [
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 57
      },
      "constants": [
        {
          "name": "ProposalBond",
          "type": "",
          "type_value": 396,
          "constants_value": "50c30000",
          "docs": null
        },
        {
          "name": "ProposalBondMinimum",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "SpendPeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "80700000",
          "docs": null
        },
        {
          "name": "Burn",
          "type": "",
          "type_value": 396,
          "constants_value": "20a10700",
          "docs": null
        },
        {
          "name": "PalletId",
          "type": "",
          "type_value": 397,
          "constants_value": "py/trsry",
          "docs": null
        },
        {
          "name": "MaxApprovals",
          "type": "",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "InsufficientProposersBalance",
          "doc": [
            "Proposer's balance is too low."
          ]
        },
        {
          "name": "InvalidIndex",
          "doc": [
            "No proposal or bounty at that index."
          ]
        },
        {
          "name": "TooManyApprovals",
          "doc": [
            "Too many approvals in the queue."
          ]
        }
      ],
      "errors_value": {
        "type": 398
      },
      "index": 17
    },
    {
      "name": "Contracts",
      "prefix": "Contracts",
      "storage": [
        {
          "name": "PristineCode",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 10
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "CodeStorage",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 399
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "AccountCounter",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": null
        },
        {
          "name": "ContractInfoOf",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 401
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "DeletionQueue",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 405
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1200",
          "name": "call",
          "docs": null,
          "args": [
            {
              "name": "dest",
              "type": "MultiAddress"
            },
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "gas_limit",
              "type": "compact\u003cU64\u003e"
            },
            {
              "name": "data",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "1201",
          "name": "instantiate_with_code",
          "docs": null,
          "args": [
            {
              "name": "endowment",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "gas_limit",
              "type": "compact\u003cU64\u003e"
            },
            {
              "name": "code",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "data",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "salt",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "1202",
          "name": "instantiate",
          "docs": null,
          "args": [
            {
              "name": "endowment",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "gas_limit",
              "type": "compact\u003cU64\u003e"
            },
            {
              "name": "code_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "data",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "salt",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "1203",
          "name": "claim_surcharge",
          "docs": null,
          "args": [
            {
              "name": "dest",
              "type": "[U8; 32]"
            },
            {
              "name": "aux_sender",
              "type": "option\u003c[U8; 32]\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 233
      },
      "events": [
        {
          "lookup": "1200",
          "name": "Instantiated",
          "docs": [
            "Contract deployed by address at the specified address. \\[deployer, contract\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1201",
          "name": "Evicted",
          "docs": [
            "Contract has been evicted and is now in tombstone state. \\[contract\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1202",
          "name": "Terminated",
          "docs": [
            "Contract has been terminated without leaving a tombstone.",
            "\\[contract, beneficiary\\]",
            "",
            "# Params",
            "",
            "- `contract`: The contract that was terminated.",
            "- `beneficiary`: The account that received the contracts remaining balance.",
            "",
            "# Note",
            "",
            "The only way for a contract to be removed without a tombstone and emitting",
            "this event is by calling `seal_terminate`."
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1203",
          "name": "Restored",
          "docs": [
            "Restoration of a contract has been successful.",
            "\\[restorer, dest, code_hash, rent_allowance\\]",
            "",
            "# Params",
            "",
            "- `restorer`: Account ID of the restoring contract.",
            "- `dest`: Account ID of the restored contract.",
            "- `code_hash`: Code hash of the restored contract.",
            "- `rent_allowance`: Rent allowance of the restored contract."
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1204",
          "name": "CodeStored",
          "docs": [
            "Code with the specified hash has been stored. \\[code_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1205",
          "name": "ScheduleUpdated",
          "docs": [
            "Triggered when the current schedule is updated.",
            "\\[version\\]",
            "",
            "# Params",
            "",
            "- `version`: The version of the newly set schedule."
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "1206",
          "name": "ContractEmitted",
          "docs": [
            "A custom event emitted by the contract.",
            "\\[contract, data\\]",
            "",
            "# Params",
            "",
            "- `contract`: The contract that emitted the event.",
            "- `data`: Data supplied by the contract. Metadata generated during contract",
            "          compilation is needed to decode it."
          ],
          "args": [
            "[U8; 32]",
            "Vec\u003cU8\u003e"
          ]
        },
        {
          "lookup": "1207",
          "name": "CodeRemoved",
          "docs": [
            "A code with the specified hash was removed.",
            "\\[code_hash\\]",
            "",
            "This happens when the last contract that uses this code hash was removed or evicted."
          ],
          "args": [
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 58
      },
      "constants": [
        {
          "name": "Schedule",
          "type": "",
          "type_value": 407,
          "constants_value": "0400000000020000000100008000000010000000001000000001000020000000200000000040000000000200020000008e0f0000b04602009a8c0300a9720000767600005e380000ea5e00000753000097000000579e030088130500b60000007a170000c11100005721000099370000483a0000d0110000d8d12c08bc4300005c430000bb2e0000a942000000260000b72300009c370000ad540000de540000ca5400000354000018550000e553000011550000c053000007540000da540000a0530000e85300008d5400004a690000bd680000a56a000096670000b053000013540000055400006a5500009255000060550000f455000033550000cae32900000000007a332a00000000004041290000000000a6fb5d000000000060c02a0000000000e6d6290000000000065329000000000062002a0000000000d425290000000000b0522a00000000005cb3540000000000b41c1600000000008057640000000000000100000000000008f6380000000000710200000000000078d68a210000000098d6de2a000000007c75640900000000466d6f000000000070baac0000000000ec73de07000000007406000000000000922c190000000000fc9f1d00000000008618ee0900000000450200000000000082dc6108000000003e573102000000002704000000000000cc94430b000000009406e1100000000096fa930800000000dc010000000000009c020000000000001843c12400000000f001000000000000b80200000000000094070000000000008a9b2a0000000000561200000000000046432b0000000000ab0c000000000000c08c260000000000b005000000000000acd2260000000000b005000000000000",
          "docs": null
        },
        {
          "name": "SignedClaimHandicap",
          "type": "",
          "type_value": 4,
          "constants_value": "02000000",
          "docs": null
        },
        {
          "name": "TombstoneDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "00f0e8857a9c02000000000000000000",
          "docs": null
        },
        {
          "name": "DepositPerContract",
          "type": "",
          "type_value": 6,
          "constants_value": "00f0e8857a9c02000000000000000000",
          "docs": null
        },
        {
          "name": "DepositPerStorageByte",
          "type": "",
          "type_value": 6,
          "constants_value": "0060defb740500000000000000000000",
          "docs": null
        },
        {
          "name": "DepositPerStorageItem",
          "type": "",
          "type_value": 6,
          "constants_value": "00f0ab75a40d00000000000000000000",
          "docs": null
        },
        {
          "name": "RentFraction",
          "type": "",
          "type_value": 104,
          "constants_value": "85040000",
          "docs": null
        },
        {
          "name": "SurchargeReward",
          "type": "",
          "type_value": 6,
          "constants_value": "005cb2ec220000000000000000000000",
          "docs": null
        },
        {
          "name": "DeletionQueueDepth",
          "type": "",
          "type_value": 4,
          "constants_value": "1a040000",
          "docs": null
        },
        {
          "name": "DeletionWeightLimit",
          "type": "",
          "type_value": 8,
          "constants_value": "00d0ed902e000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "InvalidScheduleVersion",
          "doc": [
            "A new schedule must have a greater version than the current one."
          ]
        },
        {
          "name": "InvalidSurchargeClaim",
          "doc": [
            "An origin must be signed or inherent and auxiliary sender only provided on inherent."
          ]
        },
        {
          "name": "InvalidSourceContract",
          "doc": [
            "Cannot restore from nonexisting or tombstone contract."
          ]
        },
        {
          "name": "InvalidDestinationContract",
          "doc": [
            "Cannot restore to nonexisting or alive contract."
          ]
        },
        {
          "name": "InvalidTombstone",
          "doc": [
            "Tombstones don't match."
          ]
        },
        {
          "name": "InvalidContractOrigin",
          "doc": [
            "An origin TrieId written in the current block."
          ]
        },
        {
          "name": "OutOfGas",
          "doc": [
            "The executed contract exhausted its gas limit."
          ]
        },
        {
          "name": "OutputBufferTooSmall",
          "doc": [
            "The output buffer supplied to a contract API call was too small."
          ]
        },
        {
          "name": "BelowSubsistenceThreshold",
          "doc": [
            "Performing the requested transfer would have brought the contract below",
            "the subsistence threshold. No transfer is allowed to do this in order to allow",
            "for a tombstone to be created. Use `seal_terminate` to remove a contract without",
            "leaving a tombstone behind."
          ]
        },
        {
          "name": "NewContractNotFunded",
          "doc": [
            "The newly created contract is below the subsistence threshold after executing",
            "its contructor. No contracts are allowed to exist below that threshold."
          ]
        },
        {
          "name": "TransferFailed",
          "doc": [
            "Performing the requested transfer failed for a reason originating in the",
            "chosen currency implementation of the runtime. Most probably the balance is",
            "too low or locks are placed on it."
          ]
        },
        {
          "name": "MaxCallDepthReached",
          "doc": [
            "Performing a call was denied because the calling depth reached the limit",
            "of what is specified in the schedule."
          ]
        },
        {
          "name": "ContractNotFound",
          "doc": [
            "No contract was found at the specified address."
          ]
        },
        {
          "name": "ContractIsTombstone",
          "doc": [
            "A tombstone exist at the specified address.",
            "",
            "Tombstone cannot be called. Anyone can use `seal_restore_to` in order to revive",
            "the contract, though."
          ]
        },
        {
          "name": "RentNotPaid",
          "doc": [
            "The called contract does not have enough balance to pay for its storage.",
            "",
            "The contract ran out of balance and is therefore eligible for eviction into a",
            "tombstone. Anyone can evict the contract by submitting a `claim_surcharge`",
            "extrinsic. Alternatively, a plain balance transfer can be used in order to",
            "increase the contracts funds so that it can be called again."
          ]
        },
        {
          "name": "CodeTooLarge",
          "doc": [
            "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
            "current schedule."
          ]
        },
        {
          "name": "CodeNotFound",
          "doc": [
            "No code could be found at the supplied code hash."
          ]
        },
        {
          "name": "OutOfBounds",
          "doc": [
            "A buffer outside of sandbox memory was passed to a contract API function."
          ]
        },
        {
          "name": "DecodingFailed",
          "doc": [
            "Input passed to a contract API function failed to decode as expected type."
          ]
        },
        {
          "name": "ContractTrapped",
          "doc": [
            "Contract trapped during execution."
          ]
        },
        {
          "name": "ValueTooLarge",
          "doc": [
            "The size defined in `T::MaxValueSize` was exceeded."
          ]
        },
        {
          "name": "TerminatedWhileReentrant",
          "doc": [
            "Termination of a contract is not allowed while the contract is already",
            "on the call stack. Can be triggered by `seal_terminate` or `seal_restore_to."
          ]
        },
        {
          "name": "InputForwarded",
          "doc": [
            "`seal_call` forwarded this contracts input. It therefore is no longer available."
          ]
        },
        {
          "name": "RandomSubjectTooLong",
          "doc": [
            "The subject passed to `seal_random` exceeds the limit."
          ]
        },
        {
          "name": "TooManyTopics",
          "doc": [
            "The amount of topics passed to `seal_deposit_events` exceeds the limit."
          ]
        },
        {
          "name": "DuplicateTopics",
          "doc": [
            "The topics passed to `seal_deposit_events` contains at least one duplicate."
          ]
        },
        {
          "name": "NoChainExtension",
          "doc": [
            "The chain does not provide a chain extension. Calling the chain extension results",
            "in this error. Note that this usually  shouldn't happen as deploying such contracts",
            "is rejected."
          ]
        },
        {
          "name": "DeletionQueueFull",
          "doc": [
            "Removal of a contract failed because the deletion queue is full.",
            "",
            "This can happen when either calling [`Pallet::claim_surcharge`] or `seal_terminate`.",
            "The queue is filled by deleting contracts and emptied by a fixed amount each block.",
            "Trying again during another block is the only way to resolve this issue."
          ]
        },
        {
          "name": "ContractNotEvictable",
          "doc": [
            "A contract could not be evicted because it has enough balance to pay rent.",
            "",
            "This can be returned from [`Pallet::claim_surcharge`] because the target",
            "contract has enough balance to pay for its rent."
          ]
        },
        {
          "name": "StorageExhausted",
          "doc": [
            "A storage modification exhausted the 32bit type that holds the storage size.",
            "",
            "This can either happen when the accumulated storage in bytes is too large or",
            "when number of storage items is too large."
          ]
        },
        {
          "name": "DuplicateContract",
          "doc": [
            "A contract with the same AccountId already exists."
          ]
        },
        {
          "name": "TerminatedInConstructor",
          "doc": [
            "A contract self destructed in its constructor.",
            "",
            "This can be triggered by a call to `seal_terminate` or `seal_restore_to`."
          ]
        },
        {
          "name": "DebugMessageInvalidUTF8",
          "doc": [
            "The debug message specified to `seal_debug_message` does contain invalid UTF-8."
          ]
        },
        {
          "name": "ReentranceDenied",
          "doc": [
            "A call tried to invoke a contract that is flagged as non-reentrant."
          ]
        }
      ],
      "errors_value": {
        "type": 411
      },
      "index": 18
    },
    {
      "name": "Sudo",
      "prefix": "Sudo",
      "storage": [
        {
          "name": "Key",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 0
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1300",
          "name": "sudo",
          "docs": null,
          "args": [
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1301",
          "name": "sudo_unchecked_weight",
          "docs": null,
          "args": [
            {
              "name": "call",
              "type": "Call"
            },
            {
              "name": "_weight",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "1302",
          "name": "set_key",
          "docs": null,
          "args": [
            {
              "name": "new",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "1303",
          "name": "sudo_as",
          "docs": null,
          "args": [
            {
              "name": "who",
              "type": "MultiAddress"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 234
      },
      "events": [
        {
          "lookup": "1300",
          "name": "Sudid",
          "docs": [
            "A sudo just took place. \\[result\\]"
          ],
          "args": [
            "Results\u003cNULL,DispatchError\u003e"
          ]
        },
        {
          "lookup": "1301",
          "name": "KeyChanged",
          "docs": [
            "The \\[sudoer\\] just switched identity; the old key is supplied."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1302",
          "name": "SudoAsDone",
          "docs": [
            "A sudo just took place. \\[result\\]"
          ],
          "args": [
            "Results\u003cNULL,DispatchError\u003e"
          ]
        }
      ],
      "events_value": {
        "type": 59
      },
      "errors": [
        {
          "name": "RequireSudo",
          "doc": [
            "Sender must be the Sudo account"
          ]
        }
      ],
      "errors_value": {
        "type": 412
      },
      "index": 19
    },
    {
      "name": "ImOnline",
      "prefix": "ImOnline",
      "storage": [
        {
          "name": "HeartbeatAfter",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Keys",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 413
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ReceivedHeartbeats",
          "modifier": "Optional",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "key2": 4,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 10
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "AuthoredBlocks",
          "modifier": "Default",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 4
            }
          },
          "fallback": "0x00000000",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1400",
          "name": "heartbeat",
          "docs": null,
          "args": [
            {
              "name": "heartbeat",
              "type": "Heartbeat"
            },
            {
              "name": "_signature",
              "type": "[U8; 64]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 235
      },
      "events": [
        {
          "lookup": "1400",
          "name": "HeartbeatReceived",
          "docs": [
            "A new heartbeat was received from `AuthorityId` \\[authority_id\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1401",
          "name": "AllGood",
          "docs": [
            "At the end of the session, no offence was committed."
          ],
          "args": null
        },
        {
          "lookup": "1402",
          "name": "SomeOffline",
          "docs": [
            "At the end of the session, at least one validator was found to be \\[offline\\]."
          ],
          "args": [
            "Vec\u003c([U8; 32],Exposure)\u003e"
          ]
        }
      ],
      "events_value": {
        "type": 60
      },
      "constants": [
        {
          "name": "UnsignedPriority",
          "type": "",
          "type_value": 8,
          "constants_value": "ffffffffffffffff",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "InvalidKey",
          "doc": [
            "Non existent public key."
          ]
        },
        {
          "name": "DuplicatedHeartbeat",
          "doc": [
            "Duplicated heartbeat."
          ]
        }
      ],
      "errors_value": {
        "type": 414
      },
      "index": 20
    },
    {
      "name": "AuthorityDiscovery",
      "prefix": "",
      "storage": null,
      "errors": null,
      "errors_value": null,
      "index": 21
    },
    {
      "name": "Offences",
      "prefix": "Offences",
      "storage": [
        {
          "name": "Reports",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Twox64Concat",
              "value": 415
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ConcurrentReportsIndex",
          "modifier": "Default",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 70,
              "key2": 10,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 98
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ReportsByKindIndex",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 70,
              "hasher": "Twox64Concat",
              "value": 10
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "events": [
        {
          "lookup": "1600",
          "name": "Offence",
          "docs": [
            "There is an offence reported of the given `kind` happened at the `session_index` and",
            "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
            "\\[kind, timeslot\\]."
          ],
          "args": [
            "[U8; 16]",
            "Vec\u003cU8\u003e"
          ]
        }
      ],
      "events_value": {
        "type": 69
      },
      "errors": null,
      "errors_value": null,
      "index": 22
    },
    {
      "name": "Historical",
      "prefix": "",
      "storage": null,
      "errors": null,
      "errors_value": null,
      "index": 23
    },
    {
      "name": "RandomnessCollectiveFlip",
      "prefix": "RandomnessCollectiveFlip",
      "storage": [
        {
          "name": "RandomMaterial",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 98
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 24
    },
    {
      "name": "Identity",
      "prefix": "Identity",
      "storage": [
        {
          "name": "IdentityOf",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 416
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SuperOf",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Blake2_128Concat",
              "value": 279
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SubsOf",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 420
            }
          },
          "fallback": "0x0000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Registrars",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 422
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1900",
          "name": "add_registrar",
          "docs": null,
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1901",
          "name": "set_identity",
          "docs": null,
          "args": [
            {
              "name": "info",
              "type": "IdentityInfo"
            }
          ]
        },
        {
          "lookup": "1902",
          "name": "set_subs",
          "docs": null,
          "args": [
            {
              "name": "subs",
              "type": "Vec\u003c([U8; 32],Data)\u003e"
            }
          ]
        },
        {
          "lookup": "1903",
          "name": "clear_identity",
          "docs": null,
          "args": null
        },
        {
          "lookup": "1904",
          "name": "request_judgement",
          "docs": null,
          "args": [
            {
              "name": "reg_index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "max_fee",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "1905",
          "name": "cancel_request",
          "docs": null,
          "args": [
            {
              "name": "reg_index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1906",
          "name": "set_fee",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "fee",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "1907",
          "name": "set_account_id",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "new",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1908",
          "name": "set_fields",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "fields",
              "type": "IdentityField"
            }
          ]
        },
        {
          "lookup": "1909",
          "name": "provide_judgement",
          "docs": null,
          "args": [
            {
              "name": "reg_index",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "target",
              "type": "MultiAddress"
            },
            {
              "name": "judgement",
              "type": "Judgement"
            }
          ]
        },
        {
          "lookup": "190a",
          "name": "kill_identity",
          "docs": null,
          "args": [
            {
              "name": "target",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "190b",
          "name": "add_sub",
          "docs": null,
          "args": [
            {
              "name": "sub",
              "type": "MultiAddress"
            },
            {
              "name": "data",
              "type": "Data"
            }
          ]
        },
        {
          "lookup": "190c",
          "name": "rename_sub",
          "docs": null,
          "args": [
            {
              "name": "sub",
              "type": "MultiAddress"
            },
            {
              "name": "data",
              "type": "Data"
            }
          ]
        },
        {
          "lookup": "190d",
          "name": "remove_sub",
          "docs": null,
          "args": [
            {
              "name": "sub",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "190e",
          "name": "quit_sub",
          "docs": null,
          "args": null
        }
      ],
      "calls_value": {
        "type": 243
      },
      "events": [
        {
          "lookup": "1900",
          "name": "IdentitySet",
          "docs": [
            "A name was set or reset (which will remove all judgements). \\[who\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1901",
          "name": "IdentityCleared",
          "docs": [
            "A name was cleared, and the given balance returned. \\[who, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1902",
          "name": "IdentityKilled",
          "docs": [
            "A name was removed and the given balance slashed. \\[who, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1903",
          "name": "JudgementRequested",
          "docs": [
            "A judgement was asked from a registrar. \\[who, registrar_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "1904",
          "name": "JudgementUnrequested",
          "docs": [
            "A judgement request was retracted. \\[who, registrar_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "1905",
          "name": "JudgementGiven",
          "docs": [
            "A judgement was given by a registrar. \\[target, registrar_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "1906",
          "name": "RegistrarAdded",
          "docs": [
            "A registrar was added. \\[registrar_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "1907",
          "name": "SubIdentityAdded",
          "docs": [
            "A sub-identity was added to an identity and the deposit paid. \\[sub, main, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1908",
          "name": "SubIdentityRemoved",
          "docs": [
            "A sub-identity was removed from an identity and the deposit freed.",
            "\\[sub, main, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1909",
          "name": "SubIdentityRevoked",
          "docs": [
            "A sub-identity was cleared, and the given deposit repatriated from the",
            "main identity account to the sub-identity account. \\[sub, main, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 71
      },
      "constants": [
        {
          "name": "BasicDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "0080c6a47e8d03000000000000000000",
          "docs": null
        },
        {
          "name": "FieldDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "00a031a95fe300000000000000000000",
          "docs": null
        },
        {
          "name": "SubAccountDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "0080f420e6b500000000000000000000",
          "docs": null
        },
        {
          "name": "MaxSubAccounts",
          "type": "",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": null
        },
        {
          "name": "MaxAdditionalFields",
          "type": "",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": null
        },
        {
          "name": "MaxRegistrars",
          "type": "",
          "type_value": 4,
          "constants_value": "14000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "TooManySubAccounts",
          "doc": [
            "Too many subs-accounts."
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "Account isn't found."
          ]
        },
        {
          "name": "NotNamed",
          "doc": [
            "Account isn't named."
          ]
        },
        {
          "name": "EmptyIndex",
          "doc": [
            "Empty index."
          ]
        },
        {
          "name": "FeeChanged",
          "doc": [
            "Fee is changed."
          ]
        },
        {
          "name": "NoIdentity",
          "doc": [
            "No identity found."
          ]
        },
        {
          "name": "StickyJudgement",
          "doc": [
            "Sticky judgement."
          ]
        },
        {
          "name": "JudgementGiven",
          "doc": [
            "Judgement given."
          ]
        },
        {
          "name": "InvalidJudgement",
          "doc": [
            "Invalid judgement."
          ]
        },
        {
          "name": "InvalidIndex",
          "doc": [
            "The index is invalid."
          ]
        },
        {
          "name": "InvalidTarget",
          "doc": [
            "The target is invalid."
          ]
        },
        {
          "name": "TooManyFields",
          "doc": [
            "Too many additional fields."
          ]
        },
        {
          "name": "TooManyRegistrars",
          "doc": [
            "Maximum amount of registrars reached. Cannot add any more."
          ]
        },
        {
          "name": "AlreadyClaimed",
          "doc": [
            "Account ID is already named."
          ]
        },
        {
          "name": "NotSub",
          "doc": [
            "Sender is not a sub-account."
          ]
        },
        {
          "name": "NotOwned",
          "doc": [
            "Sub-account isn't owned by sender."
          ]
        }
      ],
      "errors_value": {
        "type": 426
      },
      "index": 25
    },
    {
      "name": "Society",
      "prefix": "Society",
      "storage": [
        {
          "name": "Founder",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Rules",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 9
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Candidates",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 427
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SuspendedCandidates",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 430
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Pot",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Head",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 39
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "SuspendedMembers",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 34
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Bids",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 427
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Vouching",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 431
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Payouts",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 432
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Strikes",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 4
            }
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Votes",
          "modifier": "Optional",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 434
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Defender",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "DefenderVotes",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 434
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "MaxMembers",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1a00",
          "name": "bid",
          "docs": [
            "A user outside of the society can make a bid for entry.",
            "",
            "Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
            "when the bid becomes a member, or if the bid calls `unbid`.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `value`: A one time payment the bid would like to receive when joining the society.",
            "",
            "# \u003cweight\u003e",
            "Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)",
            "- Storage Reads:",
            "\t- One storage read to check for suspended candidate. O(1)",
            "\t- One storage read to check for suspended member. O(1)",
            "\t- One storage read to retrieve all current bids. O(B)",
            "\t- One storage read to retrieve all current candidates. O(C)",
            "\t- One storage read to retrieve all members. O(M)",
            "- Storage Writes:",
            "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)",
            "\t- Up to one storage removal if bid.len() \u003e MAX_BID_COUNT. O(1)",
            "- Notable Computation:",
            "\t- O(B + C + log M) search to check user is not already a part of society.",
            "\t- O(log B) search to insert the new bid sorted.",
            "- External Module Operations:",
            "\t- One balance reserve operation. O(X)",
            "\t- Up to one balance unreserve operation if bids.len() \u003e MAX_BID_COUNT.",
            "- Events:",
            "\t- One event for new bid.",
            "\t- Up to one event for AutoUnbid if bid.len() \u003e MAX_BID_COUNT.",
            "",
            "Total Complexity: O(M + B + C + logM + logB + X)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "value",
              "type": "U128"
            }
          ]
        },
        {
          "lookup": "1a01",
          "name": "unbid",
          "docs": [
            "A bidder can remove their bid for entry into society.",
            "By doing so, they will have their candidate deposit returned or",
            "they will unvouch their voucher.",
            "",
            "Payment: The bid deposit is unreserved if the user made a bid.",
            "",
            "The dispatch origin for this call must be _Signed_ and a bidder.",
            "",
            "Parameters:",
            "- `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
            "",
            "# \u003cweight\u003e",
            "Key: B (len of bids), X (balance unreserve)",
            "- One storage read and write to retrieve and update the bids. O(B)",
            "- Either one unreserve balance action O(X) or one vouching storage removal. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(B + X)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "pos",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1a02",
          "name": "vouch",
          "docs": [
            "As a member, vouch for someone to join society by placing a bid on their behalf.",
            "",
            "There is no deposit required to vouch for a new bid, but a member can only vouch for",
            "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
            "the suspension judgement origin, the member will be banned from vouching again.",
            "",
            "As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
            "be paid as a portion of the reward the member will receive for joining the society.",
            "",
            "The dispatch origin for this call must be _Signed_ and a member.",
            "",
            "Parameters:",
            "- `who`: The user who you would like to vouch for.",
            "- `value`: The total reward to be paid between you and the candidate if they become",
            "a member in the society.",
            "- `tip`: Your cut of the total `value` payout when the candidate is inducted into",
            "the society. Tips larger than `value` will be saturated upon payout.",
            "",
            "# \u003cweight\u003e",
            "Key: B (len of bids), C (len of candidates), M (len of members)",
            "- Storage Reads:",
            "\t- One storage read to retrieve all members. O(M)",
            "\t- One storage read to check member is not already vouching. O(1)",
            "\t- One storage read to check for suspended candidate. O(1)",
            "\t- One storage read to check for suspended member. O(1)",
            "\t- One storage read to retrieve all current bids. O(B)",
            "\t- One storage read to retrieve all current candidates. O(C)",
            "- Storage Writes:",
            "\t- One storage write to insert vouching status to the member. O(1)",
            "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)",
            "\t- Up to one storage removal if bid.len() \u003e MAX_BID_COUNT. O(1)",
            "- Notable Computation:",
            "\t- O(log M) search to check sender is a member.",
            "\t- O(B + C + log M) search to check user is not already a part of society.",
            "\t- O(log B) search to insert the new bid sorted.",
            "- External Module Operations:",
            "\t- One balance reserve operation. O(X)",
            "\t- Up to one balance unreserve operation if bids.len() \u003e MAX_BID_COUNT.",
            "- Events:",
            "\t- One event for vouch.",
            "\t- Up to one event for AutoUnbid if bid.len() \u003e MAX_BID_COUNT.",
            "",
            "Total Complexity: O(M + B + C + logM + logB + X)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "value",
              "type": "U128"
            },
            {
              "name": "tip",
              "type": "U128"
            }
          ]
        },
        {
          "lookup": "1a03",
          "name": "unvouch",
          "docs": [
            "As a vouching member, unvouch a bid. This only works while vouched user is",
            "only a bidder (and not a candidate).",
            "",
            "The dispatch origin for this call must be _Signed_ and a vouching member.",
            "",
            "Parameters:",
            "- `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
            "",
            "# \u003cweight\u003e",
            "Key: B (len of bids)",
            "- One storage read O(1) to check the signer is a vouching member.",
            "- One storage mutate to retrieve and update the bids. O(B)",
            "- One vouching storage removal. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(B)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "pos",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1a04",
          "name": "vote",
          "docs": [
            "As a member, vote on a candidate.",
            "",
            "The dispatch origin for this call must be _Signed_ and a member.",
            "",
            "Parameters:",
            "- `candidate`: The candidate that the member would like to bid on.",
            "- `approve`: A boolean which says if the candidate should be",
            "             approved (`true`) or rejected (`false`).",
            "",
            "# \u003cweight\u003e",
            "Key: C (len of candidates), M (len of members)",
            "- One storage read O(M) and O(log M) search to check user is a member.",
            "- One account lookup.",
            "- One storage read O(C) and O(C) search to check that user is a candidate.",
            "- One storage write to add vote to votes. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(M + logM + C)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "candidate",
              "type": "MultiAddress"
            },
            {
              "name": "approve",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "1a05",
          "name": "defender_vote",
          "docs": [
            "As a member, vote on the defender.",
            "",
            "The dispatch origin for this call must be _Signed_ and a member.",
            "",
            "Parameters:",
            "- `approve`: A boolean which says if the candidate should be",
            "approved (`true`) or rejected (`false`).",
            "",
            "# \u003cweight\u003e",
            "- Key: M (len of members)",
            "- One storage read O(M) and O(log M) search to check user is a member.",
            "- One storage write to add vote to votes. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(M + logM)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "approve",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "1a06",
          "name": "payout",
          "docs": [
            "Transfer the first matured payout for the sender and remove it from the records.",
            "",
            "NOTE: This extrinsic needs to be called multiple times to claim multiple matured payouts.",
            "",
            "Payment: The member will receive a payment equal to their first matured",
            "payout to their free balance.",
            "",
            "The dispatch origin for this call must be _Signed_ and a member with",
            "payouts remaining.",
            "",
            "# \u003cweight\u003e",
            "Key: M (len of members), P (number of payouts for a particular member)",
            "- One storage read O(M) and O(log M) search to check signer is a member.",
            "- One storage read O(P) to get all payouts for a member.",
            "- One storage read O(1) to get the current block number.",
            "- One currency transfer call. O(X)",
            "- One storage write or removal to update the member's payouts. O(P)",
            "",
            "Total Complexity: O(M + logM + P + X)",
            "# \u003c/weight\u003e"
          ],
          "args": null
        },
        {
          "lookup": "1a07",
          "name": "found",
          "docs": [
            "Found the society.",
            "",
            "This is done as a discrete action in order to allow for the",
            "module to be included into a running chain and can only be done once.",
            "",
            "The dispatch origin for this call must be from the _FounderSetOrigin_.",
            "",
            "Parameters:",
            "- `founder` - The first member and head of the newly founded society.",
            "- `max_members` - The initial max number of members for the society.",
            "- `rules` - The rules of this society concerning membership.",
            "",
            "# \u003cweight\u003e",
            "- Two storage mutates to set `Head` and `Founder`. O(1)",
            "- One storage write to add the first member to society. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(1)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "founder",
              "type": "[U8; 32]"
            },
            {
              "name": "max_members",
              "type": "U32"
            },
            {
              "name": "rules",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "1a08",
          "name": "unfound",
          "docs": [
            "Annul the founding of the society.",
            "",
            "The dispatch origin for this call must be Signed, and the signing account must be both",
            "the `Founder` and the `Head`. This implies that it may only be done when there is one",
            "member.",
            "",
            "# \u003cweight\u003e",
            "- Two storage reads O(1).",
            "- Four storage removals O(1).",
            "- One event.",
            "",
            "Total Complexity: O(1)",
            "# \u003c/weight\u003e"
          ],
          "args": null
        },
        {
          "lookup": "1a09",
          "name": "judge_suspended_member",
          "docs": [
            "Allow suspension judgement origin to make judgement on a suspended member.",
            "",
            "If a suspended member is forgiven, we simply add them back as a member, not affecting",
            "any of the existing storage items for that member.",
            "",
            "If a suspended member is rejected, remove all associated storage items, including",
            "their payouts, and remove any vouched bids they currently have.",
            "",
            "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
            "",
            "Parameters:",
            "- `who` - The suspended member to be judged.",
            "- `forgive` - A boolean representing whether the suspension judgement origin",
            "              forgives (`true`) or rejects (`false`) a suspended member.",
            "",
            "# \u003cweight\u003e",
            "Key: B (len of bids), M (len of members)",
            "- One storage read to check `who` is a suspended member. O(1)",
            "- Up to one storage write O(M) with O(log M) binary search to add a member back to society.",
            "- Up to 3 storage removals O(1) to clean up a removed member.",
            "- Up to one storage write O(B) with O(B) search to remove vouched bid from bids.",
            "- Up to one additional event if unvouch takes place.",
            "- One storage removal. O(1)",
            "- One event for the judgement.",
            "",
            "Total Complexity: O(M + logM + B)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "forgive",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "1a0a",
          "name": "judge_suspended_candidate",
          "docs": [
            "Allow suspended judgement origin to make judgement on a suspended candidate.",
            "",
            "If the judgement is `Approve`, we add them to society as a member with the appropriate",
            "payment for joining society.",
            "",
            "If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
            "to the society treasury, or we ban the voucher from vouching again.",
            "",
            "If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
            "through the induction process again.",
            "",
            "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
            "",
            "Parameters:",
            "- `who` - The suspended candidate to be judged.",
            "- `judgement` - `Approve`, `Reject`, or `Rebid`.",
            "",
            "# \u003cweight\u003e",
            "Key: B (len of bids), M (len of members), X (balance action)",
            "- One storage read to check `who` is a suspended candidate.",
            "- One storage removal of the suspended candidate.",
            "- Approve Logic",
            "\t- One storage read to get the available pot to pay users with. O(1)",
            "\t- One storage write to update the available pot. O(1)",
            "\t- One storage read to get the current block number. O(1)",
            "\t- One storage read to get all members. O(M)",
            "\t- Up to one unreserve currency action.",
            "\t- Up to two new storage writes to payouts.",
            "\t- Up to one storage write with O(log M) binary search to add a member to society.",
            "- Reject Logic",
            "\t- Up to one repatriate reserved currency action. O(X)",
            "\t- Up to one storage write to ban the vouching member from vouching again.",
            "- Rebid Logic",
            "\t- Storage mutate with O(log B) binary search to place the user back into bids.",
            "- Up to one additional event if unvouch takes place.",
            "- One storage removal.",
            "- One event for the judgement.",
            "",
            "Total Complexity: O(M + logM + B + X)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "judgement",
              "type": "Judgement"
            }
          ]
        },
        {
          "lookup": "1a0b",
          "name": "set_max_members",
          "docs": [
            "Allows root origin to change the maximum number of members in society.",
            "Max membership count must be greater than 1.",
            "",
            "The dispatch origin for this call must be from _ROOT_.",
            "",
            "Parameters:",
            "- `max` - The maximum number of members for the society.",
            "",
            "# \u003cweight\u003e",
            "- One storage write to update the max. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(1)",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "max",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 283
      },
      "events": [
        {
          "lookup": "1a00",
          "name": "Founded",
          "docs": [
            "The society is founded by the given identity. \\[founder\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a01",
          "name": "Bid",
          "docs": [
            "A membership bid just happened. The given account is the candidate's ID and their offer",
            "is the second. \\[candidate_id, offer\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1a02",
          "name": "Vouch",
          "docs": [
            "A membership bid just happened by vouching. The given account is the candidate's ID and",
            "their offer is the second. The vouching party is the third. \\[candidate_id, offer, vouching\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a03",
          "name": "AutoUnbid",
          "docs": [
            "A \\[candidate\\] was dropped (due to an excess of bids in the system)."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a04",
          "name": "Unbid",
          "docs": [
            "A \\[candidate\\] was dropped (by their request)."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a05",
          "name": "Unvouch",
          "docs": [
            "A \\[candidate\\] was dropped (by request of who vouched for them)."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a06",
          "name": "Inducted",
          "docs": [
            "A group of candidates have been inducted. The batch's primary is the first value, the",
            "batch in full is the second. \\[primary, candidates\\]"
          ],
          "args": [
            "[U8; 32]",
            "Vec\u003c[U8; 32]\u003e"
          ]
        },
        {
          "lookup": "1a07",
          "name": "SuspendedMemberJudgement",
          "docs": [
            "A suspended member has been judged. \\[who, judged\\]"
          ],
          "args": [
            "[U8; 32]",
            "Bool"
          ]
        },
        {
          "lookup": "1a08",
          "name": "CandidateSuspended",
          "docs": [
            "A \\[candidate\\] has been suspended"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a09",
          "name": "MemberSuspended",
          "docs": [
            "A \\[member\\] has been suspended"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a0a",
          "name": "Challenged",
          "docs": [
            "A \\[member\\] has been challenged"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a0b",
          "name": "Vote",
          "docs": [
            "A vote has been placed \\[candidate, voter, vote\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "Bool"
          ]
        },
        {
          "lookup": "1a0c",
          "name": "DefenderVote",
          "docs": [
            "A vote has been placed for a defending member \\[voter, vote\\]"
          ],
          "args": [
            "[U8; 32]",
            "Bool"
          ]
        },
        {
          "lookup": "1a0d",
          "name": "NewMaxMembers",
          "docs": [
            "A new \\[max\\] member count has been set"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "1a0e",
          "name": "Unfounded",
          "docs": [
            "Society is unfounded. \\[founder\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a0f",
          "name": "Deposit",
          "docs": [
            "Some funds were deposited into the society account. \\[value\\]"
          ],
          "args": [
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 72
      },
      "constants": [
        {
          "name": "CandidateDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "0080c6a47e8d03000000000000000000",
          "docs": null
        },
        {
          "name": "WrongSideDeduction",
          "type": "",
          "type_value": 6,
          "constants_value": "0080f420e6b500000000000000000000",
          "docs": null
        },
        {
          "name": "MaxStrikes",
          "type": "",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": null
        },
        {
          "name": "PeriodSpend",
          "type": "",
          "type_value": 6,
          "constants_value": "0000c52ebca2b1000000000000000000",
          "docs": null
        },
        {
          "name": "RotationPeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "00770100",
          "docs": null
        },
        {
          "name": "ChallengePeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "80130300",
          "docs": null
        },
        {
          "name": "PalletId",
          "type": "",
          "type_value": 397,
          "constants_value": "py/socie",
          "docs": null
        },
        {
          "name": "MaxCandidateIntake",
          "type": "",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "BadPosition",
          "doc": [
            "An incorrect position was provided."
          ]
        },
        {
          "name": "NotMember",
          "doc": [
            "User is not a member."
          ]
        },
        {
          "name": "AlreadyMember",
          "doc": [
            "User is already a member."
          ]
        },
        {
          "name": "Suspended",
          "doc": [
            "User is suspended."
          ]
        },
        {
          "name": "NotSuspended",
          "doc": [
            "User is not suspended."
          ]
        },
        {
          "name": "NoPayout",
          "doc": [
            "Nothing to payout."
          ]
        },
        {
          "name": "AlreadyFounded",
          "doc": [
            "Society already founded."
          ]
        },
        {
          "name": "InsufficientPot",
          "doc": [
            "Not enough in pot to accept candidate."
          ]
        },
        {
          "name": "AlreadyVouching",
          "doc": [
            "Member is already vouching or banned from vouching again."
          ]
        },
        {
          "name": "NotVouching",
          "doc": [
            "Member is not vouching."
          ]
        },
        {
          "name": "Head",
          "doc": [
            "Cannot remove the head of the chain."
          ]
        },
        {
          "name": "Founder",
          "doc": [
            "Cannot remove the founder."
          ]
        },
        {
          "name": "AlreadyBid",
          "doc": [
            "User has already made a bid."
          ]
        },
        {
          "name": "AlreadyCandidate",
          "doc": [
            "User is already a candidate."
          ]
        },
        {
          "name": "NotCandidate",
          "doc": [
            "User is not a candidate."
          ]
        },
        {
          "name": "MaxMembers",
          "doc": [
            "Too many members in the society."
          ]
        },
        {
          "name": "NotFounder",
          "doc": [
            "The caller is not the founder."
          ]
        },
        {
          "name": "NotHead",
          "doc": [
            "The caller is not the head."
          ]
        }
      ],
      "errors_value": {
        "type": 435
      },
      "index": 26
    },
    {
      "name": "Recovery",
      "prefix": "Recovery",
      "storage": [
        {
          "name": "Recoverable",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 436
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ActiveRecoveries",
          "modifier": "Optional",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "key2Hasher": "Twox64Concat",
              "value": 437
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Proxy",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Blake2_128Concat",
              "value": 0
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1b00",
          "name": "as_recovered",
          "docs": null,
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1b01",
          "name": "set_recovered",
          "docs": null,
          "args": [
            {
              "name": "lost",
              "type": "[U8; 32]"
            },
            {
              "name": "rescuer",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b02",
          "name": "create_recovery",
          "docs": null,
          "args": [
            {
              "name": "friends",
              "type": "Vec\u003c[U8; 32]\u003e"
            },
            {
              "name": "threshold",
              "type": "U16"
            },
            {
              "name": "delay_period",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1b03",
          "name": "initiate_recovery",
          "docs": null,
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b04",
          "name": "vouch_recovery",
          "docs": null,
          "args": [
            {
              "name": "lost",
              "type": "[U8; 32]"
            },
            {
              "name": "rescuer",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b05",
          "name": "claim_recovery",
          "docs": null,
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b06",
          "name": "close_recovery",
          "docs": null,
          "args": [
            {
              "name": "rescuer",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b07",
          "name": "remove_recovery",
          "docs": null,
          "args": null
        },
        {
          "lookup": "1b08",
          "name": "cancel_recovered",
          "docs": null,
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 285
      },
      "events": [
        {
          "lookup": "1b00",
          "name": "RecoveryCreated",
          "docs": [
            "A recovery process has been set up for an \\[account\\]."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b01",
          "name": "RecoveryInitiated",
          "docs": [
            "A recovery process has been initiated for lost account by rescuer account.",
            "\\[lost, rescuer\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b02",
          "name": "RecoveryVouched",
          "docs": [
            "A recovery process for lost account by rescuer account has been vouched for by sender.",
            "\\[lost, rescuer, sender\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b03",
          "name": "RecoveryClosed",
          "docs": [
            "A recovery process for lost account by rescuer account has been closed.",
            "\\[lost, rescuer\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b04",
          "name": "AccountRecovered",
          "docs": [
            "Lost account has been successfully recovered by rescuer account.",
            "\\[lost, rescuer\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b05",
          "name": "RecoveryRemoved",
          "docs": [
            "A recovery process has been removed for an \\[account\\]."
          ],
          "args": [
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 74
      },
      "constants": [
        {
          "name": "ConfigDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00406352bfc601000000000000000000",
          "docs": null
        },
        {
          "name": "FriendDepositFactor",
          "type": "",
          "type_value": 6,
          "constants_value": "00203d88792d00000000000000000000",
          "docs": null
        },
        {
          "name": "MaxFriends",
          "type": "",
          "type_value": 81,
          "constants_value": "0900",
          "docs": null
        },
        {
          "name": "RecoveryDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "00406352bfc601000000000000000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "NotAllowed",
          "doc": [
            "User is not allowed to make a call on behalf of this account"
          ]
        },
        {
          "name": "ZeroThreshold",
          "doc": [
            "Threshold must be greater than zero"
          ]
        },
        {
          "name": "NotEnoughFriends",
          "doc": [
            "Friends list must be greater than zero and threshold"
          ]
        },
        {
          "name": "MaxFriends",
          "doc": [
            "Friends list must be less than max friends"
          ]
        },
        {
          "name": "NotSorted",
          "doc": [
            "Friends list must be sorted and free of duplicates"
          ]
        },
        {
          "name": "NotRecoverable",
          "doc": [
            "This account is not set up for recovery"
          ]
        },
        {
          "name": "AlreadyRecoverable",
          "doc": [
            "This account is already set up for recovery"
          ]
        },
        {
          "name": "AlreadyStarted",
          "doc": [
            "A recovery process has already started for this account"
          ]
        },
        {
          "name": "NotStarted",
          "doc": [
            "A recovery process has not started for this rescuer"
          ]
        },
        {
          "name": "NotFriend",
          "doc": [
            "This account is not a friend who can vouch"
          ]
        },
        {
          "name": "DelayPeriod",
          "doc": [
            "The friend must wait until the delay period to vouch for this recovery"
          ]
        },
        {
          "name": "AlreadyVouched",
          "doc": [
            "This user has already vouched for this recovery"
          ]
        },
        {
          "name": "Threshold",
          "doc": [
            "The threshold for recovering this account has not been met"
          ]
        },
        {
          "name": "StillActive",
          "doc": [
            "There are still active recovery attempts that need to be closed"
          ]
        },
        {
          "name": "AlreadyProxy",
          "doc": [
            "This account is already set up for recovery"
          ]
        },
        {
          "name": "BadState",
          "doc": [
            "Some internal state is broken."
          ]
        }
      ],
      "errors_value": {
        "type": 438
      },
      "index": 27
    },
    {
      "name": "Vesting",
      "prefix": "Vesting",
      "storage": [
        {
          "name": "Vesting",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Blake2_128Concat",
              "value": 287
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1c00",
          "name": "vest",
          "docs": null,
          "args": null
        },
        {
          "lookup": "1c01",
          "name": "vest_other",
          "docs": null,
          "args": [
            {
              "name": "target",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "1c02",
          "name": "vested_transfer",
          "docs": null,
          "args": [
            {
              "name": "target",
              "type": "MultiAddress"
            },
            {
              "name": "schedule",
              "type": "VestingInfo"
            }
          ]
        },
        {
          "lookup": "1c03",
          "name": "force_vested_transfer",
          "docs": null,
          "args": [
            {
              "name": "source",
              "type": "MultiAddress"
            },
            {
              "name": "target",
              "type": "MultiAddress"
            },
            {
              "name": "schedule",
              "type": "VestingInfo"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 286
      },
      "events": [
        {
          "lookup": "1c00",
          "name": "VestingUpdated",
          "docs": [
            "The amount vested has been updated. This could indicate more funds are available. The",
            "balance given is the amount which is left unvested (and thus locked).",
            "\\[account, unvested\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1c01",
          "name": "VestingCompleted",
          "docs": [
            "An \\[account\\] has become fully vested. No further vesting can happen."
          ],
          "args": [
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 75
      },
      "constants": [
        {
          "name": "MinVestedTransfer",
          "type": "",
          "type_value": 6,
          "constants_value": "0000c16ff28623000000000000000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "NotVesting",
          "doc": [
            "The account given is not vesting."
          ]
        },
        {
          "name": "ExistingVestingSchedule",
          "doc": [
            "An existing vesting schedule already exists for this account that cannot be clobbered."
          ]
        },
        {
          "name": "AmountLow",
          "doc": [
            "Amount being transferred is too low to create a vesting schedule."
          ]
        }
      ],
      "errors_value": {
        "type": 439
      },
      "index": 28
    },
    {
      "name": "Scheduler",
      "prefix": "Scheduler",
      "storage": [
        {
          "name": "Agenda",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 440
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Lookup",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 10,
              "hasher": "Twox64Concat",
              "value": 77
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 448
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1d00",
          "name": "schedule",
          "docs": null,
          "args": [
            {
              "name": "when",
              "type": "U32"
            },
            {
              "name": "maybe_periodic",
              "type": "option\u003c(U32,U32)\u003e"
            },
            {
              "name": "priority",
              "type": "U8"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1d01",
          "name": "cancel",
          "docs": null,
          "args": [
            {
              "name": "when",
              "type": "U32"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1d02",
          "name": "schedule_named",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "when",
              "type": "U32"
            },
            {
              "name": "maybe_periodic",
              "type": "option\u003c(U32,U32)\u003e"
            },
            {
              "name": "priority",
              "type": "U8"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1d03",
          "name": "cancel_named",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "1d04",
          "name": "schedule_after",
          "docs": null,
          "args": [
            {
              "name": "after",
              "type": "U32"
            },
            {
              "name": "maybe_periodic",
              "type": "option\u003c(U32,U32)\u003e"
            },
            {
              "name": "priority",
              "type": "U8"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1d05",
          "name": "schedule_named_after",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "after",
              "type": "U32"
            },
            {
              "name": "maybe_periodic",
              "type": "option\u003c(U32,U32)\u003e"
            },
            {
              "name": "priority",
              "type": "U8"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 288
      },
      "events": [
        {
          "lookup": "1d00",
          "name": "Scheduled",
          "docs": [
            "Scheduled some task. \\[when, index\\]"
          ],
          "args": [
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "1d01",
          "name": "Canceled",
          "docs": [
            "Canceled some task. \\[when, index\\]"
          ],
          "args": [
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "1d02",
          "name": "Dispatched",
          "docs": [
            "Dispatched some task. \\[task, id, result\\]"
          ],
          "args": [
            "(U32,U32)",
            "option\u003cVec\u003cU8\u003e\u003e",
            "Results\u003cNULL,DispatchError\u003e"
          ]
        }
      ],
      "events_value": {
        "type": 76
      },
      "constants": [
        {
          "name": "MaximumWeight",
          "type": "",
          "type_value": 8,
          "constants_value": "00806e8774010000",
          "docs": null
        },
        {
          "name": "MaxScheduledPerBlock",
          "type": "",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "FailedToSchedule",
          "doc": [
            "Failed to schedule a call"
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "Cannot find the scheduled call."
          ]
        },
        {
          "name": "TargetBlockNumberInPast",
          "doc": [
            "Given target block number is in the past."
          ]
        },
        {
          "name": "RescheduleNoChange",
          "doc": [
            "Reschedule failed because it does not change scheduled time."
          ]
        }
      ],
      "errors_value": {
        "type": 449
      },
      "index": 29
    },
    {
      "name": "Proxy",
      "prefix": "Proxy",
      "storage": [
        {
          "name": "Proxies",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 450
            }
          },
          "fallback": "0x0000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Announcements",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 454
            }
          },
          "fallback": "0x0000000000000000000000000000000000",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1e00",
          "name": "proxy",
          "docs": null,
          "args": [
            {
              "name": "real",
              "type": "[U8; 32]"
            },
            {
              "name": "force_proxy_type",
              "type": "option\u003cProxyType\u003e"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1e01",
          "name": "add_proxy",
          "docs": null,
          "args": [
            {
              "name": "delegate",
              "type": "[U8; 32]"
            },
            {
              "name": "proxy_type",
              "type": "ProxyType"
            },
            {
              "name": "delay",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1e02",
          "name": "remove_proxy",
          "docs": null,
          "args": [
            {
              "name": "delegate",
              "type": "[U8; 32]"
            },
            {
              "name": "proxy_type",
              "type": "ProxyType"
            },
            {
              "name": "delay",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1e03",
          "name": "remove_proxies",
          "docs": null,
          "args": null
        },
        {
          "lookup": "1e04",
          "name": "anonymous",
          "docs": null,
          "args": [
            {
              "name": "proxy_type",
              "type": "ProxyType"
            },
            {
              "name": "delay",
              "type": "U32"
            },
            {
              "name": "index",
              "type": "U16"
            }
          ]
        },
        {
          "lookup": "1e05",
          "name": "kill_anonymous",
          "docs": null,
          "args": [
            {
              "name": "spawner",
              "type": "[U8; 32]"
            },
            {
              "name": "proxy_type",
              "type": "ProxyType"
            },
            {
              "name": "index",
              "type": "U16"
            },
            {
              "name": "height",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "ext_index",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "1e06",
          "name": "announce",
          "docs": null,
          "args": [
            {
              "name": "real",
              "type": "[U8; 32]"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1e07",
          "name": "remove_announcement",
          "docs": null,
          "args": [
            {
              "name": "real",
              "type": "[U8; 32]"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1e08",
          "name": "reject_announcement",
          "docs": null,
          "args": [
            {
              "name": "delegate",
              "type": "[U8; 32]"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1e09",
          "name": "proxy_announced",
          "docs": null,
          "args": [
            {
              "name": "delegate",
              "type": "[U8; 32]"
            },
            {
              "name": "real",
              "type": "[U8; 32]"
            },
            {
              "name": "force_proxy_type",
              "type": "option\u003cProxyType\u003e"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 290
      },
      "events": [
        {
          "lookup": "1e00",
          "name": "ProxyExecuted",
          "docs": [
            "A proxy was executed correctly, with the given \\[result\\]."
          ],
          "args": [
            "Results\u003cNULL,DispatchError\u003e"
          ]
        },
        {
          "lookup": "1e01",
          "name": "AnonymousCreated",
          "docs": [
            "Anonymous account has been created by new proxy with given",
            "disambiguation index and proxy type. \\[anonymous, who, proxy_type, disambiguation_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "ProxyType",
            "U16"
          ]
        },
        {
          "lookup": "1e02",
          "name": "Announced",
          "docs": [
            "An announcement was placed to make a call in the future. \\[real, proxy, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 79
      },
      "constants": [
        {
          "name": "ProxyDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00f09e544c3900000000000000000000",
          "docs": null
        },
        {
          "name": "ProxyDepositFactor",
          "type": "",
          "type_value": 6,
          "constants_value": "0060aa7714b400000000000000000000",
          "docs": null
        },
        {
          "name": "MaxProxies",
          "type": "",
          "type_value": 4,
          "constants_value": "20000000",
          "docs": null
        },
        {
          "name": "MaxPending",
          "type": "",
          "type_value": 4,
          "constants_value": "20000000",
          "docs": null
        },
        {
          "name": "AnnouncementDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00f09e544c3900000000000000000000",
          "docs": null
        },
        {
          "name": "AnnouncementDepositFactor",
          "type": "",
          "type_value": 6,
          "constants_value": "00c054ef286801000000000000000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "TooMany",
          "doc": [
            "There are too many proxies registered or too many announcements pending."
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "Proxy registration not found."
          ]
        },
        {
          "name": "NotProxy",
          "doc": [
            "Sender is not a proxy of the account to be proxied."
          ]
        },
        {
          "name": "Unproxyable",
          "doc": [
            "A call which is incompatible with the proxy type's filter was attempted."
          ]
        },
        {
          "name": "Duplicate",
          "doc": [
            "Account is already a proxy."
          ]
        },
        {
          "name": "NoPermission",
          "doc": [
            "Call may not be made by proxy because it may escalate its privileges."
          ]
        },
        {
          "name": "Unannounced",
          "doc": [
            "Announcement, if made at all, was made too recently."
          ]
        },
        {
          "name": "NoSelfProxy",
          "doc": [
            "Cannot add self as proxy."
          ]
        }
      ],
      "errors_value": {
        "type": 458
      },
      "index": 30
    },
    {
      "name": "Multisig",
      "prefix": "Multisig",
      "storage": [
        {
          "name": "Multisigs",
          "modifier": "Optional",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 0,
              "key2": 1,
              "hasher": "Twox64Concat",
              "key2Hasher": "Blake2_128Concat",
              "value": 459
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Calls",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 1,
              "hasher": "Identity",
              "value": 460
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1f00",
          "name": "as_multi_threshold_1",
          "docs": null,
          "args": [
            {
              "name": "other_signatories",
              "type": "Vec\u003c[U8; 32]\u003e"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1f01",
          "name": "as_multi",
          "docs": null,
          "args": [
            {
              "name": "threshold",
              "type": "U16"
            },
            {
              "name": "other_signatories",
              "type": "Vec\u003c[U8; 32]\u003e"
            },
            {
              "name": "maybe_timepoint",
              "type": "option\u003cTimepoint\u003e"
            },
            {
              "name": "call",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "store_call",
              "type": "Bool"
            },
            {
              "name": "max_weight",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "1f02",
          "name": "approve_as_multi",
          "docs": null,
          "args": [
            {
              "name": "threshold",
              "type": "U16"
            },
            {
              "name": "other_signatories",
              "type": "Vec\u003c[U8; 32]\u003e"
            },
            {
              "name": "maybe_timepoint",
              "type": "option\u003cTimepoint\u003e"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "max_weight",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "1f03",
          "name": "cancel_as_multi",
          "docs": null,
          "args": [
            {
              "name": "threshold",
              "type": "U16"
            },
            {
              "name": "other_signatories",
              "type": "Vec\u003c[U8; 32]\u003e"
            },
            {
              "name": "timepoint",
              "type": "Timepoint"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 292
      },
      "events": [
        {
          "lookup": "1f00",
          "name": "NewMultisig",
          "docs": [
            "A new multisig operation has begun. \\[approving, multisig, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1f01",
          "name": "MultisigApproval",
          "docs": [
            "A multisig operation has been approved by someone.",
            "\\[approving, timepoint, multisig, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "Timepoint",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1f02",
          "name": "MultisigExecuted",
          "docs": [
            "A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "Timepoint",
            "[U8; 32]",
            "[U8; 32]",
            "Results\u003cNULL,DispatchError\u003e"
          ]
        },
        {
          "lookup": "1f03",
          "name": "MultisigCancelled",
          "docs": [
            "A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "Timepoint",
            "[U8; 32]",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 82
      },
      "constants": [
        {
          "name": "DepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00f01c0adbed01000000000000000000",
          "docs": null
        },
        {
          "name": "DepositFactor",
          "type": "",
          "type_value": 6,
          "constants_value": "0000cc7b9fae00000000000000000000",
          "docs": null
        },
        {
          "name": "MaxSignatories",
          "type": "",
          "type_value": 81,
          "constants_value": "6400",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "MinimumThreshold",
          "doc": [
            "Threshold must be 2 or greater."
          ]
        },
        {
          "name": "AlreadyApproved",
          "doc": [
            "Call is already approved by this signatory."
          ]
        },
        {
          "name": "NoApprovalsNeeded",
          "doc": [
            "Call doesn't need any (more) approvals."
          ]
        },
        {
          "name": "TooFewSignatories",
          "doc": [
            "There are too few signatories in the list."
          ]
        },
        {
          "name": "TooManySignatories",
          "doc": [
            "There are too many signatories in the list."
          ]
        },
        {
          "name": "SignatoriesOutOfOrder",
          "doc": [
            "The signatories were provided out of order; they should be ordered."
          ]
        },
        {
          "name": "SenderInSignatories",
          "doc": [
            "The sender was contained in the other signatories; it shouldn't be."
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "Multisig operation not found when attempting to cancel."
          ]
        },
        {
          "name": "NotOwner",
          "doc": [
            "Only the account that originally created the multisig is able to cancel it."
          ]
        },
        {
          "name": "NoTimepoint",
          "doc": [
            "No timepoint was given, yet the multisig operation is already underway."
          ]
        },
        {
          "name": "WrongTimepoint",
          "doc": [
            "A different timepoint was given to the multisig operation that is underway."
          ]
        },
        {
          "name": "UnexpectedTimepoint",
          "doc": [
            "A timepoint was given, yet no multisig operation is underway."
          ]
        },
        {
          "name": "MaxWeightTooLow",
          "doc": [
            "The maximum weight information provided was too low."
          ]
        },
        {
          "name": "AlreadyStored",
          "doc": [
            "The data to be stored is already stored."
          ]
        }
      ],
      "errors_value": {
        "type": 461
      },
      "index": 31
    },
    {
      "name": "Bounties",
      "prefix": "Treasury",
      "storage": [
        {
          "name": "BountyCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Bounties",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 462
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "BountyDescriptions",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 10
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "BountyApprovals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 92
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "2000",
          "name": "propose_bounty",
          "docs": [
            "Propose a new bounty.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
            "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
            "or slashed when rejected.",
            "",
            "- `curator`: The curator account whom will manage this bounty.",
            "- `fee`: The curator fee.",
            "- `value`: The total payment amount of this bounty, curator fee included.",
            "- `description`: The description of this bounty."
          ],
          "args": [
            {
              "name": "value",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "description",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "2001",
          "name": "approve_bounty",
          "docs": [
            "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
            "and the original deposit will be returned.",
            "",
            "May only be called from `T::ApproveOrigin`.",
            "",
            "# \u003cweight\u003e",
            "- O(1).",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2002",
          "name": "propose_curator",
          "docs": [
            "Assign a curator to a funded bounty.",
            "",
            "May only be called from `T::ApproveOrigin`.",
            "",
            "# \u003cweight\u003e",
            "- O(1).",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "curator",
              "type": "MultiAddress"
            },
            {
              "name": "fee",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "2003",
          "name": "unassign_curator",
          "docs": [
            "Unassign curator from a bounty.",
            "",
            "This function can only be called by the `RejectOrigin` a signed origin.",
            "",
            "If this function is called by the `RejectOrigin`, we assume that the curator is malicious",
            "or inactive. As a result, we will slash the curator when possible.",
            "",
            "If the origin is the curator, we take this as a sign they are unable to do their job and",
            "they willingly give up. We could slash them, but for now we allow them to recover their",
            "deposit and exit without issue. (We may want to change this if it is abused.)",
            "",
            "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
            "anyone in the community to call out that a curator is not doing their due diligence, and",
            "we should pick a new curator. In this case the curator should also be slashed.",
            "",
            "# \u003cweight\u003e",
            "- O(1).",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2004",
          "name": "accept_curator",
          "docs": [
            "Accept the curator role for a bounty.",
            "A deposit will be reserved from curator and refund upon successful payout.",
            "",
            "May only be called from the curator.",
            "",
            "# \u003cweight\u003e",
            "- O(1).",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2005",
          "name": "award_bounty",
          "docs": [
            "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay.",
            "",
            "The dispatch origin for this call must be the curator of this bounty.",
            "",
            "- `bounty_id`: Bounty ID to award.",
            "- `beneficiary`: The beneficiary account whom will receive the payout.",
            "",
            "# \u003cweight\u003e",
            "- O(1).",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "beneficiary",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "2006",
          "name": "claim_bounty",
          "docs": [
            "Claim the payout from an awarded bounty after payout delay.",
            "",
            "The dispatch origin for this call must be the beneficiary of this bounty.",
            "",
            "- `bounty_id`: Bounty ID to claim.",
            "",
            "# \u003cweight\u003e",
            "- O(1).",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2007",
          "name": "close_bounty",
          "docs": [
            "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
            "the curator deposit will be unreserved if possible.",
            "",
            "Only `T::RejectOrigin` is able to cancel a bounty.",
            "",
            "- `bounty_id`: Bounty ID to cancel.",
            "",
            "# \u003cweight\u003e",
            "- O(1).",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2008",
          "name": "extend_bounty_expiry",
          "docs": [
            "Extend the expiry time of an active bounty.",
            "",
            "The dispatch origin for this call must be the curator of this bounty.",
            "",
            "- `bounty_id`: Bounty ID to extend.",
            "- `remark`: additional information.",
            "",
            "# \u003cweight\u003e",
            "- O(1).",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "_remark",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 294
      },
      "events": [
        {
          "lookup": "2000",
          "name": "BountyProposed",
          "docs": [
            "New bounty proposal. \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2001",
          "name": "BountyRejected",
          "docs": [
            "A bounty proposal was rejected; funds were slashed. \\[index, bond\\]"
          ],
          "args": [
            "U32",
            "U128"
          ]
        },
        {
          "lookup": "2002",
          "name": "BountyBecameActive",
          "docs": [
            "A bounty proposal is funded and became active. \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2003",
          "name": "BountyAwarded",
          "docs": [
            "A bounty is awarded to a beneficiary. \\[index, beneficiary\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2004",
          "name": "BountyClaimed",
          "docs": [
            "A bounty is claimed by beneficiary. \\[index, payout, beneficiary\\]"
          ],
          "args": [
            "U32",
            "U128",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2005",
          "name": "BountyCanceled",
          "docs": [
            "A bounty is cancelled. \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2006",
          "name": "BountyExtended",
          "docs": [
            "A bounty expiry is extended. \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 84
      },
      "constants": [
        {
          "name": "DataDepositPerByte",
          "type": "",
          "type_value": 6,
          "constants_value": "0010a5d4e80000000000000000000000",
          "docs": null
        },
        {
          "name": "BountyDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "BountyDepositPayoutDelay",
          "type": "",
          "type_value": 4,
          "constants_value": "80700000",
          "docs": null
        },
        {
          "name": "BountyUpdatePeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "00270600",
          "docs": null
        },
        {
          "name": "BountyCuratorDeposit",
          "type": "",
          "type_value": 396,
          "constants_value": "20a10700",
          "docs": null
        },
        {
          "name": "BountyValueMinimum",
          "type": "",
          "type_value": 6,
          "constants_value": "00406352bfc601000000000000000000",
          "docs": null
        },
        {
          "name": "MaximumReasonLength",
          "type": "",
          "type_value": 4,
          "constants_value": "00400000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "InsufficientProposersBalance",
          "doc": [
            "Proposer's balance is too low."
          ]
        },
        {
          "name": "InvalidIndex",
          "doc": [
            "No proposal or bounty at that index."
          ]
        },
        {
          "name": "ReasonTooBig",
          "doc": [
            "The reason given is just too big."
          ]
        },
        {
          "name": "UnexpectedStatus",
          "doc": [
            "The bounty status is unexpected."
          ]
        },
        {
          "name": "RequireCurator",
          "doc": [
            "Require bounty curator."
          ]
        },
        {
          "name": "InvalidValue",
          "doc": [
            "Invalid bounty value."
          ]
        },
        {
          "name": "InvalidFee",
          "doc": [
            "Invalid bounty fee."
          ]
        },
        {
          "name": "PendingPayout",
          "doc": [
            "A bounty payout is pending.",
            "To cancel the bounty, you must unassign and slash the curator."
          ]
        },
        {
          "name": "Premature",
          "doc": [
            "The bounties cannot be claimed/closed because it's still in the countdown period."
          ]
        }
      ],
      "errors_value": {
        "type": 464
      },
      "index": 32
    },
    {
      "name": "Tips",
      "prefix": "Treasury",
      "storage": [
        {
          "name": "Tips",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Twox64Concat",
              "value": 465
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Reasons",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 9,
              "hasher": "Identity",
              "value": 10
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "2100",
          "name": "report_awesome",
          "docs": [
            "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
            "`DataDepositPerByte` for each byte in `reason`.",
            "",
            "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
            "  a UTF-8-encoded URL.",
            "- `who`: The account which should be credited for the tip.",
            "",
            "Emits `NewTip` if successful.",
            "",
            "# \u003cweight\u003e",
            "- Complexity: `O(R)` where `R` length of `reason`.",
            "  - encoding and hashing of 'reason'",
            "- DbReads: `Reasons`, `Tips`",
            "- DbWrites: `Reasons`, `Tips`",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "reason",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "who",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "2101",
          "name": "retract_tip",
          "docs": [
            "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
            "",
            "If successful, the original deposit will be unreserved.",
            "",
            "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
            "must have been reported by the signing account through `report_awesome` (and not",
            "through `tip_new`).",
            "",
            "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
            "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
            "",
            "Emits `TipRetracted` if successful.",
            "",
            "# \u003cweight\u003e",
            "- Complexity: `O(1)`",
            "  - Depends on the length of `T::Hash` which is fixed.",
            "- DbReads: `Tips`, `origin account`",
            "- DbWrites: `Reasons`, `Tips`, `origin account`",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "2102",
          "name": "tip_new",
          "docs": [
            "Give a tip for something new; no finder's fee will be taken.",
            "",
            "The dispatch origin for this call must be _Signed_ and the signing account must be a",
            "member of the `Tippers` set.",
            "",
            "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
            "  a UTF-8-encoded URL.",
            "- `who`: The account which should be credited for the tip.",
            "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
            "  value of active tippers will be given to the `who`.",
            "",
            "Emits `NewTip` if successful.",
            "",
            "# \u003cweight\u003e",
            "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
            "  - `O(T)`: decoding `Tipper` vec of length `T`",
            "    `T` is charged as upper bound given by `ContainsLengthBound`.",
            "    The actual cost depends on the implementation of `T::Tippers`.",
            "  - `O(R)`: hashing and encoding of reason of length `R`",
            "- DbReads: `Tippers`, `Reasons`",
            "- DbWrites: `Reasons`, `Tips`",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "reason",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "tip_value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "2103",
          "name": "tip",
          "docs": [
            "Declare a tip value for an already-open tip.",
            "",
            "The dispatch origin for this call must be _Signed_ and the signing account must be a",
            "member of the `Tippers` set.",
            "",
            "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
            "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
            "  account ID.",
            "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
            "  value of active tippers will be given to the `who`.",
            "",
            "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
            "has started.",
            "",
            "# \u003cweight\u003e",
            "- Complexity: `O(T)` where `T` is the number of tippers.",
            "  decoding `Tipper` vec of length `T`, insert tip and check closing,",
            "  `T` is charged as upper bound given by `ContainsLengthBound`.",
            "  The actual cost depends on the implementation of `T::Tippers`.",
            "",
            "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
            "  is weighted as if almost full i.e of length `T-1`.",
            "- DbReads: `Tippers`, `Tips`",
            "- DbWrites: `Tips`",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "hash",
              "type": "[U8; 32]"
            },
            {
              "name": "tip_value",
              "type": "compact\u003cU128\u003e"
            }
          ]
        },
        {
          "lookup": "2104",
          "name": "close_tip",
          "docs": [
            "Close and payout a tip.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "The tip identified by `hash` must have finished its countdown period.",
            "",
            "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
            "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
            "",
            "# \u003cweight\u003e",
            "- Complexity: `O(T)` where `T` is the number of tippers.",
            "  decoding `Tipper` vec of length `T`.",
            "  `T` is charged as upper bound given by `ContainsLengthBound`.",
            "  The actual cost depends on the implementation of `T::Tippers`.",
            "- DbReads: `Tips`, `Tippers`, `tip finder`",
            "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "2105",
          "name": "slash_tip",
          "docs": [
            "Remove and slash an already-open tip.",
            "",
            "May only be called from `T::RejectOrigin`.",
            "",
            "As a result, the finder is slashed and the deposits are lost.",
            "",
            "Emits `TipSlashed` if successful.",
            "",
            "# \u003cweight\u003e",
            "  `T` is charged as upper bound given by `ContainsLengthBound`.",
            "  The actual cost depends on the implementation of `T::Tippers`.",
            "# \u003c/weight\u003e"
          ],
          "args": [
            {
              "name": "hash",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 295
      },
      "events": [
        {
          "lookup": "2100",
          "name": "NewTip",
          "docs": [
            "A new tip suggestion has been opened. \\[tip_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2101",
          "name": "TipClosing",
          "docs": [
            "A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2102",
          "name": "TipClosed",
          "docs": [
            "A tip suggestion has been closed. \\[tip_hash, who, payout\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "2103",
          "name": "TipRetracted",
          "docs": [
            "A tip suggestion has been retracted. \\[tip_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2104",
          "name": "TipSlashed",
          "docs": [
            "A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 85
      },
      "constants": [
        {
          "name": "TipCountdown",
          "type": "",
          "type_value": 4,
          "constants_value": "80700000",
          "docs": null
        },
        {
          "name": "TipFindersFee",
          "type": "",
          "type_value": 205,
          "constants_value": "14",
          "docs": null
        },
        {
          "name": "TipReportDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "DataDepositPerByte",
          "type": "",
          "type_value": 6,
          "constants_value": "0010a5d4e80000000000000000000000",
          "docs": null
        },
        {
          "name": "MaximumReasonLength",
          "type": "",
          "type_value": 4,
          "constants_value": "00400000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "ReasonTooBig",
          "doc": [
            "The reason given is just too big."
          ]
        },
        {
          "name": "AlreadyKnown",
          "doc": [
            "The tip was already found/started."
          ]
        },
        {
          "name": "UnknownTip",
          "doc": [
            "The tip hash is unknown."
          ]
        },
        {
          "name": "NotFinder",
          "doc": [
            "The account attempting to retract the tip is not the finder of the tip."
          ]
        },
        {
          "name": "StillOpen",
          "doc": [
            "The tip cannot be claimed/closed because there are not enough tippers yet."
          ]
        },
        {
          "name": "Premature",
          "doc": [
            "The tip cannot be claimed/closed because it's still in the countdown period."
          ]
        }
      ],
      "errors_value": {
        "type": 466
      },
      "index": 33
    },
    {
      "name": "Assets",
      "prefix": "Assets",
      "storage": [
        {
          "name": "Asset",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 467
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Account",
          "modifier": "Default",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "key2Hasher": "Blake2_128Concat",
              "value": 468
            }
          },
          "fallback": "0x00000000000000000000",
          "docs": null
        },
        {
          "name": "Approvals",
          "modifier": "Optional",
          "type": {
            "origin": "NMapType",
            "n_map_type_value": {
              "hashers": [
                "Blake2_128Concat",
                "Blake2_128Concat",
                "Blake2_128Concat"
              ],
              "key_vec": 469,
              "value": 470
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Metadata",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 471
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "2200",
          "name": "create",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "admin",
              "type": "MultiAddress"
            },
            {
              "name": "min_balance",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "2201",
          "name": "force_create",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            },
            {
              "name": "is_sufficient",
              "type": "Bool"
            },
            {
              "name": "min_balance",
              "type": "compact\u003cU64\u003e"
            }
          ]
        },
        {
          "lookup": "2202",
          "name": "destroy",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "witness",
              "type": "DestroyWitness"
            }
          ]
        },
        {
          "lookup": "2203",
          "name": "mint",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "beneficiary",
              "type": "MultiAddress"
            },
            {
              "name": "amount",
              "type": "compact\u003cU64\u003e"
            }
          ]
        },
        {
          "lookup": "2204",
          "name": "burn",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "who",
              "type": "MultiAddress"
            },
            {
              "name": "amount",
              "type": "compact\u003cU64\u003e"
            }
          ]
        },
        {
          "lookup": "2205",
          "name": "transfer",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "target",
              "type": "MultiAddress"
            },
            {
              "name": "amount",
              "type": "compact\u003cU64\u003e"
            }
          ]
        },
        {
          "lookup": "2206",
          "name": "transfer_keep_alive",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "target",
              "type": "MultiAddress"
            },
            {
              "name": "amount",
              "type": "compact\u003cU64\u003e"
            }
          ]
        },
        {
          "lookup": "2207",
          "name": "force_transfer",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "source",
              "type": "MultiAddress"
            },
            {
              "name": "dest",
              "type": "MultiAddress"
            },
            {
              "name": "amount",
              "type": "compact\u003cU64\u003e"
            }
          ]
        },
        {
          "lookup": "2208",
          "name": "freeze",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "who",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "2209",
          "name": "thaw",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "who",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "220a",
          "name": "freeze_asset",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "220b",
          "name": "thaw_asset",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "220c",
          "name": "transfer_ownership",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "220d",
          "name": "set_team",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "issuer",
              "type": "MultiAddress"
            },
            {
              "name": "admin",
              "type": "MultiAddress"
            },
            {
              "name": "freezer",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "220e",
          "name": "set_metadata",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "name",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "symbol",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "decimals",
              "type": "U8"
            }
          ]
        },
        {
          "lookup": "220f",
          "name": "clear_metadata",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2210",
          "name": "force_set_metadata",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "name",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "symbol",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "decimals",
              "type": "U8"
            },
            {
              "name": "is_frozen",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "2211",
          "name": "force_clear_metadata",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2212",
          "name": "force_asset_status",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            },
            {
              "name": "issuer",
              "type": "MultiAddress"
            },
            {
              "name": "admin",
              "type": "MultiAddress"
            },
            {
              "name": "freezer",
              "type": "MultiAddress"
            },
            {
              "name": "min_balance",
              "type": "compact\u003cU64\u003e"
            },
            {
              "name": "is_sufficient",
              "type": "Bool"
            },
            {
              "name": "is_frozen",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "2213",
          "name": "approve_transfer",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "delegate",
              "type": "MultiAddress"
            },
            {
              "name": "amount",
              "type": "compact\u003cU64\u003e"
            }
          ]
        },
        {
          "lookup": "2214",
          "name": "cancel_approval",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "delegate",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "2215",
          "name": "force_cancel_approval",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            },
            {
              "name": "delegate",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "2216",
          "name": "transfer_approved",
          "docs": null,
          "args": [
            {
              "name": "id",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            },
            {
              "name": "destination",
              "type": "MultiAddress"
            },
            {
              "name": "amount",
              "type": "compact\u003cU64\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 296
      },
      "events": [
        {
          "lookup": "2200",
          "name": "Created",
          "docs": [
            "Some asset class was created. \\[asset_id, creator, owner\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2201",
          "name": "Issued",
          "docs": [
            "Some assets were issued. \\[asset_id, owner, total_supply\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "U64"
          ]
        },
        {
          "lookup": "2202",
          "name": "Transferred",
          "docs": [
            "Some assets were transferred. \\[asset_id, from, to, amount\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "[U8; 32]",
            "U64"
          ]
        },
        {
          "lookup": "2203",
          "name": "Burned",
          "docs": [
            "Some assets were destroyed. \\[asset_id, owner, balance\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "U64"
          ]
        },
        {
          "lookup": "2204",
          "name": "TeamChanged",
          "docs": [
            "The management team changed \\[asset_id, issuer, admin, freezer\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2205",
          "name": "OwnerChanged",
          "docs": [
            "The owner changed \\[asset_id, owner\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2206",
          "name": "Frozen",
          "docs": [
            "Some account `who` was frozen. \\[asset_id, who\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2207",
          "name": "Thawed",
          "docs": [
            "Some account `who` was thawed. \\[asset_id, who\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2208",
          "name": "AssetFrozen",
          "docs": [
            "Some asset `asset_id` was frozen. \\[asset_id\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2209",
          "name": "AssetThawed",
          "docs": [
            "Some asset `asset_id` was thawed. \\[asset_id\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "220a",
          "name": "Destroyed",
          "docs": [
            "An asset class was destroyed."
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "220b",
          "name": "ForceCreated",
          "docs": [
            "Some asset class was force-created. \\[asset_id, owner\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "220c",
          "name": "MetadataSet",
          "docs": [
            "New metadata has been set for an asset. \\[asset_id, name, symbol, decimals, is_frozen\\]"
          ],
          "args": [
            "U32",
            "Vec\u003cU8\u003e",
            "Vec\u003cU8\u003e",
            "U8",
            "Bool"
          ]
        },
        {
          "lookup": "220d",
          "name": "MetadataCleared",
          "docs": [
            "Metadata has been cleared for an asset. \\[asset_id\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "220e",
          "name": "ApprovedTransfer",
          "docs": [
            "(Additional) funds have been approved for transfer to a destination account.",
            "\\[asset_id, source, delegate, amount\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "[U8; 32]",
            "U64"
          ]
        },
        {
          "lookup": "220f",
          "name": "ApprovalCancelled",
          "docs": [
            "An approval for account `delegate` was cancelled by `owner`.",
            "\\[id, owner, delegate\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2210",
          "name": "TransferredApproved",
          "docs": [
            "An `amount` was transferred in its entirety from `owner` to `destination` by",
            "the approved `delegate`.",
            "\\[id, owner, delegate, destination\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]",
            "U64"
          ]
        },
        {
          "lookup": "2211",
          "name": "AssetStatusChanged",
          "docs": [
            "An asset has had its attributes changed by the `Force` origin.",
            "\\[id\\]"
          ],
          "args": [
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 86
      },
      "constants": [
        {
          "name": "AssetDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "0000c16ff28623000000000000000000",
          "docs": null
        },
        {
          "name": "MetadataDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "0080c6a47e8d03000000000000000000",
          "docs": null
        },
        {
          "name": "MetadataDepositPerByte",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "ApprovalDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "StringLimit",
          "type": "",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "BalanceLow",
          "doc": [
            "Account balance must be greater than or equal to the transfer amount."
          ]
        },
        {
          "name": "BalanceZero",
          "doc": [
            "Balance should be non-zero."
          ]
        },
        {
          "name": "NoPermission",
          "doc": [
            "The signing account has no permission to do the operation."
          ]
        },
        {
          "name": "Unknown",
          "doc": [
            "The given asset ID is unknown."
          ]
        },
        {
          "name": "Frozen",
          "doc": [
            "The origin account is frozen."
          ]
        },
        {
          "name": "InUse",
          "doc": [
            "The asset ID is already taken."
          ]
        },
        {
          "name": "BadWitness",
          "doc": [
            "Invalid witness data given."
          ]
        },
        {
          "name": "MinBalanceZero",
          "doc": [
            "Minimum balance should be non-zero."
          ]
        },
        {
          "name": "NoProvider",
          "doc": [
            "No provider reference exists to allow a non-zero balance of a non-self-sufficient asset."
          ]
        },
        {
          "name": "BadMetadata",
          "doc": [
            "Invalid metadata given."
          ]
        },
        {
          "name": "Unapproved",
          "doc": [
            "No approval exists that would allow the transfer."
          ]
        },
        {
          "name": "WouldDie",
          "doc": [
            "The source account would not survive the transfer and it needs to stay alive."
          ]
        }
      ],
      "errors_value": {
        "type": 472
      },
      "index": 34
    },
    {
      "name": "Mmr",
      "prefix": "Mmr",
      "storage": [
        {
          "name": "RootHash",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 9
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "NumberOfLeaves",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": null
        },
        {
          "name": "Nodes",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 8,
              "hasher": "Identity",
              "value": 9
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 35
    },
    {
      "name": "Lottery",
      "prefix": "Lottery",
      "storage": [
        {
          "name": "LotteryIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Lottery",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 473
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Participants",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 0,
              "hasher": "Twox64Concat",
              "value": 474
            }
          },
          "fallback": "0x0000000000",
          "docs": null
        },
        {
          "name": "TicketsCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "Tickets",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Twox64Concat",
              "value": 0
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "CallIndices",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 475
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "2400",
          "name": "buy_ticket",
          "docs": null,
          "args": [
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "2401",
          "name": "set_calls",
          "docs": null,
          "args": [
            {
              "name": "calls",
              "type": "Vec\u003cCall\u003e"
            }
          ]
        },
        {
          "lookup": "2402",
          "name": "start_lottery",
          "docs": null,
          "args": [
            {
              "name": "price",
              "type": "U128"
            },
            {
              "name": "length",
              "type": "U32"
            },
            {
              "name": "delay",
              "type": "U32"
            },
            {
              "name": "repeat",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "2403",
          "name": "stop_repeat",
          "docs": null,
          "args": null
        }
      ],
      "calls_value": {
        "type": 298
      },
      "events": [
        {
          "lookup": "2400",
          "name": "LotteryStarted",
          "docs": [
            "A lottery has been started!"
          ],
          "args": null
        },
        {
          "lookup": "2401",
          "name": "CallsUpdated",
          "docs": [
            "A new set of calls have been set!"
          ],
          "args": null
        },
        {
          "lookup": "2402",
          "name": "Winner",
          "docs": [
            "A winner has been chosen!"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "2403",
          "name": "TicketBought",
          "docs": [
            "A ticket has been bought!"
          ],
          "args": [
            "[U8; 32]",
            "(U8,U8)"
          ]
        }
      ],
      "events_value": {
        "type": 87
      },
      "constants": [
        {
          "name": "PalletId",
          "type": "",
          "type_value": 397,
          "constants_value": "py/lotto",
          "docs": null
        },
        {
          "name": "MaxCalls",
          "type": "",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": null
        },
        {
          "name": "MaxGenerateRandom",
          "type": "",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "NotConfigured",
          "doc": [
            "A lottery has not been configured."
          ]
        },
        {
          "name": "InProgress",
          "doc": [
            "A lottery is already in progress."
          ]
        },
        {
          "name": "AlreadyEnded",
          "doc": [
            "A lottery has already ended."
          ]
        },
        {
          "name": "InvalidCall",
          "doc": [
            "The call is not valid for an open lottery."
          ]
        },
        {
          "name": "AlreadyParticipating",
          "doc": [
            "You are already participating in the lottery with this call."
          ]
        },
        {
          "name": "TooManyCalls",
          "doc": [
            "Too many calls for a single lottery."
          ]
        },
        {
          "name": "EncodingFailed",
          "doc": [
            "Failed to encode calls"
          ]
        }
      ],
      "errors_value": {
        "type": 476
      },
      "index": 36
    },
    {
      "name": "Gilt",
      "prefix": "Gilt",
      "storage": [
        {
          "name": "QueueTotals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 432
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Queues",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 477
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ActiveTotal",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 479
          },
          "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Active",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 480
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "2500",
          "name": "place_bid",
          "docs": null,
          "args": [
            {
              "name": "amount",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "duration",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "2501",
          "name": "retract_bid",
          "docs": null,
          "args": [
            {
              "name": "amount",
              "type": "compact\u003cU128\u003e"
            },
            {
              "name": "duration",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "2502",
          "name": "set_target",
          "docs": null,
          "args": [
            {
              "name": "target",
              "type": "compact\u003cU64\u003e"
            }
          ]
        },
        {
          "lookup": "2503",
          "name": "thaw",
          "docs": null,
          "args": [
            {
              "name": "index",
              "type": "compact\u003cU32\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 299
      },
      "events": [
        {
          "lookup": "2500",
          "name": "BidPlaced",
          "docs": [
            "A bid was successfully placed.",
            "\\[ who, amount, duration \\]"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "U32"
          ]
        },
        {
          "lookup": "2501",
          "name": "BidRetracted",
          "docs": [
            "A bid was successfully removed (before being accepted as a gilt).",
            "\\[ who, amount, duration \\]"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "U32"
          ]
        },
        {
          "lookup": "2502",
          "name": "GiltIssued",
          "docs": [
            "A bid was accepted as a gilt. The balance may not be released until expiry.",
            "\\[ index, expiry, who, amount \\]"
          ],
          "args": [
            "U32",
            "U32",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "2503",
          "name": "GiltThawed",
          "docs": [
            "An expired gilt has been thawed.",
            "\\[ index, who, original_amount, additional_amount \\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "U128",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 89
      },
      "constants": [
        {
          "name": "IgnoredIssuance",
          "type": "",
          "type_value": 6,
          "constants_value": "00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "QueueCount",
          "type": "",
          "type_value": 4,
          "constants_value": "2c010000",
          "docs": null
        },
        {
          "name": "MaxQueueLen",
          "type": "",
          "type_value": 4,
          "constants_value": "e8030000",
          "docs": null
        },
        {
          "name": "FifoQueueLen",
          "type": "",
          "type_value": 4,
          "constants_value": "f4010000",
          "docs": null
        },
        {
          "name": "Period",
          "type": "",
          "type_value": 4,
          "constants_value": "002f0d00",
          "docs": null
        },
        {
          "name": "MinFreeze",
          "type": "",
          "type_value": 6,
          "constants_value": "0000c16ff28623000000000000000000",
          "docs": null
        },
        {
          "name": "IntakePeriod",
          "type": "",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": null
        },
        {
          "name": "MaxIntakeBids",
          "type": "",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "DurationTooSmall",
          "doc": [
            "The duration of the bid is less than one."
          ]
        },
        {
          "name": "DurationTooBig",
          "doc": [
            "The duration is the bid is greater than the number of queues."
          ]
        },
        {
          "name": "AmountTooSmall",
          "doc": [
            "The amount of the bid is less than the minimum allowed."
          ]
        },
        {
          "name": "BidTooLow",
          "doc": [
            "The queue for the bid's duration is full and the amount bid is too low to get in through",
            "replacing an existing bid."
          ]
        },
        {
          "name": "Unknown",
          "doc": [
            "Gilt index is unknown."
          ]
        },
        {
          "name": "NotOwner",
          "doc": [
            "Not the owner of the gilt."
          ]
        },
        {
          "name": "NotExpired",
          "doc": [
            "Gilt not yet at expiry date."
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "The given bid for retraction is not found."
          ]
        }
      ],
      "errors_value": {
        "type": 481
      },
      "index": 37
    },
    {
      "name": "Uniques",
      "prefix": "Uniques",
      "storage": [
        {
          "name": "Class",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 482
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Account",
          "modifier": "Optional",
          "type": {
            "origin": "NMapType",
            "n_map_type_value": {
              "hashers": [
                "Blake2_128Concat",
                "Blake2_128Concat",
                "Blake2_128Concat"
              ],
              "key_vec": 483,
              "value": 42
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Asset",
          "modifier": "Optional",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "key2": 4,
              "hasher": "Blake2_128Concat",
              "key2Hasher": "Blake2_128Concat",
              "value": 484
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ClassMetadataOf",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 485
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "InstanceMetadataOf",
          "modifier": "Optional",
          "type": {
            "origin": "DoubleMapType",
            "double_map_type_value": {
              "key": 4,
              "key2": 4,
              "hasher": "Blake2_128Concat",
              "key2Hasher": "Blake2_128Concat",
              "value": 486
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Attribute",
          "modifier": "Optional",
          "type": {
            "origin": "NMapType",
            "n_map_type_value": {
              "hashers": [
                "Blake2_128Concat",
                "Blake2_128Concat",
                "Blake2_128Concat"
              ],
              "key_vec": 487,
              "value": 488
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "2600",
          "name": "create",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "admin",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "2601",
          "name": "force_create",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            },
            {
              "name": "free_holding",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "2602",
          "name": "destroy",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "witness",
              "type": "DestroyWitness"
            }
          ]
        },
        {
          "lookup": "2603",
          "name": "mint",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "2604",
          "name": "burn",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "check_owner",
              "type": "option\u003cMultiAddress\u003e"
            }
          ]
        },
        {
          "lookup": "2605",
          "name": "transfer",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "dest",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "2606",
          "name": "redeposit",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instances",
              "type": "Vec\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2607",
          "name": "freeze",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2608",
          "name": "thaw",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2609",
          "name": "freeze_class",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "260a",
          "name": "thaw_class",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "260b",
          "name": "transfer_ownership",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "260c",
          "name": "set_team",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "issuer",
              "type": "MultiAddress"
            },
            {
              "name": "admin",
              "type": "MultiAddress"
            },
            {
              "name": "freezer",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "260d",
          "name": "approve_transfer",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "delegate",
              "type": "MultiAddress"
            }
          ]
        },
        {
          "lookup": "260e",
          "name": "cancel_approval",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "maybe_check_delegate",
              "type": "option\u003cMultiAddress\u003e"
            }
          ]
        },
        {
          "lookup": "260f",
          "name": "force_asset_status",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "owner",
              "type": "MultiAddress"
            },
            {
              "name": "issuer",
              "type": "MultiAddress"
            },
            {
              "name": "admin",
              "type": "MultiAddress"
            },
            {
              "name": "freezer",
              "type": "MultiAddress"
            },
            {
              "name": "free_holding",
              "type": "Bool"
            },
            {
              "name": "is_frozen",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "2610",
          "name": "set_attribute",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "maybe_instance",
              "type": "option\u003cU32\u003e"
            },
            {
              "name": "key",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "value",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "2611",
          "name": "clear_attribute",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "maybe_instance",
              "type": "option\u003cU32\u003e"
            },
            {
              "name": "key",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "2612",
          "name": "set_metadata",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "data",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "is_frozen",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "2613",
          "name": "clear_metadata",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "instance",
              "type": "compact\u003cU32\u003e"
            }
          ]
        },
        {
          "lookup": "2614",
          "name": "set_class_metadata",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            },
            {
              "name": "data",
              "type": "Vec\u003cU8\u003e"
            },
            {
              "name": "is_frozen",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "2615",
          "name": "clear_class_metadata",
          "docs": null,
          "args": [
            {
              "name": "class",
              "type": "compact\u003cU32\u003e"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 302
      },
      "events": [
        {
          "lookup": "2600",
          "name": "Created",
          "docs": [
            "An asset class was created. \\[ class, creator, owner \\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2601",
          "name": "ForceCreated",
          "docs": [
            "An asset class was force-created. \\[ class, owner \\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2602",
          "name": "Destroyed",
          "docs": [
            "An asset `class` was destroyed. \\[ class \\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2603",
          "name": "Issued",
          "docs": [
            "An asset `instace` was issued. \\[ class, instance, owner \\]"
          ],
          "args": [
            "U32",
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2604",
          "name": "Transferred",
          "docs": [
            "An asset `instace` was transferred. \\[ class, instance, from, to \\]"
          ],
          "args": [
            "U32",
            "U32",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2605",
          "name": "Burned",
          "docs": [
            "An asset `instance` was destroyed. \\[ class, instance, owner \\]"
          ],
          "args": [
            "U32",
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2606",
          "name": "Frozen",
          "docs": [
            "Some asset `instance` was frozen. \\[ class, instance \\]"
          ],
          "args": [
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "2607",
          "name": "Thawed",
          "docs": [
            "Some asset `instance` was thawed. \\[ class, instance \\]"
          ],
          "args": [
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "2608",
          "name": "ClassFrozen",
          "docs": [
            "Some asset `class` was frozen. \\[ class \\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2609",
          "name": "ClassThawed",
          "docs": [
            "Some asset `class` was thawed. \\[ class \\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "260a",
          "name": "OwnerChanged",
          "docs": [
            "The owner changed \\[ class, new_owner \\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "260b",
          "name": "TeamChanged",
          "docs": [
            "The management team changed \\[ class, issuer, admin, freezer \\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "260c",
          "name": "ApprovedTransfer",
          "docs": [
            "An `instance` of an asset `class` has been approved by the `owner` for transfer by a",
            "`delegate`.",
            "\\[ class, instance, owner, delegate \\]"
          ],
          "args": [
            "U32",
            "U32",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "260d",
          "name": "ApprovalCancelled",
          "docs": [
            "An approval for a `delegate` account to transfer the `instance` of an asset `class` was",
            "cancelled by its `owner`.",
            "\\[ class, instance, owner, delegate \\]"
          ],
          "args": [
            "U32",
            "U32",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "260e",
          "name": "AssetStatusChanged",
          "docs": [
            "An asset `class` has had its attributes changed by the `Force` origin.",
            "\\[ class \\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "260f",
          "name": "ClassMetadataSet",
          "docs": [
            "New metadata has been set for an asset class. \\[ class, data, is_frozen \\]"
          ],
          "args": [
            "U32",
            "Vec\u003cU8\u003e",
            "Bool"
          ]
        },
        {
          "lookup": "2610",
          "name": "ClassMetadataCleared",
          "docs": [
            "Metadata has been cleared for an asset class. \\[ class \\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2611",
          "name": "MetadataSet",
          "docs": [
            "New metadata has been set for an asset instance.",
            "\\[ class, instance, data, is_frozen \\]"
          ],
          "args": [
            "U32",
            "U32",
            "Vec\u003cU8\u003e",
            "Bool"
          ]
        },
        {
          "lookup": "2612",
          "name": "MetadataCleared",
          "docs": [
            "Metadata has been cleared for an asset instance. \\[ class, instance \\]"
          ],
          "args": [
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "2613",
          "name": "Redeposited",
          "docs": [
            "Metadata has been cleared for an asset instance. \\[ class, successful_instances \\]"
          ],
          "args": [
            "U32",
            "Vec\u003cU32\u003e"
          ]
        },
        {
          "lookup": "2614",
          "name": "AttributeSet",
          "docs": [
            "New attribute metadata has been set for an asset class or instance.",
            "\\[ class, maybe_instance, key, value \\]"
          ],
          "args": [
            "U32",
            "option\u003cU32\u003e",
            "Vec\u003cU8\u003e",
            "Vec\u003cU8\u003e"
          ]
        },
        {
          "lookup": "2615",
          "name": "AttributeCleared",
          "docs": [
            "Attribute metadata has been cleared for an asset class or instance.",
            "\\[ class, maybe_instance, key, maybe_value \\]"
          ],
          "args": [
            "U32",
            "option\u003cU32\u003e",
            "Vec\u003cU8\u003e"
          ]
        }
      ],
      "events_value": {
        "type": 90
      },
      "constants": [
        {
          "name": "ClassDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "0000c16ff28623000000000000000000",
          "docs": null
        },
        {
          "name": "InstanceDeposit",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "MetadataDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "0080c6a47e8d03000000000000000000",
          "docs": null
        },
        {
          "name": "AttributeDepositBase",
          "type": "",
          "type_value": 6,
          "constants_value": "0080c6a47e8d03000000000000000000",
          "docs": null
        },
        {
          "name": "DepositPerByte",
          "type": "",
          "type_value": 6,
          "constants_value": "00407a10f35a00000000000000000000",
          "docs": null
        },
        {
          "name": "StringLimit",
          "type": "",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": null
        },
        {
          "name": "KeyLimit",
          "type": "",
          "type_value": 4,
          "constants_value": "20000000",
          "docs": null
        },
        {
          "name": "ValueLimit",
          "type": "",
          "type_value": 4,
          "constants_value": "00010000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "NoPermission",
          "doc": [
            "The signing account has no permission to do the operation."
          ]
        },
        {
          "name": "Unknown",
          "doc": [
            "The given asset ID is unknown."
          ]
        },
        {
          "name": "AlreadyExists",
          "doc": [
            "The asset instance ID has already been used for an asset."
          ]
        },
        {
          "name": "WrongOwner",
          "doc": [
            "The owner turned out to be different to what was expected."
          ]
        },
        {
          "name": "BadWitness",
          "doc": [
            "Invalid witness data given."
          ]
        },
        {
          "name": "InUse",
          "doc": [
            "The asset ID is already taken."
          ]
        },
        {
          "name": "Frozen",
          "doc": [
            "The asset instance or class is frozen."
          ]
        },
        {
          "name": "WrongDelegate",
          "doc": [
            "The delegate turned out to be different to what was expected."
          ]
        },
        {
          "name": "NoDelegate",
          "doc": [
            "There is no delegate approved."
          ]
        },
        {
          "name": "Unapproved",
          "doc": [
            "No approval exists that would allow the transfer."
          ]
        }
      ],
      "errors_value": {
        "type": 489
      },
      "index": 38
    },
    {
      "name": "TransactionStorage",
      "prefix": "TransactionStorage",
      "storage": [
        {
          "name": "Transactions",
          "modifier": "Optional",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 490
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ChunkCount",
          "modifier": "Default",
          "type": {
            "origin": "MapType",
            "map_type_value": {
              "key": 4,
              "hasher": "Blake2_128Concat",
              "value": 4
            }
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "ByteFee",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 6
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "EntryFee",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 6
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "MaxTransactionSize",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "MaxBlockTransactions",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "StoragePeriod",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": null
        },
        {
          "name": "BlockTransactions",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 490
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "ProofChecked",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "PlainTypeValue": 34
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "2700",
          "name": "store",
          "docs": null,
          "args": [
            {
              "name": "data",
              "type": "Vec\u003cU8\u003e"
            }
          ]
        },
        {
          "lookup": "2701",
          "name": "renew",
          "docs": null,
          "args": [
            {
              "name": "block",
              "type": "U32"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "2702",
          "name": "check_proof",
          "docs": null,
          "args": [
            {
              "name": "proof",
              "type": "TransactionStorageProof"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 305
      },
      "events": [
        {
          "lookup": "2700",
          "name": "Stored",
          "docs": [
            "Stored data under specified index."
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2701",
          "name": "Renewed",
          "docs": [
            "Renewed data under specified index."
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2702",
          "name": "ProofChecked",
          "docs": [
            "Storage proof was successfully checked."
          ],
          "args": null
        }
      ],
      "events_value": {
        "type": 96
      },
      "errors": [
        {
          "name": "InsufficientFunds",
          "doc": [
            "Insufficient account balance."
          ]
        },
        {
          "name": "NotConfigured",
          "doc": [
            "Invalid configuration."
          ]
        },
        {
          "name": "RenewedNotFound",
          "doc": [
            "Renewed extrinsic is not found."
          ]
        },
        {
          "name": "EmptyTransaction",
          "doc": [
            "Attempting to store empty transaction"
          ]
        },
        {
          "name": "UnexpectedProof",
          "doc": [
            "Proof was not expected in this block."
          ]
        },
        {
          "name": "InvalidProof",
          "doc": [
            "Proof failed verification."
          ]
        },
        {
          "name": "MissingProof",
          "doc": [
            "Missing storage proof."
          ]
        },
        {
          "name": "MissingStateData",
          "doc": [
            "Unable to verify proof becasue state data is missing."
          ]
        },
        {
          "name": "DoubleCheck",
          "doc": [
            "Double proof check in the block."
          ]
        },
        {
          "name": "ProofNotChecked",
          "doc": [
            "Storage proof was not checked in the block."
          ]
        },
        {
          "name": "TransactionTooLarge",
          "doc": [
            "Transaction is too large."
          ]
        },
        {
          "name": "TooManyTransactions",
          "doc": [
            "Too many transactions in the block."
          ]
        },
        {
          "name": "BadContext",
          "doc": [
            "Attempted to call `store` outside of block execution."
          ]
        }
      ],
      "errors_value": {
        "type": 492
      },
      "index": 39
    }
  ]
}