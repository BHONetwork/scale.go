{
  "version": "9111",
  "value": [
    {
      "name": "System",
      "prefix": "System",
      "storage": [
        {
          "name": "Account",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "frame_systemAccountInfo",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " The full account information for a particular account ID."
          ]
        },
        {
          "name": "ExtrinsicCount",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " Total extrinsics count for the current block."
          ]
        },
        {
          "name": "BlockWeight",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "frame_supportweightsPerDispatchClass",
            "PlainTypeValue": 7
          },
          "fallback": "0x000000000000000000000000000000000000000000000000",
          "docs": [
            " The current weight for the block."
          ]
        },
        {
          "name": "AllExtrinsicsLen",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " Total length (in bytes) for all extrinsics put together, for the current block."
          ]
        },
        {
          "name": "BlockHash",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "[U8; 32]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " Map of block numbers to block hashes."
          ]
        },
        {
          "name": "ExtrinsicData",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<U8>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Extrinsics data for the current block (maps an extrinsic's index to its data)."
          ]
        },
        {
          "name": "Number",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The current block number being processed. Set by `execute_block`."
          ]
        },
        {
          "name": "ParentHash",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 9
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " Hash of the previous block."
          ]
        },
        {
          "name": "Digest",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<sp_runtimegenericdigestDigestItem>",
            "PlainTypeValue": 11
          },
          "fallback": "0x00",
          "docs": [
            " Digest of the current block, also part of the block header."
          ]
        },
        {
          "name": "Events",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<frame_systemEventRecord>",
            "PlainTypeValue": 18
          },
          "fallback": "0x00",
          "docs": [
            " Events deposited for the current block.",
            "",
            " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
            " from within the runtime."
          ]
        },
        {
          "name": "EventCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The number of events in the `Events<T>` list."
          ]
        },
        {
          "name": "EventTopics",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Vec<TupleU32U32>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Mapping between a topic (represented by T::Hash) and a vector of indexes",
            " of events in the `<Events<T>>` list.",
            "",
            " All topic vectors have deterministic storage locations depending on the topic. This",
            " allows light-clients to leverage the changes trie storage tracking mechanism and",
            " in case of changes fetch the list of events of interest.",
            "",
            " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
            " the `EventIndex` then in case if the topic has the same contents on the next block",
            " no notification will be triggered thus the event might be lost."
          ]
        },
        {
          "name": "LastRuntimeUpgrade",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "frame_systemLastRuntimeUpgradeInfo",
            "PlainTypeValue": 145
          },
          "fallback": "0x00",
          "docs": [
            " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
          ]
        },
        {
          "name": "UpgradedToU32RefCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Bool",
            "PlainTypeValue": 55
          },
          "fallback": "0x00",
          "docs": [
            " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
          ]
        },
        {
          "name": "UpgradedToTripleRefCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Bool",
            "PlainTypeValue": 55
          },
          "fallback": "0x00",
          "docs": [
            " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
            " (default) if not."
          ]
        },
        {
          "name": "ExecutionPhase",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "frame_systemPhase",
            "PlainTypeValue": 142
          },
          "fallback": "0x00",
          "docs": [
            " The execution phase of the block."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0000",
          "name": "fill_block",
          "docs": [
            "A dispatch that will fill the block weight up to the given ratio."
          ],
          "args": [
            {
              "name": "ratio",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0001",
          "name": "remark",
          "docs": [
            "Make some on-chain remark.",
            "",
            "# <weight>",
            "- `O(1)`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "remark",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "0002",
          "name": "set_heap_pages",
          "docs": [
            "Set the number of pages in the WebAssembly environment's heap.",
            "",
            "# <weight>",
            "- `O(1)`",
            "- 1 storage write.",
            "2d2042617365205765696768743a20312e34303520c2b573",
            "- 1 write to HEAP_PAGES",
            "- 1 digest item",
            "# </weight>"
          ],
          "args": [
            {
              "name": "pages",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "0003",
          "name": "set_code",
          "docs": [
            "Set the new runtime code.",
            "",
            "# <weight>",
            "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
            "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
            "  expensive).",
            "- 1 storage write (codec `O(C)`).",
            "- 1 digest item.",
            "- 1 event.",
            "The weight of this function is dependent on the runtime, but generally this is very",
            "expensive. We will treat this as a full block.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "code",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "0004",
          "name": "set_code_without_checks",
          "docs": [
            "Set the new runtime code without doing any checks of the given `code`.",
            "",
            "# <weight>",
            "- `O(C)` where `C` length of `code`",
            "- 1 storage write (codec `O(C)`).",
            "- 1 digest item.",
            "- 1 event.",
            "The weight of this function is dependent on the runtime. We will treat this as a full",
            "block. # </weight>"
          ],
          "args": [
            {
              "name": "code",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "0005",
          "name": "set_changes_trie_config",
          "docs": [
            "Set the new changes trie configuration.",
            "",
            "# <weight>",
            "- `O(1)`",
            "- 1 storage write or delete (codec `O(1)`).",
            "- 1 call to `deposit_log`: Uses `append` API, so O(1)",
            "2d2042617365205765696768743a20372e32313820c2b573",
            "- DB Weight:",
            "    - Writes: Changes Trie, System Digest",
            "# </weight>"
          ],
          "args": [
            {
              "name": "changes_trie_config",
              "type": "option<sp_corechanges_trieChangesTrieConfiguration>"
            }
          ]
        },
        {
          "lookup": "0006",
          "name": "set_storage",
          "docs": [
            "Set some items of storage.",
            "",
            "# <weight>",
            "- `O(I)` where `I` length of `items`",
            "- `I` storage writes (`O(1)`).",
            "2d2042617365205765696768743a20302e353638202a206920c2b573",
            "- Writes: Number of items",
            "# </weight>"
          ],
          "args": [
            {
              "name": "items",
              "type": "Vec<TupleVec<U8>Vec<U8>>"
            }
          ]
        },
        {
          "lookup": "0007",
          "name": "kill_storage",
          "docs": [
            "Kill some items from storage.",
            "",
            "# <weight>",
            "- `O(IK)` where `I` length of `keys` and `K` length of one key",
            "- `I` storage deletions.",
            "2d2042617365205765696768743a202e333738202a206920c2b573",
            "- Writes: Number of items",
            "# </weight>"
          ],
          "args": [
            {
              "name": "keys",
              "type": "Vec<Vec<U8>>"
            }
          ]
        },
        {
          "lookup": "0008",
          "name": "kill_prefix",
          "docs": [
            "Kill all storage items with a key that starts with the given prefix.",
            "",
            "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
            "the prefix we are removing to accurately calculate the weight of this function.",
            "",
            "# <weight>",
            "- `O(P)` where `P` amount of keys with prefix `prefix`",
            "- `P` storage deletions.",
            "2d2042617365205765696768743a20302e383334202a205020c2b573",
            "- Writes: Number of subkeys + 1",
            "# </weight>"
          ],
          "args": [
            {
              "name": "prefix",
              "type": "Vec<U8>"
            },
            {
              "name": "subkeys",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0009",
          "name": "remark_with_event",
          "docs": [
            "Make some on-chain remark and emit event.",
            "",
            "# <weight>",
            "- `O(b)` where b is the length of the remark.",
            "- 1 event.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "remark",
              "type": "Vec<U8>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 147
      },
      "events": [
        {
          "lookup": "0000",
          "name": "ExtrinsicSuccess",
          "docs": [
            "An extrinsic completed successfully. \\[info\\]"
          ],
          "args": [
            "frame_supportweightsDispatchInfo"
          ]
        },
        {
          "lookup": "0001",
          "name": "ExtrinsicFailed",
          "docs": [
            "An extrinsic failed. \\[error, info\\]"
          ],
          "args": [
            "sp_runtimeDispatchError",
            "frame_supportweightsDispatchInfo"
          ]
        },
        {
          "lookup": "0002",
          "name": "CodeUpdated",
          "docs": [
            "`:code` was updated."
          ],
          "args": null
        },
        {
          "lookup": "0003",
          "name": "NewAccount",
          "docs": [
            "A new \\[account\\] was created."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0004",
          "name": "KilledAccount",
          "docs": [
            "An \\[account\\] was reaped."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0005",
          "name": "Remarked",
          "docs": [
            "On on-chain remark happened. \\[origin, remark_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 21
      },
      "constants": [
        {
          "name": "BlockWeights",
          "type": "frame_systemlimitsBlockWeights",
          "type_value": 152,
          "constants_value": "00f2052a0100000000204aa9d1010000405973070000000001c0766c8f58010000010098f73e5d010000010000000000000000405973070000000001c0febef9cc0100000100204aa9d1010000010088526a740000004059730700000000000000",
          "docs": [
            " Block & extrinsics weights: base values and limits."
          ]
        },
        {
          "name": "BlockLength",
          "type": "frame_supportweightsPerDispatchClass",
          "type_value": 156,
          "constants_value": "00003c000000500000005000",
          "docs": [
            " The maximum length of a block (in bytes)."
          ]
        },
        {
          "name": "BlockHashCount",
          "type": "U32",
          "type_value": 4,
          "constants_value": "60090000",
          "docs": [
            " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
          ]
        },
        {
          "name": "DbWeight",
          "type": "frame_supportweightsRuntimeDbWeight",
          "type_value": 158,
          "constants_value": "40787d010000000000e1f50500000000",
          "docs": [
            " The weight of runtime database operations the runtime can invoke."
          ]
        },
        {
          "name": "Version",
          "type": "sp_versionRuntimeVersion",
          "type_value": 159,
          "constants_value": "186b7573616d61347061726974792d6b7573616d6102000000972300000000000038df6acb689907609b0300000037e397fc7c91f5e40100000040fe3ad401f8959a05000000d2bc9897eed08f1503000000f78b278be53f454c02000000af2c0297a23e6d3d0100000049eaaf1b548a0cb00100000091d5df18b0d2cf5801000000ed99c5acb25eedf503000000cbca25e39f14238702000000687ad44ad37f03c201000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a80100000007000000",
          "docs": [
            " Get the chain's current version."
          ]
        },
        {
          "name": "SS58Prefix",
          "type": "U16",
          "type_value": 75,
          "constants_value": "0200",
          "docs": [
            " The designated SS85 prefix of this chain.",
            "",
            " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
            " that the runtime should know about the prefix in order to make use of it as",
            " an identifier of the chain."
          ]
        }
      ],
      "errors": [
        {
          "name": "InvalidSpecName",
          "doc": [
            "The name of specification does not match between the current runtime",
            "and the new runtime."
          ]
        },
        {
          "name": "SpecVersionNeedsToIncrease",
          "doc": [
            "The specification version is not allowed to decrease between the current runtime",
            "and the new runtime."
          ]
        },
        {
          "name": "FailedToExtractRuntimeVersion",
          "doc": [
            "Failed to extract the runtime version from the new runtime.",
            "",
            "Either calling `Core_version` or decoding `RuntimeVersion` failed."
          ]
        },
        {
          "name": "NonDefaultComposite",
          "doc": [
            "Suicide called when the account has non-default composite data."
          ]
        },
        {
          "name": "NonZeroRefCount",
          "doc": [
            "There is a non-zero reference count preventing the account from being purged."
          ]
        }
      ],
      "errors_value": {
        "type": 163
      },
      "index": 0
    },
    {
      "name": "Babe",
      "prefix": "Babe",
      "storage": [
        {
          "name": "EpochIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U64",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " Current epoch index."
          ]
        },
        {
          "name": "Authorities",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<Tuple[U8; 32]U64>",
            "PlainTypeValue": 164
          },
          "fallback": "0x00",
          "docs": [
            " Current epoch authorities."
          ]
        },
        {
          "name": "GenesisSlot",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U64",
            "PlainTypeValue": 168
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " The slot at which the first epoch actually started. This is 0",
            " until the first block of the chain."
          ]
        },
        {
          "name": "CurrentSlot",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U64",
            "PlainTypeValue": 168
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " Current slot number."
          ]
        },
        {
          "name": "Randomness",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 1
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " The epoch randomness for the *current* epoch.",
            "",
            " # Security",
            "",
            " This MUST NOT be used for gambling, as it can be influenced by a",
            " malicious validator in the short term. It MAY be used in many",
            " cryptographic protocols, however, so long as one remembers that this",
            " (like everything else on-chain) it is public. For example, it can be",
            " used where a number is needed that cannot have been chosen by an",
            " adversary, for purposes such as public-coin zero-knowledge proofs."
          ]
        },
        {
          "name": "PendingEpochConfigChange",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "sp_consensus_babedigestsNextConfigDescriptor",
            "PlainTypeValue": 169
          },
          "fallback": "0x00",
          "docs": [
            " Pending epoch configuration change that will be applied when the next epoch is enacted."
          ]
        },
        {
          "name": "NextRandomness",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 1
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " Next epoch randomness."
          ]
        },
        {
          "name": "NextAuthorities",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<Tuple[U8; 32]U64>",
            "PlainTypeValue": 164
          },
          "fallback": "0x00",
          "docs": [
            " Next epoch authorities."
          ]
        },
        {
          "name": "SegmentIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Randomness under construction.",
            "",
            " We make a tradeoff between storage accesses and list length.",
            " We store the under-construction randomness in segments of up to",
            " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
            "",
            " Once a segment reaches this length, we begin the next one.",
            " We reset all segments and return to `0` at the beginning of every",
            " epoch."
          ]
        },
        {
          "name": "UnderConstruction",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<[U8; 32]>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
          ]
        },
        {
          "name": "Initialized",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "option<[U8; 32]>",
            "PlainTypeValue": 174
          },
          "fallback": "0x00",
          "docs": [
            " Temporary value (cleared at block finalization) which is `Some`",
            " if per-block initialization has already been called for current block."
          ]
        },
        {
          "name": "AuthorVrfRandomness",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "option<[U8; 32]>",
            "PlainTypeValue": 174
          },
          "fallback": "0x00",
          "docs": [
            " This field should always be populated during block processing unless",
            " secondary plain slots are enabled (which don't contain a VRF output).",
            "",
            " It is set in `on_initialize`, before it will contain the value from the last block."
          ]
        },
        {
          "name": "EpochStart",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "TupleU32U32",
            "PlainTypeValue": 71
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " The block numbers when the last and current epoch have started, respectively `N-1` and",
            " `N`.",
            " NOTE: We track this is in order to annotate the block number when a given pool of",
            " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
            " slots, which may be skipped, the block numbers may not line up with the slot numbers."
          ]
        },
        {
          "name": "Lateness",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " How late the current block is compared to its parent.",
            "",
            " This entry is populated as part of block execution and is cleaned up",
            " on block finalization. Querying this storage entry outside of block",
            " execution context should always yield zero."
          ]
        },
        {
          "name": "EpochConfig",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "sp_consensus_babeBabeEpochConfiguration",
            "PlainTypeValue": 175
          },
          "fallback": "0x00",
          "docs": [
            " The configuration for the current epoch. Should never be `None` as it is initialized in",
            " genesis."
          ]
        },
        {
          "name": "NextEpochConfig",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "sp_consensus_babeBabeEpochConfiguration",
            "PlainTypeValue": 175
          },
          "fallback": "0x00",
          "docs": [
            " The configuration for the next epoch, `None` if the config will not change",
            " (you can fallback to `EpochConfig` instead in that case)."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0100",
          "name": "report_equivocation",
          "docs": [
            "Report authority equivocation/misbehavior. This method will verify",
            "the equivocation proof and validate the given key ownership proof",
            "against the extracted offender. If both are valid, the offence will",
            "be reported."
          ],
          "args": [
            {
              "name": "equivocation_proof",
              "type": "sp_consensus_slotsEquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "type": "sp_sessionMembershipProof"
            }
          ]
        },
        {
          "lookup": "0101",
          "name": "report_equivocation_unsigned",
          "docs": [
            "Report authority equivocation/misbehavior. This method will verify",
            "the equivocation proof and validate the given key ownership proof",
            "against the extracted offender. If both are valid, the offence will",
            "be reported.",
            "This extrinsic must be called unsigned and it is expected that only",
            "block authors will call it (validated in `ValidateUnsigned`), as such",
            "if the block author is defined it will be defined as the equivocation",
            "reporter."
          ],
          "args": [
            {
              "name": "equivocation_proof",
              "type": "sp_consensus_slotsEquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "type": "sp_sessionMembershipProof"
            }
          ]
        },
        {
          "lookup": "0102",
          "name": "plan_config_change",
          "docs": [
            "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
            "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
            "Multiple calls to this method will replace any existing planned config change that had",
            "not been enacted yet."
          ],
          "args": [
            {
              "name": "config",
              "type": "sp_consensus_babedigestsNextConfigDescriptor"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 176
      },
      "constants": [
        {
          "name": "EpochDuration",
          "type": "U64",
          "type_value": 8,
          "constants_value": "5802000000000000",
          "docs": [
            " The amount of time, in slots, that each epoch should last.",
            " NOTE: Currently it is not possible to change the epoch duration after",
            " the chain has started. Attempting to do so will brick block production."
          ]
        },
        {
          "name": "ExpectedBlockTime",
          "type": "U64",
          "type_value": 8,
          "constants_value": "7017000000000000",
          "docs": [
            " The expected average block time at which BABE should be creating",
            " blocks. Since BABE is probabilistic it is not trivial to figure out",
            " what the expected average block time should be based on the slot",
            " duration and the security parameter `c` (where `1 - c` represents",
            " the probability of a slot being empty)."
          ]
        },
        {
          "name": "MaxAuthorities",
          "type": "U32",
          "type_value": 4,
          "constants_value": "a0860100",
          "docs": [
            " Max number of authorities allowed"
          ]
        }
      ],
      "errors": [
        {
          "name": "InvalidEquivocationProof",
          "doc": [
            "An equivocation proof provided as part of an equivocation report is invalid."
          ]
        },
        {
          "name": "InvalidKeyOwnershipProof",
          "doc": [
            "A key ownership proof provided as part of an equivocation report is invalid."
          ]
        },
        {
          "name": "DuplicateOffenceReport",
          "doc": [
            "A given equivocation report is valid but already previously reported."
          ]
        }
      ],
      "errors_value": {
        "type": 181
      },
      "index": 1
    },
    {
      "name": "Timestamp",
      "prefix": "Timestamp",
      "storage": [
        {
          "name": "Now",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U64",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " Current time for the current block."
          ]
        },
        {
          "name": "DidUpdate",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Bool",
            "PlainTypeValue": 55
          },
          "fallback": "0x00",
          "docs": [
            " Did the timestamp get updated in this block?"
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0200",
          "name": "set",
          "docs": [
            "Set the current time.",
            "",
            "This call should be invoked exactly once per block. It will panic at the finalization",
            "phase, if this call hasn't been invoked by that time.",
            "",
            "The timestamp should be greater than the previous one by the amount specified by",
            "`MinimumPeriod`.",
            "",
            "The dispatch origin for this call must be `Inherent`.",
            "",
            "# <weight>",
            "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
            "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
            "  `on_finalize`)",
            "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "now",
              "type": "compact<U64>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 182
      },
      "constants": [
        {
          "name": "MinimumPeriod",
          "type": "U64",
          "type_value": 8,
          "constants_value": "b80b000000000000",
          "docs": [
            " The minimum period between blocks. Beware that this is different to the *expected*",
            " period that the block production apparatus provides. Your chosen consensus system will",
            " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
            " double this period on default settings."
          ]
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 2
    },
    {
      "name": "Indices",
      "prefix": "Indices",
      "storage": [
        {
          "name": "Accounts",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Tuple[U8; 32]U128Bool",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The lookup from index to account."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0300",
          "name": "claim",
          "docs": [
            "Assign an previously unassigned index.",
            "",
            "Payment: `Deposit` is reserved from the sender account.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `index`: the index to be claimed. This must not be in use.",
            "",
            "Emits `IndexAssigned` if successful.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- One storage mutation (codec `O(1)`).",
            "- One reserve operation.",
            "- One event.",
            "-------------------",
            "- DB Weight: 1 Read/Write (Accounts)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0301",
          "name": "transfer",
          "docs": [
            "Assign an index already owned by the sender to another account. The balance reservation",
            "is effectively transferred to the new account.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `index`: the index to be re-assigned. This must be owned by the sender.",
            "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
            "",
            "Emits `IndexAssigned` if successful.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- One storage mutation (codec `O(1)`).",
            "- One transfer operation.",
            "- One event.",
            "-------------------",
            "- DB Weight:",
            "   - Reads: Indices Accounts, System Account (recipient)",
            "   - Writes: Indices Accounts, System Account (recipient)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "new",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0302",
          "name": "free",
          "docs": [
            "Free up an index owned by the sender.",
            "",
            "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
            "",
            "- `index`: the index to be freed. This must be owned by the sender.",
            "",
            "Emits `IndexFreed` if successful.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- One storage mutation (codec `O(1)`).",
            "- One reserve operation.",
            "- One event.",
            "-------------------",
            "- DB Weight: 1 Read/Write (Accounts)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0303",
          "name": "force_transfer",
          "docs": [
            "Force an index to an account. This doesn't require a deposit. If the index is already",
            "held, then any deposit is reimbursed to its current owner.",
            "",
            "The dispatch origin for this call must be _Root_.",
            "",
            "- `index`: the index to be (re-)assigned.",
            "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
            "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
            "",
            "Emits `IndexAssigned` if successful.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- One storage mutation (codec `O(1)`).",
            "- Up to one reserve operation.",
            "- One event.",
            "-------------------",
            "- DB Weight:",
            "   - Reads: Indices Accounts, System Account (original owner)",
            "   - Writes: Indices Accounts, System Account (original owner)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "new",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "U32"
            },
            {
              "name": "freeze",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "0304",
          "name": "freeze",
          "docs": [
            "Freeze an index so it will always point to the sender account. This consumes the",
            "deposit.",
            "",
            "The dispatch origin for this call must be _Signed_ and the signing account must have a",
            "non-frozen account `index`.",
            "",
            "- `index`: the index to be frozen in place.",
            "",
            "Emits `IndexFrozen` if successful.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- One storage mutation (codec `O(1)`).",
            "- Up to one slash operation.",
            "- One event.",
            "-------------------",
            "- DB Weight: 1 Read/Write (Accounts)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 184
      },
      "events": [
        {
          "lookup": "0300",
          "name": "IndexAssigned",
          "docs": [
            "A account index was assigned. \\[index, who\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0301",
          "name": "IndexFreed",
          "docs": [
            "A account index has been freed up (unassigned). \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0302",
          "name": "IndexFrozen",
          "docs": [
            "A account index has been frozen to its current account ID. \\[index, who\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 28
      },
      "constants": [
        {
          "name": "Deposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "34a1aec6000000000000000000000000",
          "docs": [
            " The deposit needed for reserving an index."
          ]
        }
      ],
      "errors": [
        {
          "name": "NotAssigned",
          "doc": [
            "The index was not already assigned."
          ]
        },
        {
          "name": "NotOwner",
          "doc": [
            "The index is assigned to another account."
          ]
        },
        {
          "name": "InUse",
          "doc": [
            "The index was not available."
          ]
        },
        {
          "name": "NotTransfer",
          "doc": [
            "The source and destination accounts are identical."
          ]
        },
        {
          "name": "Permanent",
          "doc": [
            "The index is permanent and may not be freed/changed."
          ]
        }
      ],
      "errors_value": {
        "type": 185
      },
      "index": 3
    },
    {
      "name": "Balances",
      "prefix": "Balances",
      "storage": [
        {
          "name": "TotalIssuance",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U128",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": [
            " The total units issued in the system."
          ]
        },
        {
          "name": "Account",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_balancesAccountData",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " The balance of an account.",
            "",
            " NOTE: This is only used in the case that this pallet is used to store balances."
          ]
        },
        {
          "name": "Locks",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Vec<pallet_balancesBalanceLock>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Any liquidity locks on some account balances.",
            " NOTE: Should only be accessed when setting, changing and freeing a lock."
          ]
        },
        {
          "name": "Reserves",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Vec<pallet_balancesReserveData>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Named reserves on some account balances."
          ]
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_balancesReleases",
            "PlainTypeValue": 193
          },
          "fallback": "0x00",
          "docs": [
            " Storage version of the pallet.",
            "",
            " This is set to v2.0.0 for new networks."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0400",
          "name": "transfer",
          "docs": [
            "Transfer some liquid free balance to another account.",
            "",
            "`transfer` will set the `FreeBalance` of the sender and receiver.",
            "It will decrease the total issuance of the system by the `TransferFee`.",
            "If the sender's account is below the existential deposit as a result",
            "of the transfer, the account will be reaped.",
            "",
            "The dispatch origin for this call must be `Signed` by the transactor.",
            "",
            "# <weight>",
            "- Dependent on arguments but not critical, given proper implementations for input config",
            "  types. See related functions below.",
            "- It contains a limited number of reads and writes internally and no complex",
            "  computation.",
            "",
            "Related functions:",
            "",
            "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
            "  - Transferring balances to accounts that did not exist before will cause",
            "    `T::OnNewAccount::on_new_account` to be called.",
            "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
            "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
            "    that the transfer will not kill the origin account.",
            "---------------------------------",
            "2d2042617365205765696768743a2037332e363420c2b5732c20776f7273742063617365207363656e6172696f20286163636f756e7420637265617465642c206163636f756e742072656d6f76656429",
            "- DB Weight: 1 Read and 1 Write to destination account",
            "- Origin account is already in memory, so no DB operations for them.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "dest",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "0401",
          "name": "set_balance",
          "docs": [
            "Set the balances of a given account.",
            "",
            "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
            "also decrease the total issuance of the system (`TotalIssuance`).",
            "If the new free or reserved balance is below the existential deposit,",
            "it will reset the account nonce (`frame_system::AccountNonce`).",
            "",
            "The dispatch origin for this call is `root`.",
            "",
            "# <weight>",
            "- Independent of the arguments.",
            "- Contains a limited number of reads and writes.",
            "---------------------",
            "- Base Weight:",
            "202020202d204372656174696e673a2032372e353620c2b573",
            "202020202d204b696c6c696e673a2033352e313120c2b573",
            "- DB Weight: 1 Read, 1 Write to `who`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "who",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "new_free",
              "type": "compact<U128>"
            },
            {
              "name": "new_reserved",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "0402",
          "name": "force_transfer",
          "docs": [
            "Exactly as `transfer`, except the origin must be root and the source account may be",
            "specified.",
            "# <weight>",
            "- Same as transfer, but additional read and write because the source account is not",
            "  assumed to be in the overlay.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "source",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "dest",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "0403",
          "name": "transfer_keep_alive",
          "docs": [
            "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
            "origin account.",
            "",
            "99% of the time you want [`transfer`] instead.",
            "",
            "[`transfer`]: struct.Pallet.html#method.transfer",
            "# <weight>",
            "- Cheaper than transfer because account cannot be killed.",
            "2d2042617365205765696768743a2035312e3420c2b573",
            "- DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
            "#</weight>"
          ],
          "args": [
            {
              "name": "dest",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "0404",
          "name": "transfer_all",
          "docs": [
            "Transfer the entire transferable balance from the caller account.",
            "",
            "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
            "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
            "transferred by this function. To ensure that this function results in a killed account,",
            "you might need to prepare the account by removing any reference counters, storage",
            "deposits, etc...",
            "",
            "The dispatch origin of this call must be Signed.",
            "",
            "- `dest`: The recipient of the transfer.",
            "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
            "  of the funds the account has, causing the sender account to be killed (false), or",
            "  transfer everything except at least the existential deposit, which will guarantee to",
            "  keep the sender account alive (true). # <weight>",
            "- O(1). Just like transfer, but reading the user's transferable balance first.",
            "  #</weight>"
          ],
          "args": [
            {
              "name": "dest",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "keep_alive",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "0405",
          "name": "force_unreserve",
          "docs": [
            "Unreserve some balance from a user by force.",
            "",
            "Can only be called by ROOT."
          ],
          "args": [
            {
              "name": "who",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "amount",
              "type": "U128"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 194
      },
      "events": [
        {
          "lookup": "0400",
          "name": "Endowed",
          "docs": [
            "An account was created with some free balance. \\[account, free_balance\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0401",
          "name": "DustLost",
          "docs": [
            "An account was removed whose balance was non-zero but below ExistentialDeposit,",
            "resulting in an outright loss. \\[account, balance\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0402",
          "name": "Transfer",
          "docs": [
            "Transfer succeeded. \\[from, to, value\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0403",
          "name": "BalanceSet",
          "docs": [
            "A balance was set by root. \\[who, free, reserved\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "U128"
          ]
        },
        {
          "lookup": "0404",
          "name": "Deposit",
          "docs": [
            "Some amount was deposited (e.g. for transaction fees). \\[who, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0405",
          "name": "Reserved",
          "docs": [
            "Some balance was reserved (moved from free to reserved). \\[who, value\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0406",
          "name": "Unreserved",
          "docs": [
            "Some balance was unreserved (moved from reserved to free). \\[who, value\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0407",
          "name": "ReserveRepatriated",
          "docs": [
            "Some balance was moved from the reserve of the first account to the second account.",
            "Final argument indicates the destination balance type.",
            "\\[from, to, balance, destination_status\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128",
            "frame_supporttraitstokensmiscBalanceStatus"
          ]
        }
      ],
      "events_value": {
        "type": 29
      },
      "constants": [
        {
          "name": "ExistentialDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "55a0fc01000000000000000000000000",
          "docs": [
            " The minimum amount required to keep an account open."
          ]
        },
        {
          "name": "MaxLocks",
          "type": "U32",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": [
            " The maximum number of locks that should exist on an account.",
            " Not strictly enforced, but used for weight estimation."
          ]
        },
        {
          "name": "MaxReserves",
          "type": "U32",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": [
            " The maximum number of named reserves that can exist on an account."
          ]
        }
      ],
      "errors": [
        {
          "name": "VestingBalance",
          "doc": [
            "Vesting balance too high to send value"
          ]
        },
        {
          "name": "LiquidityRestrictions",
          "doc": [
            "Account liquidity restrictions prevent withdrawal"
          ]
        },
        {
          "name": "InsufficientBalance",
          "doc": [
            "Balance too low to send value"
          ]
        },
        {
          "name": "ExistentialDeposit",
          "doc": [
            "Value too low to create account due to existential deposit"
          ]
        },
        {
          "name": "KeepAlive",
          "doc": [
            "Transfer/payment would kill account"
          ]
        },
        {
          "name": "ExistingVestingSchedule",
          "doc": [
            "A vesting schedule already exists for this account"
          ]
        },
        {
          "name": "DeadAccount",
          "doc": [
            "Beneficiary account must pre-exist"
          ]
        },
        {
          "name": "TooManyReserves",
          "doc": [
            "Number of named reserves exceed MaxReserves"
          ]
        }
      ],
      "errors_value": {
        "type": 197
      },
      "index": 4
    },
    {
      "name": "TransactionPayment",
      "prefix": "TransactionPayment",
      "storage": [
        {
          "name": "NextFeeMultiplier",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U128",
            "PlainTypeValue": 198
          },
          "fallback": "0x000064a7b3b6e00d0000000000000000",
          "docs": null
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_transaction_paymentReleases",
            "PlainTypeValue": 199
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "constants": [
        {
          "name": "TransactionByteFee",
          "type": "U128",
          "type_value": 6,
          "constants_value": "12160500000000000000000000000000",
          "docs": [
            " The fee to be paid for making a transaction; the per-byte portion."
          ]
        },
        {
          "name": "OperationalFeeMultiplier",
          "type": "U8",
          "type_value": 2,
          "constants_value": "05",
          "docs": [
            " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
            " `priority`",
            "",
            " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
            " added to a tip component in regular `priority` calculations.",
            " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
            " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
            "",
            " ```rust,ignore",
            " // For `Normal`",
            " let priority = priority_calc(tip);",
            "",
            " // For `Operational`",
            " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
            " let priority = priority_calc(tip + virtual_tip);",
            " ```",
            "",
            " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
            " sent with the transaction. So, not only does the transaction get a priority bump based",
            " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
            " transactions."
          ]
        },
        {
          "name": "WeightToFee",
          "type": "Vec<frame_supportweightsWeightToFeeCoefficient>",
          "type_value": 200,
          "constants_value": "0400000000000000000000000000000000a9e696010001",
          "docs": [
            " The polynomial that is applied in order to derive fee from weight."
          ]
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 33
    },
    {
      "name": "Authorship",
      "prefix": "Authorship",
      "storage": [
        {
          "name": "Uncles",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<pallet_authorshipUncleEntryItem>",
            "PlainTypeValue": 202
          },
          "fallback": "0x00",
          "docs": [
            " Uncles"
          ]
        },
        {
          "name": "Author",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": [
            " Author of current block."
          ]
        },
        {
          "name": "DidSetUncles",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Bool",
            "PlainTypeValue": 55
          },
          "fallback": "0x00",
          "docs": [
            " Whether uncles were already set in this block."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0500",
          "name": "set_uncles",
          "docs": [
            "Provide a set of uncles."
          ],
          "args": [
            {
              "name": "new_uncles",
              "type": "Vec<sp_runtimegenericheaderHeader>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 205
      },
      "constants": [
        {
          "name": "UncleGenerations",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00000000",
          "docs": [
            " The number of blocks back we should accept uncles.",
            " This means that we will deal with uncle-parents that are",
            " `UncleGenerations + 1` before `now`."
          ]
        }
      ],
      "errors": [
        {
          "name": "InvalidUncleParent",
          "doc": [
            "The uncle parent not in the chain."
          ]
        },
        {
          "name": "UnclesAlreadySet",
          "doc": [
            "Uncles already set in the block."
          ]
        },
        {
          "name": "TooManyUncles",
          "doc": [
            "Too many uncles."
          ]
        },
        {
          "name": "GenesisUncle",
          "doc": [
            "The uncle is genesis."
          ]
        },
        {
          "name": "TooHighUncle",
          "doc": [
            "The uncle is too high in chain."
          ]
        },
        {
          "name": "UncleAlreadyIncluded",
          "doc": [
            "The uncle is already included."
          ]
        },
        {
          "name": "OldUncle",
          "doc": [
            "The uncle isn't recent enough to be included."
          ]
        }
      ],
      "errors_value": {
        "type": 207
      },
      "index": 5
    },
    {
      "name": "Staking",
      "prefix": "Staking",
      "storage": [
        {
          "name": "HistoryDepth",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x54000000",
          "docs": [
            " Number of eras to keep in history.",
            "",
            " Information is kept for eras in `[current_era - history_depth; current_era]`.",
            "",
            " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
            " always be in history. I.e. `active_era > current_era - history_depth` must be",
            " guaranteed."
          ]
        },
        {
          "name": "ValidatorCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The ideal number of staking participants."
          ]
        },
        {
          "name": "MinimumValidatorCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Minimum number of staking participants before emergency conditions are imposed."
          ]
        },
        {
          "name": "Invulnerables",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 50
          },
          "fallback": "0x00",
          "docs": [
            " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
            " easy to initialize and the performance hit is minimal (we expect no more than four",
            " invulnerables) and restricted to testnets."
          ]
        },
        {
          "name": "Bonded",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "[U8; 32]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Map from all locked \"stash\" accounts to the controller account."
          ]
        },
        {
          "name": "MinNominatorBond",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U128",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": [
            " The minimum active bond to become and maintain the role of a nominator."
          ]
        },
        {
          "name": "MinValidatorBond",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U128",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": [
            " The minimum active bond to become and maintain the role of a validator."
          ]
        },
        {
          "name": "Ledger",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_stakingStakingLedger",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
          ]
        },
        {
          "name": "Payee",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_stakingRewardDestination",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Where the reward payment should be made. Keyed by stash."
          ]
        },
        {
          "name": "Validators",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_stakingValidatorPrefs",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000",
          "docs": [
            " The map from (wannabe) validator stash key to the preferences of that validator.",
            "",
            " When updating this storage item, you must also update the `CounterForValidators`."
          ]
        },
        {
          "name": "CounterForValidators",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " A tracker to keep count of the number of items in the `Validators` map."
          ]
        },
        {
          "name": "MaxValidatorsCount",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " The maximum validator count before we stop allowing new validators to join.",
            "",
            " When this value is not set, no limits are enforced."
          ]
        },
        {
          "name": "Nominators",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_stakingNominations",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The map from nominator stash key to the set of stash keys of all validators to nominate.",
            "",
            " When updating this storage item, you must also update the `CounterForNominators`."
          ]
        },
        {
          "name": "CounterForNominators",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " A tracker to keep count of the number of items in the `Nominators` map."
          ]
        },
        {
          "name": "MaxNominatorsCount",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " The maximum nominator count before we stop allowing new validators to join.",
            "",
            " When this value is not set, no limits are enforced."
          ]
        },
        {
          "name": "CurrentEra",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " The current era index.",
            "",
            " This is the latest planned era, depending on how the Session pallet queues the validator",
            " set, it might be active or not."
          ]
        },
        {
          "name": "ActiveEra",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_stakingActiveEraInfo",
            "PlainTypeValue": 216
          },
          "fallback": "0x00",
          "docs": [
            " The active era information, it holds index and start.",
            "",
            " The active era is the era being currently rewarded. Validator set of this era must be",
            " equal to [`SessionInterface::validators`]."
          ]
        },
        {
          "name": "ErasStartSessionIndex",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
            "",
            " Note: This tracks the starting session (i.e. session index when era start being active)",
            " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
          ]
        },
        {
          "name": "ErasStakers",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "TupleU32[U8; 32]"
              ],
              "value": "pallet_stakingExposure",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x000000",
          "docs": [
            " Exposure of validator at era.",
            "",
            " This is keyed first by the era index to allow bulk deletion and then the stash account.",
            "",
            " Is it removed after `HISTORY_DEPTH` eras.",
            " If stakers hasn't been set or has been removed then empty exposure is returned."
          ]
        },
        {
          "name": "ErasStakersClipped",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "TupleU32[U8; 32]"
              ],
              "value": "pallet_stakingExposure",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x000000",
          "docs": [
            " Clipped Exposure of validator at era.",
            "",
            " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
            " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
            " (Note: the field `total` and `own` of the exposure remains unchanged).",
            " This is used to limit the i/o cost for the nominator payout.",
            "",
            " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
            "",
            " Is it removed after `HISTORY_DEPTH` eras.",
            " If stakers hasn't been set or has been removed then empty exposure is returned."
          ]
        },
        {
          "name": "ErasValidatorPrefs",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "TupleU32[U8; 32]"
              ],
              "value": "pallet_stakingValidatorPrefs",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000",
          "docs": [
            " Similar to `ErasStakers`, this holds the preferences of validators.",
            "",
            " This is keyed first by the era index to allow bulk deletion and then the stash account.",
            "",
            " Is it removed after `HISTORY_DEPTH` eras."
          ]
        },
        {
          "name": "ErasValidatorReward",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The total validator era payout for the last `HISTORY_DEPTH` eras.",
            "",
            " Eras that haven't finished yet or has been removed doesn't have reward."
          ]
        },
        {
          "name": "ErasRewardPoints",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "pallet_stakingEraRewardPoints",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000",
          "docs": [
            " Rewards for the last `HISTORY_DEPTH` eras.",
            " If reward hasn't been set or has been removed then 0 reward is returned."
          ]
        },
        {
          "name": "ErasTotalStake",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": [
            " The total amount staked for the last `HISTORY_DEPTH` eras.",
            " If total hasn't been set or has been removed then 0 stake is returned."
          ]
        },
        {
          "name": "ForceEra",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_stakingForcing",
            "PlainTypeValue": 222
          },
          "fallback": "0x00",
          "docs": [
            " Mode of era forcing."
          ]
        },
        {
          "name": "SlashRewardFraction",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 148
          },
          "fallback": "0x00000000",
          "docs": [
            " The percentage of the slash that is distributed to reporters.",
            "",
            " The rest of the slashed value is handled by the `Slash`."
          ]
        },
        {
          "name": "CanceledSlashPayout",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U128",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": [
            " The amount of currency given to reporters of a slash event which was",
            " canceled by extraordinary circumstances (e.g. governance)."
          ]
        },
        {
          "name": "UnappliedSlashes",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<pallet_stakingUnappliedSlash>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " All unapplied slashes that are queued for later."
          ]
        },
        {
          "name": "BondedEras",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<TupleU32U32>",
            "PlainTypeValue": 144
          },
          "fallback": "0x00",
          "docs": [
            " A mapping from still-bonded eras to the first session index of that era.",
            "",
            " Must contains information for eras for the range:",
            " `[active_era - bounding_duration; active_era]`"
          ]
        },
        {
          "name": "ValidatorSlashInEra",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "TupleU32[U8; 32]"
              ],
              "value": "TupleU32U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " All slashing events on validators, mapped by era to the highest slash proportion",
            " and slash value of the era."
          ]
        },
        {
          "name": "NominatorSlashInEra",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "TupleU32[U8; 32]"
              ],
              "value": "U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " All slashing events on nominators, mapped by era to the highest slash value of the era."
          ]
        },
        {
          "name": "SlashingSpans",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_stakingslashingSlashingSpans",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Slashing spans for stash accounts."
          ]
        },
        {
          "name": "SpanSlash",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "Tuple[U8; 32]U32"
              ],
              "value": "pallet_stakingslashingSpanRecord",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " Records information about the maximum slash of a stash within a slashing span,",
            " as well as how much reward has been paid out."
          ]
        },
        {
          "name": "EarliestUnappliedSlash",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " The earliest era for which we have a pending, unapplied slash."
          ]
        },
        {
          "name": "CurrentPlannedSession",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The last planned session scheduled by the session pallet.",
            "",
            " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
          ]
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_stakingReleases",
            "PlainTypeValue": 228
          },
          "fallback": "0x07",
          "docs": [
            " True if network has been upgraded to this version.",
            " Storage version of the pallet.",
            "",
            " This is set to v7.0.0 for new networks."
          ]
        },
        {
          "name": "ChillThreshold",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U8",
            "PlainTypeValue": 229
          },
          "fallback": "0x00",
          "docs": [
            " The threshold for when users can start calling `chill_other` for other validators /",
            " nominators. The threshold is compared to the actual number of validators / nominators",
            " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0600",
          "name": "bond",
          "docs": [
            "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
            "be the account that controls it.",
            "",
            "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
            "",
            "The dispatch origin for this call must be _Signed_ by the stash account.",
            "",
            "Emits `Bonded`.",
            "# <weight>",
            "- Independent of the arguments. Moderate complexity.",
            "- O(1).",
            "- Three extra DB entries.",
            "",
            "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
            "unless the `origin` falls below _existential deposit_ and gets removed as dust.",
            "------------------",
            "# </weight>"
          ],
          "args": [
            {
              "name": "controller",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "value",
              "type": "compact<U128>"
            },
            {
              "name": "payee",
              "type": "pallet_stakingRewardDestination"
            }
          ]
        },
        {
          "lookup": "0601",
          "name": "bond_extra",
          "docs": [
            "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
            "for staking.",
            "",
            "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
            "",
            "Use this if there are additional funds in your stash account that you wish to bond.",
            "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
            "any limitation on the amount that can be added.",
            "",
            "Emits `Bonded`.",
            "",
            "# <weight>",
            "- Independent of the arguments. Insignificant complexity.",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "max_additional",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "0602",
          "name": "unbond",
          "docs": [
            "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
            "period ends. If this leaves an amount actively bonded less than",
            "T::Currency::minimum_balance(), then it is increased to the full amount.",
            "",
            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
            "",
            "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
            "the funds out of management ready for transfer.",
            "",
            "No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
            "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
            "to be called first to remove some of the chunks (if possible).",
            "",
            "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
            "they should call `chill` first in order to free up their bonded funds.",
            "",
            "Emits `Unbonded`.",
            "",
            "See also [`Call::withdraw_unbonded`]."
          ],
          "args": [
            {
              "name": "value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "0603",
          "name": "withdraw_unbonded",
          "docs": [
            "Remove any unlocked chunks from the `unlocking` queue from our management.",
            "",
            "This essentially frees up that balance to be used by the stash account to do",
            "whatever it wants.",
            "",
            "The dispatch origin for this call must be _Signed_ by the controller.",
            "",
            "Emits `Withdrawn`.",
            "",
            "See also [`Call::unbond`].",
            "",
            "# <weight>",
            "Complexity O(S) where S is the number of slashing spans to remove",
            "NOTE: Weight annotation is the kill scenario, we refund otherwise.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "num_slashing_spans",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0604",
          "name": "validate",
          "docs": [
            "Declare the desire to validate for the origin controller.",
            "",
            "Effects will be felt at the beginning of the next era.",
            "",
            "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
          ],
          "args": [
            {
              "name": "prefs",
              "type": "pallet_stakingValidatorPrefs"
            }
          ]
        },
        {
          "lookup": "0605",
          "name": "nominate",
          "docs": [
            "Declare the desire to nominate `targets` for the origin controller.",
            "",
            "Effects will be felt at the beginning of the next era.",
            "",
            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
            "",
            "# <weight>",
            "- The transaction's complexity is proportional to the size of `targets` (N)",
            "which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
            "- Both the reads and writes follow a similar pattern.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "targets",
              "type": "Vec<sp_runtimemultiaddressMultiAddress>"
            }
          ]
        },
        {
          "lookup": "0606",
          "name": "chill",
          "docs": [
            "Declare no desire to either validate or nominate.",
            "",
            "Effects will be felt at the beginning of the next era.",
            "",
            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
            "",
            "# <weight>",
            "- Independent of the arguments. Insignificant complexity.",
            "- Contains one read.",
            "- Writes are limited to the `origin` account key.",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "0607",
          "name": "set_payee",
          "docs": [
            "(Re-)set the payment target for a controller.",
            "",
            "Effects will be felt at the beginning of the next era.",
            "",
            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
            "",
            "# <weight>",
            "- Independent of the arguments. Insignificant complexity.",
            "- Contains a limited number of reads.",
            "- Writes are limited to the `origin` account key.",
            "---------",
            "- Weight: O(1)",
            "- DB Weight:",
            "    - Read: Ledger",
            "    - Write: Payee",
            "# </weight>"
          ],
          "args": [
            {
              "name": "payee",
              "type": "pallet_stakingRewardDestination"
            }
          ]
        },
        {
          "lookup": "0608",
          "name": "set_controller",
          "docs": [
            "(Re-)set the controller of a stash.",
            "",
            "Effects will be felt at the beginning of the next era.",
            "",
            "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
            "",
            "# <weight>",
            "- Independent of the arguments. Insignificant complexity.",
            "- Contains a limited number of reads.",
            "- Writes are limited to the `origin` account key.",
            "----------",
            "Weight: O(1)",
            "DB Weight:",
            "- Read: Bonded, Ledger New Controller, Ledger Old Controller",
            "- Write: Bonded, Ledger New Controller, Ledger Old Controller",
            "# </weight>"
          ],
          "args": [
            {
              "name": "controller",
              "type": "sp_runtimemultiaddressMultiAddress"
            }
          ]
        },
        {
          "lookup": "0609",
          "name": "set_validator_count",
          "docs": [
            "Sets the ideal number of validators.",
            "",
            "The dispatch origin must be Root.",
            "",
            "# <weight>",
            "Weight: O(1)",
            "Write: Validator Count",
            "# </weight>"
          ],
          "args": [
            {
              "name": "new",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "060a",
          "name": "increase_validator_count",
          "docs": [
            "Increments the ideal number of validators.",
            "",
            "The dispatch origin must be Root.",
            "",
            "# <weight>",
            "Same as [`Self::set_validator_count`].",
            "# </weight>"
          ],
          "args": [
            {
              "name": "additional",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "060b",
          "name": "scale_validator_count",
          "docs": [
            "Scale up the ideal number of validators by a factor.",
            "",
            "The dispatch origin must be Root.",
            "",
            "# <weight>",
            "Same as [`Self::set_validator_count`].",
            "# </weight>"
          ],
          "args": [
            {
              "name": "factor",
              "type": "U8"
            }
          ]
        },
        {
          "lookup": "060c",
          "name": "force_no_eras",
          "docs": [
            "Force there to be no new eras indefinitely.",
            "",
            "The dispatch origin must be Root.",
            "",
            "# Warning",
            "",
            "The election process starts multiple blocks before the end of the era.",
            "Thus the election process may be ongoing when this is called. In this case the",
            "election will continue until the next era is triggered.",
            "",
            "# <weight>",
            "- No arguments.",
            "- Weight: O(1)",
            "- Write: ForceEra",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "060d",
          "name": "force_new_era",
          "docs": [
            "Force there to be a new era at the end of the next session. After this, it will be",
            "reset to normal (non-forced) behaviour.",
            "",
            "The dispatch origin must be Root.",
            "",
            "# Warning",
            "",
            "The election process starts multiple blocks before the end of the era.",
            "If this is called just before a new era is triggered, the election process may not",
            "have enough blocks to get a result.",
            "",
            "# <weight>",
            "- No arguments.",
            "- Weight: O(1)",
            "- Write ForceEra",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "060e",
          "name": "set_invulnerables",
          "docs": [
            "Set the validators who cannot be slashed (if any).",
            "",
            "The dispatch origin must be Root.",
            "",
            "# <weight>",
            "- O(V)",
            "- Write: Invulnerables",
            "# </weight>"
          ],
          "args": [
            {
              "name": "invulnerables",
              "type": "Vec<[U8; 32]>"
            }
          ]
        },
        {
          "lookup": "060f",
          "name": "force_unstake",
          "docs": [
            "Force a current staker to become completely unstaked, immediately.",
            "",
            "The dispatch origin must be Root.",
            "",
            "# <weight>",
            "O(S) where S is the number of slashing spans to be removed",
            "Reads: Bonded, Slashing Spans, Account, Locks",
            "Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators,",
            "Account, Locks Writes Each: SpanSlash * S",
            "# </weight>"
          ],
          "args": [
            {
              "name": "stash",
              "type": "[U8; 32]"
            },
            {
              "name": "num_slashing_spans",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0610",
          "name": "force_new_era_always",
          "docs": [
            "Force there to be a new era at the end of sessions indefinitely.",
            "",
            "The dispatch origin must be Root.",
            "",
            "# Warning",
            "",
            "The election process starts multiple blocks before the end of the era.",
            "If this is called just before a new era is triggered, the election process may not",
            "have enough blocks to get a result.",
            "",
            "# <weight>",
            "- Weight: O(1)",
            "- Write: ForceEra",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "0611",
          "name": "cancel_deferred_slash",
          "docs": [
            "Cancel enactment of a deferred slash.",
            "",
            "Can be called by the `T::SlashCancelOrigin`.",
            "",
            "Parameters: era and indices of the slashes for that era to kill.",
            "",
            "# <weight>",
            "Complexity: O(U + S)",
            "with U unapplied slashes weighted with U=1000",
            "and S is the number of slash indices to be canceled.",
            "- Read: Unapplied Slashes",
            "- Write: Unapplied Slashes",
            "# </weight>"
          ],
          "args": [
            {
              "name": "era",
              "type": "U32"
            },
            {
              "name": "slash_indices",
              "type": "Vec<U32>"
            }
          ]
        },
        {
          "lookup": "0612",
          "name": "payout_stakers",
          "docs": [
            "Pay out all the stakers behind a single validator for a single era.",
            "",
            "- `validator_stash` is the stash account of the validator. Their nominators, up to",
            "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
            "- `era` may be any era between `[current_era - history_depth; current_era]`.",
            "",
            "The origin of this call must be _Signed_. Any account can call this function, even if",
            "it is not one of the stakers.",
            "",
            "# <weight>",
            "- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
            "- Contains a limited number of reads and writes.",
            "-----------",
            "N is the Number of payouts for the validator (including the validator)",
            "Weight:",
            "- Reward Destination Staked: O(N)",
            "- Reward Destination Controller (Creating): O(N)",
            "",
            "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
            "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "validator_stash",
              "type": "[U8; 32]"
            },
            {
              "name": "era",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0613",
          "name": "rebond",
          "docs": [
            "Rebond a portion of the stash scheduled to be unlocked.",
            "",
            "The dispatch origin must be signed by the controller.",
            "",
            "# <weight>",
            "- Time complexity: O(L), where L is unlocking chunks",
            "- Bounded by `MAX_UNLOCKING_CHUNKS`.",
            "- Storage changes: Can't increase storage, only decrease it.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "0614",
          "name": "set_history_depth",
          "docs": [
            "Set `HistoryDepth` value. This function will delete any history information",
            "when `HistoryDepth` is reduced.",
            "",
            "Parameters:",
            "- `new_history_depth`: The new history depth you would like to set.",
            "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This",
            "  should report all the storage items that will be deleted by clearing old era history.",
            "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an",
            "  accurate number.",
            "",
            "Origin must be root.",
            "",
            "# <weight>",
            "- E: Number of history depths removed, i.e. 10 -> 7 = 3",
            "- Weight: O(E)",
            "- DB Weight:",
            "    - Reads: Current Era, History Depth",
            "    - Writes: History Depth",
            "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
            "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,",
            "      ErasStartSessionIndex",
            "# </weight>"
          ],
          "args": [
            {
              "name": "new_history_depth",
              "type": "compact<U32>"
            },
            {
              "name": "era_items_deleted",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0615",
          "name": "reap_stash",
          "docs": [
            "Remove all data structure concerning a staker/stash once its balance is at the minimum.",
            "This is essentially equivalent to `withdraw_unbonded` except it can be called by anyone",
            "and the target `stash` must have no funds left beyond the ED.",
            "",
            "This can be called from any origin.",
            "",
            "- `stash`: The stash account to reap. Its balance must be zero.",
            "",
            "# <weight>",
            "Complexity: O(S) where S is the number of slashing spans on the account.",
            "DB Weight:",
            "- Reads: Stash Account, Bonded, Slashing Spans, Locks",
            "- Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators,",
            "  Stash Account, Locks",
            "- Writes Each: SpanSlash * S",
            "# </weight>"
          ],
          "args": [
            {
              "name": "stash",
              "type": "[U8; 32]"
            },
            {
              "name": "num_slashing_spans",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0616",
          "name": "kick",
          "docs": [
            "Remove the given nominations from the calling validator.",
            "",
            "Effects will be felt at the beginning of the next era.",
            "",
            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
            "",
            "- `who`: A list of nominator stash accounts who are nominating this validator which",
            "  should no longer be nominating this validator.",
            "",
            "Note: Making this call only makes sense if you first set the validator preferences to",
            "block any further nominations."
          ],
          "args": [
            {
              "name": "who",
              "type": "Vec<sp_runtimemultiaddressMultiAddress>"
            }
          ]
        },
        {
          "lookup": "0617",
          "name": "set_staking_limits",
          "docs": [
            "Update the various staking limits this pallet.",
            "",
            "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
            "* `min_validator_bond`: The minimum active bond needed to be a validator.",
            "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
            "  set to `None`, no limit is enforced.",
            "* `max_validator_count`: The max number of users who can be a validator at once. When",
            "  set to `None`, no limit is enforced.",
            "",
            "Origin must be Root to call this function.",
            "",
            "NOTE: Existing nominators and validators will not be affected by this update.",
            "to kick people under the new limits, `chill_other` should be called."
          ],
          "args": [
            {
              "name": "min_nominator_bond",
              "type": "U128"
            },
            {
              "name": "min_validator_bond",
              "type": "U128"
            },
            {
              "name": "max_nominator_count",
              "type": "option<U32>"
            },
            {
              "name": "max_validator_count",
              "type": "option<U32>"
            },
            {
              "name": "threshold",
              "type": "option<U8>"
            }
          ]
        },
        {
          "lookup": "0618",
          "name": "chill_other",
          "docs": [
            "Declare a `controller` to stop participating as either a validator or nominator.",
            "",
            "Effects will be felt at the beginning of the next era.",
            "",
            "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
            "",
            "If the caller is the same as the controller being targeted, then no further checks are",
            "enforced, and this function behaves just like `chill`.",
            "",
            "If the caller is different than the controller being targeted, the following conditions",
            "must be met:",
            "* A `ChillThreshold` must be set and checked which defines how close to the max",
            "  nominators or validators we must reach before users can start chilling one-another.",
            "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
            "  how close we are to the threshold.",
            "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
            "  if this is a person that should be chilled because they have not met the threshold",
            "  bond required.",
            "",
            "This can be helpful if bond requirements are updated, and we need to remove old users",
            "who do not satisfy these requirements."
          ],
          "args": [
            {
              "name": "controller",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 230
      },
      "events": [
        {
          "lookup": "0600",
          "name": "EraPaid",
          "docs": [
            "The era payout has been set; the first balance is the validator-payout; the second is",
            "the remainder from the maximum amount of reward.",
            "\\[era_index, validator_payout, remainder\\]"
          ],
          "args": [
            "U32",
            "U128",
            "U128"
          ]
        },
        {
          "lookup": "0601",
          "name": "Rewarded",
          "docs": [
            "The nominator has been rewarded by this amount. \\[stash, amount\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0602",
          "name": "Slashed",
          "docs": [
            "One validator (and its nominators) has been slashed by the given amount.",
            "\\[validator, amount\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0603",
          "name": "OldSlashingReportDiscarded",
          "docs": [
            "An old slashing report from a prior era was discarded because it could",
            "not be processed. \\[session_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0604",
          "name": "StakersElected",
          "docs": [
            "A new set of stakers was elected."
          ],
          "args": null
        },
        {
          "lookup": "0605",
          "name": "Bonded",
          "docs": [
            "An account has bonded this amount. \\[stash, amount\\]",
            "",
            "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
            "it will not be emitted for staking rewards when they are added to stake."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0606",
          "name": "Unbonded",
          "docs": [
            "An account has unbonded this amount. \\[stash, amount\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0607",
          "name": "Withdrawn",
          "docs": [
            "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
            "from the unlocking queue. \\[stash, amount\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0608",
          "name": "Kicked",
          "docs": [
            "A nominator has been kicked from a validator. \\[nominator, stash\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0609",
          "name": "StakingElectionFailed",
          "docs": [
            "The election failed. No new era is planned."
          ],
          "args": null
        },
        {
          "lookup": "060a",
          "name": "Chilled",
          "docs": [
            "An account has stopped participating as either a validator or nominator.",
            "\\[stash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "060b",
          "name": "PayoutStarted",
          "docs": [
            "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 31
      },
      "constants": [
        {
          "name": "SessionsPerEra",
          "type": "U32",
          "type_value": 4,
          "constants_value": "06000000",
          "docs": [
            " Number of sessions per era."
          ]
        },
        {
          "name": "BondingDuration",
          "type": "U32",
          "type_value": 4,
          "constants_value": "1c000000",
          "docs": [
            " Number of eras that staked funds must remain bonded for."
          ]
        },
        {
          "name": "SlashDeferDuration",
          "type": "U32",
          "type_value": 4,
          "constants_value": "1b000000",
          "docs": [
            " Number of eras that slashes are deferred by, after computation.",
            "",
            " This should be less than the bonding duration. Set to 0 if slashes",
            " should be applied immediately, without opportunity for intervention."
          ]
        },
        {
          "name": "MaxNominatorRewardedPerValidator",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00010000",
          "docs": [
            " The maximum number of nominators rewarded for each validator.",
            "",
            " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
            " claim their reward. This used to limit the i/o cost for the nominator payout."
          ]
        },
        {
          "name": "MaxNominations",
          "type": "U32",
          "type_value": 4,
          "constants_value": "18000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "NotController",
          "doc": [
            "Not a controller account."
          ]
        },
        {
          "name": "NotStash",
          "doc": [
            "Not a stash account."
          ]
        },
        {
          "name": "AlreadyBonded",
          "doc": [
            "Stash is already bonded."
          ]
        },
        {
          "name": "AlreadyPaired",
          "doc": [
            "Controller is already paired."
          ]
        },
        {
          "name": "EmptyTargets",
          "doc": [
            "Targets cannot be empty."
          ]
        },
        {
          "name": "DuplicateIndex",
          "doc": [
            "Duplicate index."
          ]
        },
        {
          "name": "InvalidSlashIndex",
          "doc": [
            "Slash record index out of bounds."
          ]
        },
        {
          "name": "InsufficientBond",
          "doc": [
            "Can not bond with value less than minimum required."
          ]
        },
        {
          "name": "NoMoreChunks",
          "doc": [
            "Can not schedule more unlock chunks."
          ]
        },
        {
          "name": "NoUnlockChunk",
          "doc": [
            "Can not rebond without unlocking chunks."
          ]
        },
        {
          "name": "FundedTarget",
          "doc": [
            "Attempting to target a stash that still has funds."
          ]
        },
        {
          "name": "InvalidEraToReward",
          "doc": [
            "Invalid era to reward."
          ]
        },
        {
          "name": "InvalidNumberOfNominations",
          "doc": [
            "Invalid number of nominations."
          ]
        },
        {
          "name": "NotSortedAndUnique",
          "doc": [
            "Items are not sorted and unique."
          ]
        },
        {
          "name": "AlreadyClaimed",
          "doc": [
            "Rewards for this era have already been claimed for this validator."
          ]
        },
        {
          "name": "IncorrectHistoryDepth",
          "doc": [
            "Incorrect previous history depth input provided."
          ]
        },
        {
          "name": "IncorrectSlashingSpans",
          "doc": [
            "Incorrect number of slashing spans provided."
          ]
        },
        {
          "name": "BadState",
          "doc": [
            "Internal state has become somehow corrupted and the operation cannot continue."
          ]
        },
        {
          "name": "TooManyTargets",
          "doc": [
            "Too many nomination targets supplied."
          ]
        },
        {
          "name": "BadTarget",
          "doc": [
            "A nomination target was supplied that was blocked or otherwise not a validator."
          ]
        },
        {
          "name": "CannotChillOther",
          "doc": [
            "The user has enough bond and thus cannot be chilled forcefully by an external person."
          ]
        },
        {
          "name": "TooManyNominators",
          "doc": [
            "There are too many nominators in the system. Governance needs to adjust the staking",
            "settings to keep things safe for the runtime."
          ]
        },
        {
          "name": "TooManyValidators",
          "doc": [
            "There are too many validators in the system. Governance needs to adjust the staking",
            "settings to keep things safe for the runtime."
          ]
        }
      ],
      "errors_value": {
        "type": 234
      },
      "index": 6
    },
    {
      "name": "Offences",
      "prefix": "Offences",
      "storage": [
        {
          "name": "Reports",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "sp_stakingoffenceOffenceDetails",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The primary structure that holds all offence records keyed by report identifiers."
          ]
        },
        {
          "name": "ConcurrentReportsIndex",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "Tuple[U8; 16]Vec<U8>"
              ],
              "value": "Vec<[U8; 32]>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " A vector of reports of the same kind that happened at the same time slot."
          ]
        },
        {
          "name": "ReportsByKindIndex",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 16]"
              ],
              "value": "Vec<U8>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Enumerates all reports of a kind along with the time they happened.",
            "",
            " All reports are sorted by the time of offence.",
            "",
            " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
            " different types are not supported at the moment so we are doing the manual serialization."
          ]
        }
      ],
      "events": [
        {
          "lookup": "0700",
          "name": "Offence",
          "docs": [
            "There is an offence reported of the given `kind` happened at the `session_index` and",
            "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
            "\\[kind, timeslot\\]."
          ],
          "args": [
            "[U8; 16]",
            "Vec<U8>"
          ]
        }
      ],
      "events_value": {
        "type": 32
      },
      "errors": null,
      "errors_value": null,
      "index": 7
    },
    {
      "name": "Historical",
      "prefix": "",
      "storage": null,
      "errors": null,
      "errors_value": null,
      "index": 34
    },
    {
      "name": "Session",
      "prefix": "Session",
      "storage": [
        {
          "name": "Validators",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 50
          },
          "fallback": "0x00",
          "docs": [
            " The current set of validators."
          ]
        },
        {
          "name": "CurrentIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Current index of the session."
          ]
        },
        {
          "name": "QueuedChanged",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Bool",
            "PlainTypeValue": 55
          },
          "fallback": "0x00",
          "docs": [
            " True if the underlying economic identities or weighting behind the validators",
            " has changed in the queued validator set."
          ]
        },
        {
          "name": "QueuedKeys",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<Tuple[U8; 32]kusama_runtimeSessionKeys>",
            "PlainTypeValue": 237
          },
          "fallback": "0x00",
          "docs": [
            " The queued keys for the next session. When the next session begins, these keys",
            " will be used to determine the validator's session keys."
          ]
        },
        {
          "name": "DisabledValidators",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<U32>",
            "PlainTypeValue": 211
          },
          "fallback": "0x00",
          "docs": [
            " Indices of disabled validators.",
            "",
            " The set is cleared when `on_session_ending` returns a new set of identities."
          ]
        },
        {
          "name": "NextKeys",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "kusama_runtimeSessionKeys",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The next session keys for a validator."
          ]
        },
        {
          "name": "KeyOwner",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "Tuple[U8; 4]Vec<U8>"
              ],
              "value": "[U8; 32]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The owner of a key. The key is the `KeyTypeId` + the encoded key."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0800",
          "name": "set_keys",
          "docs": [
            "Sets the session key(s) of the function caller to `keys`.",
            "Allows an account to set its session key prior to becoming a validator.",
            "This doesn't take effect until the next session.",
            "",
            "The dispatch origin of this function must be signed.",
            "",
            "# <weight>",
            "- Complexity: `O(1)`. Actual cost depends on the number of length of",
            "  `T::Keys::key_ids()` which is fixed.",
            "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
            "- DbWrites: `origin account`, `NextKeys`",
            "- DbReads per key id: `KeyOwner`",
            "- DbWrites per key id: `KeyOwner`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "keys",
              "type": "kusama_runtimeSessionKeys"
            },
            {
              "name": "proof",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "0801",
          "name": "purge_keys",
          "docs": [
            "Removes any session key(s) of the function caller.",
            "This doesn't take effect until the next session.",
            "",
            "The dispatch origin of this function must be signed.",
            "",
            "# <weight>",
            "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
            "  of `T::Keys::key_ids()` which is fixed.",
            "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
            "- DbWrites: `NextKeys`, `origin account`",
            "- DbWrites per key id: `KeyOwner`",
            "# </weight>"
          ],
          "args": null
        }
      ],
      "calls_value": {
        "type": 245
      },
      "events": [
        {
          "lookup": "0800",
          "name": "NewSession",
          "docs": [
            "New session has happened. Note that the argument is the \\[session_index\\], not the",
            "block number as the type might suggest."
          ],
          "args": [
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 34
      },
      "errors": [
        {
          "name": "InvalidProof",
          "doc": [
            "Invalid ownership proof."
          ]
        },
        {
          "name": "NoAssociatedValidatorId",
          "doc": [
            "No associated validator ID for account."
          ]
        },
        {
          "name": "DuplicatedKey",
          "doc": [
            "Registered duplicate key."
          ]
        },
        {
          "name": "NoKeys",
          "doc": [
            "No keys are associated with this account."
          ]
        },
        {
          "name": "NoAccount",
          "doc": [
            "Key setting account is not live, so it's impossible to associate keys."
          ]
        }
      ],
      "errors_value": {
        "type": 246
      },
      "index": 8
    },
    {
      "name": "Grandpa",
      "prefix": "Grandpa",
      "storage": [
        {
          "name": "State",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_grandpaStoredState",
            "PlainTypeValue": 247
          },
          "fallback": "0x00",
          "docs": [
            " State of the current authority set."
          ]
        },
        {
          "name": "PendingChange",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_grandpaStoredPendingChange",
            "PlainTypeValue": 248
          },
          "fallback": "0x00",
          "docs": [
            " Pending change: (signaled at, scheduled change)."
          ]
        },
        {
          "name": "NextForced",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " next block number where we can force a change."
          ]
        },
        {
          "name": "Stalled",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "TupleU32U32",
            "PlainTypeValue": 71
          },
          "fallback": "0x00",
          "docs": [
            " `true` if we are currently stalled."
          ]
        },
        {
          "name": "CurrentSetId",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U64",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " The number of changes (both in terms of keys and underlying economic responsibilities)",
            " in the \"set\" of Grandpa validators from genesis."
          ]
        },
        {
          "name": "SetIdSession",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U64"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " A mapping from grandpa set ID to the index of the *most recent* session for which its",
            " members were responsible.",
            "",
            " TWOX-NOTE: `SetId` is not under user control."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0a00",
          "name": "report_equivocation",
          "docs": [
            "Report voter equivocation/misbehavior. This method will verify the",
            "equivocation proof and validate the given key ownership proof",
            "against the extracted offender. If both are valid, the offence",
            "will be reported."
          ],
          "args": [
            {
              "name": "equivocation_proof",
              "type": "sp_finality_grandpaEquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "type": "sp_sessionMembershipProof"
            }
          ]
        },
        {
          "lookup": "0a01",
          "name": "report_equivocation_unsigned",
          "docs": [
            "Report voter equivocation/misbehavior. This method will verify the",
            "equivocation proof and validate the given key ownership proof",
            "against the extracted offender. If both are valid, the offence",
            "will be reported.",
            "",
            "This extrinsic must be called unsigned and it is expected that only",
            "block authors will call it (validated in `ValidateUnsigned`), as such",
            "if the block author is defined it will be defined as the equivocation",
            "reporter."
          ],
          "args": [
            {
              "name": "equivocation_proof",
              "type": "sp_finality_grandpaEquivocationProof"
            },
            {
              "name": "key_owner_proof",
              "type": "sp_sessionMembershipProof"
            }
          ]
        },
        {
          "lookup": "0a02",
          "name": "note_stalled",
          "docs": [
            "Note that the current authority set of the GRANDPA finality gadget has",
            "stalled. This will trigger a forced authority set change at the beginning",
            "of the next session, to be enacted `delay` blocks after that. The delay",
            "should be high enough to safely assume that the block signalling the",
            "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
            "will start the new authority set using the given finalized block as base.",
            "Only callable by root."
          ],
          "args": [
            {
              "name": "delay",
              "type": "U32"
            },
            {
              "name": "best_finalized_block_number",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 250
      },
      "events": [
        {
          "lookup": "0a00",
          "name": "NewAuthorities",
          "docs": [
            "New authority set has been applied. \\[authority_set\\]"
          ],
          "args": [
            "Vec<Tuple[U8; 32]U64>"
          ]
        },
        {
          "lookup": "0a01",
          "name": "Paused",
          "docs": [
            "Current authority set has been paused."
          ],
          "args": null
        },
        {
          "lookup": "0a02",
          "name": "Resumed",
          "docs": [
            "Current authority set has been resumed."
          ],
          "args": null
        }
      ],
      "events_value": {
        "type": 35
      },
      "constants": [
        {
          "name": "MaxAuthorities",
          "type": "U32",
          "type_value": 4,
          "constants_value": "a0860100",
          "docs": [
            " Max Authorities in use"
          ]
        }
      ],
      "errors": [
        {
          "name": "PauseFailed",
          "doc": [
            "Attempt to signal GRANDPA pause when the authority set isn't live",
            "(either paused or already pending pause)."
          ]
        },
        {
          "name": "ResumeFailed",
          "doc": [
            "Attempt to signal GRANDPA resume when the authority set isn't paused",
            "(either live or already pending resume)."
          ]
        },
        {
          "name": "ChangePending",
          "doc": [
            "Attempt to signal GRANDPA change with one already pending."
          ]
        },
        {
          "name": "TooSoon",
          "doc": [
            "Cannot signal forced change so soon after last."
          ]
        },
        {
          "name": "InvalidKeyOwnershipProof",
          "doc": [
            "A key ownership proof provided as part of an equivocation report is invalid."
          ]
        },
        {
          "name": "InvalidEquivocationProof",
          "doc": [
            "An equivocation proof provided as part of an equivocation report is invalid."
          ]
        },
        {
          "name": "DuplicateOffenceReport",
          "doc": [
            "A given equivocation report is valid but already previously reported."
          ]
        }
      ],
      "errors_value": {
        "type": 261
      },
      "index": 10
    },
    {
      "name": "ImOnline",
      "prefix": "ImOnline",
      "storage": [
        {
          "name": "HeartbeatAfter",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The block number after which it's ok to send heartbeats in the current",
            " session.",
            "",
            " At the beginning of each session we set this to a value that should fall",
            " roughly in the middle of the session duration. The idea is to first wait for",
            " the validators to produce a block in the current session, so that the",
            " heartbeat later on will not be necessary.",
            "",
            " This value will only be used as a fallback if we fail to get a proper session",
            " progress estimate from `NextSessionRotation`, as those estimates should be",
            " more accurate then the value we calculate for `HeartbeatAfter`."
          ]
        },
        {
          "name": "Keys",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 262
          },
          "fallback": "0x00",
          "docs": [
            " The current set of keys that may issue a heartbeat."
          ]
        },
        {
          "name": "ReceivedHeartbeats",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "TupleU32U32"
              ],
              "value": "frame_supporttraitsmiscWrapperOpaque",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " For each session index, we keep a mapping of 'SessionIndex` and `AuthIndex` to",
            " `WrapperOpaque<BoundedOpaqueNetworkState>`."
          ]
        },
        {
          "name": "AuthoredBlocks",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "TupleU32[U8; 32]"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00000000",
          "docs": [
            " For each session index, we keep a mapping of `ValidatorId<T>` to the",
            " number of blocks authored by the given authority."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0b00",
          "name": "heartbeat",
          "docs": [
            "# <weight>",
            "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
            "  length of `heartbeat.network_state.external_address`",
            "  - `O(K)`: decoding of length `K`",
            "  - `O(E)`: decoding/encoding of length `E`",
            "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
            "  `ReceivedHeartbeats`",
            "- DbWrites: `ReceivedHeartbeats`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "heartbeat",
              "type": "pallet_im_onlineHeartbeat"
            },
            {
              "name": "signature",
              "type": "[U8; 64]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 269
      },
      "events": [
        {
          "lookup": "0b00",
          "name": "HeartbeatReceived",
          "docs": [
            "A new heartbeat was received from `AuthorityId` \\[authority_id\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0b01",
          "name": "AllGood",
          "docs": [
            "At the end of the session, no offence was committed."
          ],
          "args": null
        },
        {
          "lookup": "0b02",
          "name": "SomeOffline",
          "docs": [
            "At the end of the session, at least one validator was found to be \\[offline\\]."
          ],
          "args": [
            "Vec<Tuple[U8; 32]pallet_stakingExposure>"
          ]
        }
      ],
      "events_value": {
        "type": 40
      },
      "constants": [
        {
          "name": "UnsignedPriority",
          "type": "U64",
          "type_value": 8,
          "constants_value": "ffffffffffffffff",
          "docs": [
            " A configuration for base priority of unsigned transactions.",
            "",
            " This is exposed so that it can be tuned for particular runtime, when",
            " multiple pallets send unsigned transactions."
          ]
        }
      ],
      "errors": [
        {
          "name": "InvalidKey",
          "doc": [
            "Non existent public key."
          ]
        },
        {
          "name": "DuplicatedHeartbeat",
          "doc": [
            "Duplicated heartbeat."
          ]
        }
      ],
      "errors_value": {
        "type": 276
      },
      "index": 11
    },
    {
      "name": "AuthorityDiscovery",
      "prefix": "",
      "storage": null,
      "errors": null,
      "errors_value": null,
      "index": 12
    },
    {
      "name": "Democracy",
      "prefix": "Democracy",
      "storage": [
        {
          "name": "PublicPropCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The number of (public) proposals that have been made so far."
          ]
        },
        {
          "name": "PublicProps",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<TupleU32[U8; 32][U8; 32]>",
            "PlainTypeValue": 277
          },
          "fallback": "0x00",
          "docs": [
            " The public proposals. Unsorted. The second item is the proposal's hash."
          ]
        },
        {
          "name": "DepositOf",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "TupleVec<[U8; 32]>U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Those who have locked a deposit.",
            "",
            " TWOX-NOTE: Safe, as increasing integer keys are safe."
          ]
        },
        {
          "name": "Preimages",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_democracyPreimageStatus",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
            " The block number is the block at which it was deposited."
          ]
        },
        {
          "name": "ReferendumCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The next free referendum index, aka the number of referenda started so far."
          ]
        },
        {
          "name": "LowestUnbaked",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The lowest referendum index representing an unbaked referendum. Equal to",
            " `ReferendumCount` if there isn't a unbaked referendum."
          ]
        },
        {
          "name": "ReferendumInfoOf",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "pallet_democracytypesReferendumInfo",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Information concerning any given referendum.",
            "",
            "2054574f582d4e4f54453a205341464520617320696e646578657320617265206e6f7420756e64657220616e2061747461636b6572e280997320636f6e74726f6c2e"
          ]
        },
        {
          "name": "VotingOf",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_democracyvoteVoting",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " All votes for a particular voter. We store the balance for the number of votes that we",
            " have recorded. The second item is the total amount of delegations, that will be added.",
            "",
            " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
          ]
        },
        {
          "name": "Locks",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Accounts for which there are locks in action which may be removed at some point in the",
            " future. The value is the block number at which the lock expires and may be removed.",
            "",
            "2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
          ]
        },
        {
          "name": "LastTabledWasExternal",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Bool",
            "PlainTypeValue": 55
          },
          "fallback": "0x00",
          "docs": [
            " True if the last referendum tabled was submitted externally. False if it was a public",
            " proposal."
          ]
        },
        {
          "name": "NextExternal",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "Tuple[U8; 32]pallet_democracyvote_thresholdVoteThreshold",
            "PlainTypeValue": 292
          },
          "fallback": "0x00",
          "docs": [
            " The referendum to be tabled whenever it would be valid to table an external proposal.",
            " This happens when a referendum needs to be tabled and one of two conditions are met:",
            " - `LastTabledWasExternal` is `false`; or",
            " - `PublicProps` is empty."
          ]
        },
        {
          "name": "Blacklist",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "TupleU32Vec<[U8; 32]>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " A record of who vetoed what. Maps proposal hash to a possible existent block number",
            " (until when it may not be resubmitted) and who vetoed it."
          ]
        },
        {
          "name": "Cancellations",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Bool",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Record of all proposals that have been subject to emergency cancellation."
          ]
        },
        {
          "name": "StorageVersion",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_democracyReleases",
            "PlainTypeValue": 294
          },
          "fallback": "0x00",
          "docs": [
            " Storage version of the pallet.",
            "",
            " New networks start with last version."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0d00",
          "name": "propose",
          "docs": [
            "Propose a sensitive action to be taken.",
            "",
            "The dispatch origin of this call must be _Signed_ and the sender must",
            "have funds to cover the deposit.",
            "",
            "- `proposal_hash`: The hash of the proposal preimage.",
            "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
            "",
            "Emits `Proposed`.",
            "",
            "Weight: `O(p)`"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "0d01",
          "name": "second",
          "docs": [
            "Signals agreement with a particular proposal.",
            "",
            "The dispatch origin of this call must be _Signed_ and the sender",
            "must have funds to cover the deposit, equal to the original deposit.",
            "",
            "- `proposal`: The index of the proposal to second.",
            "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
            "  proposal. Extrinsic is weighted according to this value with no refund.",
            "",
            "Weight: `O(S)` where S is the number of seconds a proposal already has."
          ],
          "args": [
            {
              "name": "proposal",
              "type": "compact<U32>"
            },
            {
              "name": "seconds_upper_bound",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0d02",
          "name": "vote",
          "docs": [
            "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
            "otherwise it is a vote to keep the status quo.",
            "",
            "The dispatch origin of this call must be _Signed_.",
            "",
            "- `ref_index`: The index of the referendum to vote for.",
            "- `vote`: The vote configuration.",
            "",
            "Weight: `O(R)` where R is the number of referendums the voter has voted on."
          ],
          "args": [
            {
              "name": "ref_index",
              "type": "compact<U32>"
            },
            {
              "name": "vote",
              "type": "pallet_democracyvoteAccountVote"
            }
          ]
        },
        {
          "lookup": "0d03",
          "name": "emergency_cancel",
          "docs": [
            "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
            "referendum.",
            "",
            "The dispatch origin of this call must be `CancellationOrigin`.",
            "",
            "-`ref_index`: The index of the referendum to cancel.",
            "",
            "Weight: `O(1)`."
          ],
          "args": [
            {
              "name": "ref_index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0d04",
          "name": "external_propose",
          "docs": [
            "Schedule a referendum to be tabled once it is legal to schedule an external",
            "referendum.",
            "",
            "The dispatch origin of this call must be `ExternalOrigin`.",
            "",
            "- `proposal_hash`: The preimage hash of the proposal.",
            "",
            "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
            "  Decoding vec of length V. Charged as maximum"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0d05",
          "name": "external_propose_majority",
          "docs": [
            "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
            "an external referendum.",
            "",
            "The dispatch of this call must be `ExternalMajorityOrigin`.",
            "",
            "- `proposal_hash`: The preimage hash of the proposal.",
            "",
            "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
            "pre-scheduled `external_propose` call.",
            "",
            "Weight: `O(1)`"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0d06",
          "name": "external_propose_default",
          "docs": [
            "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
            "schedule an external referendum.",
            "",
            "The dispatch of this call must be `ExternalDefaultOrigin`.",
            "",
            "- `proposal_hash`: The preimage hash of the proposal.",
            "",
            "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
            "pre-scheduled `external_propose` call.",
            "",
            "Weight: `O(1)`"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0d07",
          "name": "fast_track",
          "docs": [
            "Schedule the currently externally-proposed majority-carries referendum to be tabled",
            "immediately. If there is no externally-proposed referendum currently, or if there is one",
            "but it is not a majority-carries referendum then it fails.",
            "",
            "The dispatch of this call must be `FastTrackOrigin`.",
            "",
            "- `proposal_hash`: The hash of the current external proposal.",
            "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
            "  `FastTrackVotingPeriod` if too low.",
            "- `delay`: The number of block after voting has ended in approval and this should be",
            "  enacted. This doesn't have a minimum amount.",
            "",
            "Emits `Started`.",
            "",
            "Weight: `O(1)`"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "voting_period",
              "type": "U32"
            },
            {
              "name": "delay",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0d08",
          "name": "veto_external",
          "docs": [
            "Veto and blacklist the external proposal hash.",
            "",
            "The dispatch origin of this call must be `VetoOrigin`.",
            "",
            "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
            "",
            "Emits `Vetoed`.",
            "",
            "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0d09",
          "name": "cancel_referendum",
          "docs": [
            "Remove a referendum.",
            "",
            "The dispatch origin of this call must be _Root_.",
            "",
            "- `ref_index`: The index of the referendum to cancel.",
            "",
            "# Weight: `O(1)`."
          ],
          "args": [
            {
              "name": "ref_index",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0d0a",
          "name": "cancel_queued",
          "docs": [
            "Cancel a proposal queued for enactment.",
            "",
            "The dispatch origin of this call must be _Root_.",
            "",
            "- `which`: The index of the referendum to cancel.",
            "",
            "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
          ],
          "args": [
            {
              "name": "which",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0d0b",
          "name": "delegate",
          "docs": [
            "Delegate the voting power (with some given conviction) of the sending account.",
            "",
            "The balance delegated is locked for as long as it's delegated, and thereafter for the",
            "time appropriate for the conviction's lock period.",
            "",
            "The dispatch origin of this call must be _Signed_, and the signing account must either:",
            "  - be delegating already; or",
            "  - have no voting activity (if there is, then it will need to be removed/consolidated",
            "    through `reap_vote` or `unvote`).",
            "",
            "- `to`: The account whose voting the `target` account's voting power will follow.",
            "- `conviction`: The conviction that will be attached to the delegated votes. When the",
            "  account is undelegated, the funds will be locked for the corresponding period.",
            "- `balance`: The amount of the account's balance to be used in delegating. This must not",
            "  be more than the account's current balance.",
            "",
            "Emits `Delegated`.",
            "",
            "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
            "  voted on. Weight is charged as if maximum votes."
          ],
          "args": [
            {
              "name": "to",
              "type": "[U8; 32]"
            },
            {
              "name": "conviction",
              "type": "pallet_democracyconvictionConviction"
            },
            {
              "name": "balance",
              "type": "U128"
            }
          ]
        },
        {
          "lookup": "0d0c",
          "name": "undelegate",
          "docs": [
            "Undelegate the voting power of the sending account.",
            "",
            "Tokens may be unlocked following once an amount of time consistent with the lock period",
            "of the conviction with which the delegation was issued.",
            "",
            "The dispatch origin of this call must be _Signed_ and the signing account must be",
            "currently delegating.",
            "",
            "Emits `Undelegated`.",
            "",
            "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
            "  voted on. Weight is charged as if maximum votes."
          ],
          "args": null
        },
        {
          "lookup": "0d0d",
          "name": "clear_public_proposals",
          "docs": [
            "Clears all public proposals.",
            "",
            "The dispatch origin of this call must be _Root_.",
            "",
            "Weight: `O(1)`."
          ],
          "args": null
        },
        {
          "lookup": "0d0e",
          "name": "note_preimage",
          "docs": [
            "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
            "in the dispatch queue but does require a deposit, returned once enacted.",
            "",
            "The dispatch origin of this call must be _Signed_.",
            "",
            "- `encoded_proposal`: The preimage of a proposal.",
            "",
            "Emits `PreimageNoted`.",
            "",
            "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
          ],
          "args": [
            {
              "name": "encoded_proposal",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "0d0f",
          "name": "note_preimage_operational",
          "docs": [
            "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
          ],
          "args": [
            {
              "name": "encoded_proposal",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "0d10",
          "name": "note_imminent_preimage",
          "docs": [
            "Register the preimage for an upcoming proposal. This requires the proposal to be",
            "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
            "the preimage has not been uploaded before and matches some imminent proposal,",
            "no fee is paid.",
            "",
            "The dispatch origin of this call must be _Signed_.",
            "",
            "- `encoded_proposal`: The preimage of a proposal.",
            "",
            "Emits `PreimageNoted`.",
            "",
            "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
          ],
          "args": [
            {
              "name": "encoded_proposal",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "0d11",
          "name": "note_imminent_preimage_operational",
          "docs": [
            "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
          ],
          "args": [
            {
              "name": "encoded_proposal",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "0d12",
          "name": "reap_preimage",
          "docs": [
            "Remove an expired proposal preimage and collect the deposit.",
            "",
            "The dispatch origin of this call must be _Signed_.",
            "",
            "- `proposal_hash`: The preimage hash of a proposal.",
            "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
            "  weighted according to this value with no refund.",
            "",
            "This will only work after `VotingPeriod` blocks from the time that the preimage was",
            "noted, if it's the same account doing it. If it's a different account, then it'll only",
            "work an additional `EnactmentPeriod` later.",
            "",
            "Emits `PreimageReaped`.",
            "",
            "Weight: `O(D)` where D is length of proposal."
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "proposal_len_upper_bound",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0d13",
          "name": "unlock",
          "docs": [
            "Unlock tokens that have an expired lock.",
            "",
            "The dispatch origin of this call must be _Signed_.",
            "",
            "- `target`: The account to remove the lock on.",
            "",
            "Weight: `O(R)` with R number of vote of target."
          ],
          "args": [
            {
              "name": "target",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "0d14",
          "name": "remove_vote",
          "docs": [
            "Remove a vote for a referendum.",
            "",
            "If:",
            "- the referendum was cancelled, or",
            "- the referendum is ongoing, or",
            "- the referendum has ended such that",
            "  - the vote of the account was in opposition to the result; or",
            "  - there was no conviction to the account's vote; or",
            "  - the account made a split vote",
            "...then the vote is removed cleanly and a following call to `unlock` may result in more",
            "funds being available.",
            "",
            "If, however, the referendum has ended and:",
            "- it finished corresponding to the vote of the account, and",
            "- the account made a standard vote with conviction, and",
            "- the lock period of the conviction is not over",
            "...then the lock will be aggregated into the overall account's lock, which may involve",
            "*overlocking* (where the two locks are combined into a single lock that is the maximum",
            "of both the amount locked and the time is it locked for).",
            "",
            "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
            "registered for referendum `index`.",
            "",
            "- `index`: The index of referendum of the vote to be removed.",
            "",
            "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
            "  Weight is calculated for the maximum number of vote."
          ],
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0d15",
          "name": "remove_other_vote",
          "docs": [
            "Remove a vote for a referendum.",
            "",
            "If the `target` is equal to the signer, then this function is exactly equivalent to",
            "`remove_vote`. If not equal to the signer, then the vote must have expired,",
            "either because the referendum was cancelled, because the voter lost the referendum or",
            "because the conviction period is over.",
            "",
            "The dispatch origin of this call must be _Signed_.",
            "",
            "- `target`: The account of the vote to be removed; this account must have voted for",
            "  referendum `index`.",
            "- `index`: The index of referendum of the vote to be removed.",
            "",
            "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
            "  Weight is calculated for the maximum number of vote."
          ],
          "args": [
            {
              "name": "target",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0d16",
          "name": "enact_proposal",
          "docs": [
            "Enact a proposal from a referendum. For now we just make the weight be the maximum."
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0d17",
          "name": "blacklist",
          "docs": [
            "Permanently place a proposal into the blacklist. This prevents it from ever being",
            "proposed again.",
            "",
            "If called on a queued public or external proposal, then this will result in it being",
            "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
            "then it will be cancelled.",
            "",
            "The dispatch origin of this call must be `BlacklistOrigin`.",
            "",
            "- `proposal_hash`: The proposal hash to blacklist permanently.",
            "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
            "cancelled.",
            "",
            "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
            "  reasonable value)."
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "maybe_ref_index",
              "type": "option<U32>"
            }
          ]
        },
        {
          "lookup": "0d18",
          "name": "cancel_proposal",
          "docs": [
            "Remove a proposal.",
            "",
            "The dispatch origin of this call must be `CancelProposalOrigin`.",
            "",
            "- `prop_index`: The index of the proposal to cancel.",
            "",
            "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
          ],
          "args": [
            {
              "name": "prop_index",
              "type": "compact<U32>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 295
      },
      "events": [
        {
          "lookup": "0d00",
          "name": "Proposed",
          "docs": [
            "A motion has been proposed by a public account. \\[proposal_index, deposit\\]"
          ],
          "args": [
            "U32",
            "U128"
          ]
        },
        {
          "lookup": "0d01",
          "name": "Tabled",
          "docs": [
            "A public proposal has been tabled for referendum vote. \\[proposal_index, deposit,",
            "depositors\\]"
          ],
          "args": [
            "U32",
            "U128",
            "Vec<[U8; 32]>"
          ]
        },
        {
          "lookup": "0d02",
          "name": "ExternalTabled",
          "docs": [
            "An external proposal has been tabled."
          ],
          "args": null
        },
        {
          "lookup": "0d03",
          "name": "Started",
          "docs": [
            "A referendum has begun. \\[ref_index, threshold\\]"
          ],
          "args": [
            "U32",
            "pallet_democracyvote_thresholdVoteThreshold"
          ]
        },
        {
          "lookup": "0d04",
          "name": "Passed",
          "docs": [
            "A proposal has been approved by referendum. \\[ref_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0d05",
          "name": "NotPassed",
          "docs": [
            "A proposal has been rejected by referendum. \\[ref_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0d06",
          "name": "Cancelled",
          "docs": [
            "A referendum has been cancelled. \\[ref_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "0d07",
          "name": "Executed",
          "docs": [
            "A proposal has been enacted. \\[ref_index, result\\]"
          ],
          "args": [
            "U32",
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        },
        {
          "lookup": "0d08",
          "name": "Delegated",
          "docs": [
            "An account has delegated their vote to another account. \\[who, target\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0d09",
          "name": "Undelegated",
          "docs": [
            "An \\[account\\] has cancelled a previous delegation operation."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0d0a",
          "name": "Vetoed",
          "docs": [
            "An external proposal has been vetoed. \\[who, proposal_hash, until\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0d0b",
          "name": "PreimageNoted",
          "docs": [
            "A proposal's preimage was noted, and the deposit taken. \\[proposal_hash, who, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0d0c",
          "name": "PreimageUsed",
          "docs": [
            "A proposal preimage was removed and used (the deposit was returned).",
            "\\[proposal_hash, provider, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "0d0d",
          "name": "PreimageInvalid",
          "docs": [
            "A proposal could not be executed because its preimage was invalid.",
            "\\[proposal_hash, ref_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0d0e",
          "name": "PreimageMissing",
          "docs": [
            "A proposal could not be executed because its preimage was missing.",
            "\\[proposal_hash, ref_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0d0f",
          "name": "PreimageReaped",
          "docs": [
            "A registered preimage was removed and the deposit collected by the reaper.",
            "\\[proposal_hash, provider, deposit, reaper\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0d10",
          "name": "Blacklisted",
          "docs": [
            "A proposal \\[hash\\] has been blacklisted permanently."
          ],
          "args": [
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 49
      },
      "constants": [
        {
          "name": "EnactmentPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00c20100",
          "docs": [
            " The period between a proposal being approved and enacted.",
            "",
            " It should generally be a little more than the unstake period to ensure that",
            " voting stakers have an opportunity to remove themselves from the system in the case",
            " where they are on the losing side of a vote."
          ]
        },
        {
          "name": "LaunchPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "c0890100",
          "docs": [
            " How often (in blocks) new public referenda are launched."
          ]
        },
        {
          "name": "VotingPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "c0890100",
          "docs": [
            " How often (in blocks) to check for new votes."
          ]
        },
        {
          "name": "VoteLockingPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00c20100",
          "docs": [
            " The minimum period of vote locking.",
            "",
            " It should be no shorter than enactment period to ensure that in the case of an approval,",
            " those successful voters are locked into the consequences that their votes entail."
          ]
        },
        {
          "name": "MinimumDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "34a1aec6000000000000000000000000",
          "docs": [
            " The minimum amount to be used as a deposit for a public referendum proposal."
          ]
        },
        {
          "name": "InstantAllowed",
          "type": "Bool",
          "type_value": 55,
          "constants_value": "01",
          "docs": [
            " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
            " want to set this permanently to `false`, others may want to condition it on things such",
            " as an upgrade having happened recently."
          ]
        },
        {
          "name": "FastTrackVotingPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "08070000",
          "docs": [
            " Minimum voting period allowed for a fast-track referendum."
          ]
        },
        {
          "name": "CooloffPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "c0890100",
          "docs": [
            " Period in blocks where an external proposal may not be re-submitted after being vetoed."
          ]
        },
        {
          "name": "PreimageByteDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "12160500000000000000000000000000",
          "docs": [
            " The amount of balance that must be deposited per byte of preimage stored."
          ]
        },
        {
          "name": "MaxVotes",
          "type": "U32",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": [
            " The maximum number of votes for an account.",
            "",
            " Also used to compute weight, an overly big value can",
            " lead to extrinsic with very big weight: see `delegate` for instance."
          ]
        },
        {
          "name": "MaxProposals",
          "type": "U32",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": [
            " The maximum number of public proposals that can exist at any time."
          ]
        }
      ],
      "errors": [
        {
          "name": "ValueLow",
          "doc": [
            "Value too low"
          ]
        },
        {
          "name": "ProposalMissing",
          "doc": [
            "Proposal does not exist"
          ]
        },
        {
          "name": "AlreadyCanceled",
          "doc": [
            "Cannot cancel the same proposal twice"
          ]
        },
        {
          "name": "DuplicateProposal",
          "doc": [
            "Proposal already made"
          ]
        },
        {
          "name": "ProposalBlacklisted",
          "doc": [
            "Proposal still blacklisted"
          ]
        },
        {
          "name": "NotSimpleMajority",
          "doc": [
            "Next external proposal not simple majority"
          ]
        },
        {
          "name": "InvalidHash",
          "doc": [
            "Invalid hash"
          ]
        },
        {
          "name": "NoProposal",
          "doc": [
            "No external proposal"
          ]
        },
        {
          "name": "AlreadyVetoed",
          "doc": [
            "Identity may not veto a proposal twice"
          ]
        },
        {
          "name": "DuplicatePreimage",
          "doc": [
            "Preimage already noted"
          ]
        },
        {
          "name": "NotImminent",
          "doc": [
            "Not imminent"
          ]
        },
        {
          "name": "TooEarly",
          "doc": [
            "Too early"
          ]
        },
        {
          "name": "Imminent",
          "doc": [
            "Imminent"
          ]
        },
        {
          "name": "PreimageMissing",
          "doc": [
            "Preimage not found"
          ]
        },
        {
          "name": "ReferendumInvalid",
          "doc": [
            "Vote given for invalid referendum"
          ]
        },
        {
          "name": "PreimageInvalid",
          "doc": [
            "Invalid preimage"
          ]
        },
        {
          "name": "NoneWaiting",
          "doc": [
            "No proposals waiting"
          ]
        },
        {
          "name": "NotVoter",
          "doc": [
            "The given account did not vote on the referendum."
          ]
        },
        {
          "name": "NoPermission",
          "doc": [
            "The actor has no permission to conduct the action."
          ]
        },
        {
          "name": "AlreadyDelegating",
          "doc": [
            "The account is already delegating."
          ]
        },
        {
          "name": "InsufficientFunds",
          "doc": [
            "Too high a balance was provided that the account cannot afford."
          ]
        },
        {
          "name": "NotDelegating",
          "doc": [
            "The account is not currently delegating."
          ]
        },
        {
          "name": "VotesExist",
          "doc": [
            "The account currently has votes attached to it and the operation cannot succeed until",
            "these are removed, either through `unvote` or `reap_vote`."
          ]
        },
        {
          "name": "InstantNotAllowed",
          "doc": [
            "The instant referendum origin is currently disallowed."
          ]
        },
        {
          "name": "Nonsense",
          "doc": [
            "Delegation to oneself makes no sense."
          ]
        },
        {
          "name": "WrongUpperBound",
          "doc": [
            "Invalid upper bound."
          ]
        },
        {
          "name": "MaxVotesReached",
          "doc": [
            "Maximum number of votes reached."
          ]
        },
        {
          "name": "TooManyProposals",
          "doc": [
            "Maximum number of proposals reached."
          ]
        }
      ],
      "errors_value": {
        "type": 296
      },
      "index": 13
    },
    {
      "name": "Council",
      "prefix": "Council",
      "storage": [
        {
          "name": "Proposals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 297
          },
          "fallback": "0x00",
          "docs": [
            " The hashes of the active proposals."
          ]
        },
        {
          "name": "ProposalOf",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Call",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Actual proposal for a given hash, if it's current."
          ]
        },
        {
          "name": "Voting",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_collectiveVotes",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Votes on a given proposal, if it is ongoing."
          ]
        },
        {
          "name": "ProposalCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Proposals so far."
          ]
        },
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 50
          },
          "fallback": "0x00",
          "docs": [
            " The current members of the collective. This is stored sorted (just by value)."
          ]
        },
        {
          "name": "Prime",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": [
            " The prime member that helps determine the default vote behavior in case of absentations."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0e00",
          "name": "set_members",
          "docs": [
            "Set the collective's membership.",
            "",
            "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
            "- `prime`: The prime member whose vote sets the default.",
            "- `old_count`: The upper bound for the previous number of members in storage. Used for",
            "  weight estimation.",
            "",
            "Requires root origin.",
            "",
            "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
            "      the weight estimations rely on it to estimate dispatchable weight.",
            "",
            "# <weight>",
            "## Weight",
            "- `O(MP + N)` where:",
            "  - `M` old-members-count (code- and governance-bounded)",
            "  - `N` new-members-count (code- and governance-bounded)",
            "  - `P` proposals-count (code-bounded)",
            "- DB:",
            "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
            "    members",
            "  - 1 storage read (codec `O(P)`) for reading the proposals",
            "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
            "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
            "# </weight>"
          ],
          "args": [
            {
              "name": "new_members",
              "type": "Vec<[U8; 32]>"
            },
            {
              "name": "prime",
              "type": "option<[U8; 32]>"
            },
            {
              "name": "old_count",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0e01",
          "name": "execute",
          "docs": [
            "Dispatch a proposal from a member using the `Member` origin.",
            "",
            "Origin must be a member of the collective.",
            "",
            "# <weight>",
            "## Weight",
            "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
            "  `proposal`",
            "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
            "- 1 event",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal",
              "type": "Call"
            },
            {
              "name": "length_bound",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0e02",
          "name": "propose",
          "docs": [
            "Add a new proposal to either be voted on or executed directly.",
            "",
            "Requires the sender to be member.",
            "",
            "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
            "or put up for voting.",
            "",
            "# <weight>",
            "## Weight",
            "- `O(B + M + P1)` or `O(B + M + P2)` where:",
            "  - `B` is `proposal` size in bytes (length-fee-bounded)",
            "  - `M` is members-count (code- and governance-bounded)",
            "  - branching is influenced by `threshold` where:",
            "    - `P1` is proposal execution complexity (`threshold < 2`)",
            "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
            "- DB:",
            "  - 1 storage read `is_member` (codec `O(M)`)",
            "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
            "  - DB accesses influenced by `threshold`:",
            "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
            "    - OR proposal insertion (`threshold <= 2`)",
            "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
            "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
            "      - 1 storage write `ProposalOf` (codec `O(B)`)",
            "      - 1 storage write `Voting` (codec `O(M)`)",
            "  - 1 event",
            "# </weight>"
          ],
          "args": [
            {
              "name": "threshold",
              "type": "compact<U32>"
            },
            {
              "name": "proposal",
              "type": "Call"
            },
            {
              "name": "length_bound",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0e03",
          "name": "vote",
          "docs": [
            "Add an aye or nay vote for the sender to the given proposal.",
            "",
            "Requires the sender to be a member.",
            "",
            "Transaction fees will be waived if the member is voting on any particular proposal",
            "for the first time and the call is successful. Subsequent vote changes will charge a",
            "fee.",
            "# <weight>",
            "## Weight",
            "- `O(M)` where `M` is members-count (code- and governance-bounded)",
            "- DB:",
            "  - 1 storage read `Members` (codec `O(M)`)",
            "  - 1 storage mutation `Voting` (codec `O(M)`)",
            "- 1 event",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "approve",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "0e04",
          "name": "close",
          "docs": [
            "Close a vote that is either approved, disapproved or whose voting period has ended.",
            "",
            "May be called by any signed account in order to finish voting and close the proposal.",
            "",
            "If called before the end of the voting period it will only close the vote if it is",
            "has enough votes to be approved or disapproved.",
            "",
            "If called after the end of the voting period abstentions are counted as rejections",
            "unless there is a prime member set and the prime member cast an approval.",
            "",
            "If the close operation completes successfully with disapproval, the transaction fee will",
            "be waived. Otherwise execution of the approved operation will be charged to the caller.",
            "",
            "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
            "proposal.",
            "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
            "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
            "",
            "# <weight>",
            "## Weight",
            "- `O(B + M + P1 + P2)` where:",
            "  - `B` is `proposal` size in bytes (length-fee-bounded)",
            "  - `M` is members-count (code- and governance-bounded)",
            "  - `P1` is the complexity of `proposal` preimage.",
            "  - `P2` is proposal-count (code-bounded)",
            "- DB:",
            " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
            " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
            "   `O(P2)`)",
            " - any mutations done while executing `proposal` (`P1`)",
            "- up to 3 events",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "proposal_weight_bound",
              "type": "compact<U64>"
            },
            {
              "name": "length_bound",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0e05",
          "name": "disapprove_proposal",
          "docs": [
            "Disapprove a proposal, close, and remove it from the system, regardless of its current",
            "state.",
            "",
            "Must be called by the Root origin.",
            "",
            "Parameters:",
            "* `proposal_hash`: The hash of the proposal that should be disapproved.",
            "",
            "# <weight>",
            "Complexity: O(P) where P is the number of max proposals",
            "DB Weight:",
            "* Reads: Proposals",
            "* Writes: Voting, Proposals, ProposalOf",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 299
      },
      "events": [
        {
          "lookup": "0e00",
          "name": "Proposed",
          "docs": [
            "A motion (given hash) has been proposed (by given account) with a threshold (given",
            "`MemberCount`).",
            "\\[account, proposal_index, proposal_hash, threshold\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0e01",
          "name": "Voted",
          "docs": [
            "A motion (given hash) has been voted on by given account, leaving",
            "a tally (yes votes and no votes given respectively as `MemberCount`).",
            "\\[account, proposal_hash, voted, yes, no\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "Bool",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "0e02",
          "name": "Approved",
          "docs": [
            "A motion was approved by the required threshold.",
            "\\[proposal_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0e03",
          "name": "Disapproved",
          "docs": [
            "A motion was not approved by the required threshold.",
            "\\[proposal_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0e04",
          "name": "Executed",
          "docs": [
            "A motion was executed; result will be `Ok` if it returned without error.",
            "\\[proposal_hash, result\\]"
          ],
          "args": [
            "[U8; 32]",
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        },
        {
          "lookup": "0e05",
          "name": "MemberExecuted",
          "docs": [
            "A single member did some action; result will be `Ok` if it returned without error.",
            "\\[proposal_hash, result\\]"
          ],
          "args": [
            "[U8; 32]",
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        },
        {
          "lookup": "0e06",
          "name": "Closed",
          "docs": [
            "A proposal was closed because its threshold was reached or after its duration was up.",
            "\\[proposal_hash, yes, no\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 54
      },
      "errors": [
        {
          "name": "NotMember",
          "doc": [
            "Account is not a member"
          ]
        },
        {
          "name": "DuplicateProposal",
          "doc": [
            "Duplicate proposals not allowed"
          ]
        },
        {
          "name": "ProposalMissing",
          "doc": [
            "Proposal must exist"
          ]
        },
        {
          "name": "WrongIndex",
          "doc": [
            "Mismatched index"
          ]
        },
        {
          "name": "DuplicateVote",
          "doc": [
            "Duplicate vote ignored"
          ]
        },
        {
          "name": "AlreadyInitialized",
          "doc": [
            "Members are already initialized!"
          ]
        },
        {
          "name": "TooEarly",
          "doc": [
            "The close call was made too early, before the end of the voting."
          ]
        },
        {
          "name": "TooManyProposals",
          "doc": [
            "There can only be a maximum of `MaxProposals` active proposals."
          ]
        },
        {
          "name": "WrongProposalWeight",
          "doc": [
            "The given weight bound for the proposal was too low."
          ]
        },
        {
          "name": "WrongProposalLength",
          "doc": [
            "The given length bound for the proposal was too low."
          ]
        }
      ],
      "errors_value": {
        "type": 527
      },
      "index": 14
    },
    {
      "name": "TechnicalCommittee",
      "prefix": "TechnicalCommittee",
      "storage": [
        {
          "name": "Proposals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 528
          },
          "fallback": "0x00",
          "docs": [
            " The hashes of the active proposals."
          ]
        },
        {
          "name": "ProposalOf",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Call",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Actual proposal for a given hash, if it's current."
          ]
        },
        {
          "name": "Voting",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_collectiveVotes",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Votes on a given proposal, if it is ongoing."
          ]
        },
        {
          "name": "ProposalCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Proposals so far."
          ]
        },
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 50
          },
          "fallback": "0x00",
          "docs": [
            " The current members of the collective. This is stored sorted (just by value)."
          ]
        },
        {
          "name": "Prime",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": [
            " The prime member that helps determine the default vote behavior in case of absentations."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "0f00",
          "name": "set_members",
          "docs": [
            "Set the collective's membership.",
            "",
            "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
            "- `prime`: The prime member whose vote sets the default.",
            "- `old_count`: The upper bound for the previous number of members in storage. Used for",
            "  weight estimation.",
            "",
            "Requires root origin.",
            "",
            "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
            "      the weight estimations rely on it to estimate dispatchable weight.",
            "",
            "# <weight>",
            "## Weight",
            "- `O(MP + N)` where:",
            "  - `M` old-members-count (code- and governance-bounded)",
            "  - `N` new-members-count (code- and governance-bounded)",
            "  - `P` proposals-count (code-bounded)",
            "- DB:",
            "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
            "    members",
            "  - 1 storage read (codec `O(P)`) for reading the proposals",
            "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
            "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
            "# </weight>"
          ],
          "args": [
            {
              "name": "new_members",
              "type": "Vec<[U8; 32]>"
            },
            {
              "name": "prime",
              "type": "option<[U8; 32]>"
            },
            {
              "name": "old_count",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "0f01",
          "name": "execute",
          "docs": [
            "Dispatch a proposal from a member using the `Member` origin.",
            "",
            "Origin must be a member of the collective.",
            "",
            "# <weight>",
            "## Weight",
            "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
            "  `proposal`",
            "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
            "- 1 event",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal",
              "type": "Call"
            },
            {
              "name": "length_bound",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0f02",
          "name": "propose",
          "docs": [
            "Add a new proposal to either be voted on or executed directly.",
            "",
            "Requires the sender to be member.",
            "",
            "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
            "or put up for voting.",
            "",
            "# <weight>",
            "## Weight",
            "- `O(B + M + P1)` or `O(B + M + P2)` where:",
            "  - `B` is `proposal` size in bytes (length-fee-bounded)",
            "  - `M` is members-count (code- and governance-bounded)",
            "  - branching is influenced by `threshold` where:",
            "    - `P1` is proposal execution complexity (`threshold < 2`)",
            "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
            "- DB:",
            "  - 1 storage read `is_member` (codec `O(M)`)",
            "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
            "  - DB accesses influenced by `threshold`:",
            "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
            "    - OR proposal insertion (`threshold <= 2`)",
            "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
            "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
            "      - 1 storage write `ProposalOf` (codec `O(B)`)",
            "      - 1 storage write `Voting` (codec `O(M)`)",
            "  - 1 event",
            "# </weight>"
          ],
          "args": [
            {
              "name": "threshold",
              "type": "compact<U32>"
            },
            {
              "name": "proposal",
              "type": "Call"
            },
            {
              "name": "length_bound",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0f03",
          "name": "vote",
          "docs": [
            "Add an aye or nay vote for the sender to the given proposal.",
            "",
            "Requires the sender to be a member.",
            "",
            "Transaction fees will be waived if the member is voting on any particular proposal",
            "for the first time and the call is successful. Subsequent vote changes will charge a",
            "fee.",
            "# <weight>",
            "## Weight",
            "- `O(M)` where `M` is members-count (code- and governance-bounded)",
            "- DB:",
            "  - 1 storage read `Members` (codec `O(M)`)",
            "  - 1 storage mutation `Voting` (codec `O(M)`)",
            "- 1 event",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "approve",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "0f04",
          "name": "close",
          "docs": [
            "Close a vote that is either approved, disapproved or whose voting period has ended.",
            "",
            "May be called by any signed account in order to finish voting and close the proposal.",
            "",
            "If called before the end of the voting period it will only close the vote if it is",
            "has enough votes to be approved or disapproved.",
            "",
            "If called after the end of the voting period abstentions are counted as rejections",
            "unless there is a prime member set and the prime member cast an approval.",
            "",
            "If the close operation completes successfully with disapproval, the transaction fee will",
            "be waived. Otherwise execution of the approved operation will be charged to the caller.",
            "",
            "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
            "proposal.",
            "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
            "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
            "",
            "# <weight>",
            "## Weight",
            "- `O(B + M + P1 + P2)` where:",
            "  - `B` is `proposal` size in bytes (length-fee-bounded)",
            "  - `M` is members-count (code- and governance-bounded)",
            "  - `P1` is the complexity of `proposal` preimage.",
            "  - `P2` is proposal-count (code-bounded)",
            "- DB:",
            " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
            " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
            "   `O(P2)`)",
            " - any mutations done while executing `proposal` (`P1`)",
            "- up to 3 events",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "proposal_weight_bound",
              "type": "compact<U64>"
            },
            {
              "name": "length_bound",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "0f05",
          "name": "disapprove_proposal",
          "docs": [
            "Disapprove a proposal, close, and remove it from the system, regardless of its current",
            "state.",
            "",
            "Must be called by the Root origin.",
            "",
            "Parameters:",
            "* `proposal_hash`: The hash of the proposal that should be disapproved.",
            "",
            "# <weight>",
            "Complexity: O(P) where P is the number of max proposals",
            "DB Weight:",
            "* Reads: Proposals",
            "* Writes: Voting, Proposals, ProposalOf",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal_hash",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 300
      },
      "events": [
        {
          "lookup": "0f00",
          "name": "Proposed",
          "docs": [
            "A motion (given hash) has been proposed (by given account) with a threshold (given",
            "`MemberCount`).",
            "\\[account, proposal_index, proposal_hash, threshold\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "0f01",
          "name": "Voted",
          "docs": [
            "A motion (given hash) has been voted on by given account, leaving",
            "a tally (yes votes and no votes given respectively as `MemberCount`).",
            "\\[account, proposal_hash, voted, yes, no\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "Bool",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "0f02",
          "name": "Approved",
          "docs": [
            "A motion was approved by the required threshold.",
            "\\[proposal_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0f03",
          "name": "Disapproved",
          "docs": [
            "A motion was not approved by the required threshold.",
            "\\[proposal_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "0f04",
          "name": "Executed",
          "docs": [
            "A motion was executed; result will be `Ok` if it returned without error.",
            "\\[proposal_hash, result\\]"
          ],
          "args": [
            "[U8; 32]",
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        },
        {
          "lookup": "0f05",
          "name": "MemberExecuted",
          "docs": [
            "A single member did some action; result will be `Ok` if it returned without error.",
            "\\[proposal_hash, result\\]"
          ],
          "args": [
            "[U8; 32]",
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        },
        {
          "lookup": "0f06",
          "name": "Closed",
          "docs": [
            "A proposal was closed because its threshold was reached or after its duration was up.",
            "\\[proposal_hash, yes, no\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 56
      },
      "errors": [
        {
          "name": "NotMember",
          "doc": [
            "Account is not a member"
          ]
        },
        {
          "name": "DuplicateProposal",
          "doc": [
            "Duplicate proposals not allowed"
          ]
        },
        {
          "name": "ProposalMissing",
          "doc": [
            "Proposal must exist"
          ]
        },
        {
          "name": "WrongIndex",
          "doc": [
            "Mismatched index"
          ]
        },
        {
          "name": "DuplicateVote",
          "doc": [
            "Duplicate vote ignored"
          ]
        },
        {
          "name": "AlreadyInitialized",
          "doc": [
            "Members are already initialized!"
          ]
        },
        {
          "name": "TooEarly",
          "doc": [
            "The close call was made too early, before the end of the voting."
          ]
        },
        {
          "name": "TooManyProposals",
          "doc": [
            "There can only be a maximum of `MaxProposals` active proposals."
          ]
        },
        {
          "name": "WrongProposalWeight",
          "doc": [
            "The given weight bound for the proposal was too low."
          ]
        },
        {
          "name": "WrongProposalLength",
          "doc": [
            "The given length bound for the proposal was too low."
          ]
        }
      ],
      "errors_value": {
        "type": 529
      },
      "index": 15
    },
    {
      "name": "PhragmenElection",
      "prefix": "PhragmenElection",
      "storage": [
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<pallet_elections_phragmenSeatHolder>",
            "PlainTypeValue": 530
          },
          "fallback": "0x00",
          "docs": [
            " The current elected members.",
            "",
            " Invariant: Always sorted based on account id."
          ]
        },
        {
          "name": "RunnersUp",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<pallet_elections_phragmenSeatHolder>",
            "PlainTypeValue": 530
          },
          "fallback": "0x00",
          "docs": [
            " The current reserved runners-up.",
            "",
            " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
            " last (i.e. _best_) runner-up will be replaced."
          ]
        },
        {
          "name": "Candidates",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<Tuple[U8; 32]U128>",
            "PlainTypeValue": 58
          },
          "fallback": "0x00",
          "docs": [
            " The present candidate list. A current member or runner-up can never enter this vector",
            " and is always implicitly assumed to be a candidate.",
            "",
            " Second element is the deposit.",
            "",
            " Invariant: Always sorted based on account id."
          ]
        },
        {
          "name": "ElectionRounds",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The total number of vote rounds that have happened, excluding the upcoming one."
          ]
        },
        {
          "name": "Voting",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_elections_phragmenVoter",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " Votes and locked stake of a particular voter.",
            "",
            " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1000",
          "name": "vote",
          "docs": [
            "Vote for a set of candidates for the upcoming round of election. This can be called to",
            "set the initial votes, or update already existing votes.",
            "",
            "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
            "reserved. The deposit is based on the number of votes and can be updated over time.",
            "",
            "The `votes` should:",
            "  - not be empty.",
            "  - be less than the number of possible candidates. Note that all current members and",
            "    runners-up are also automatically candidates for the next round.",
            "",
            "If `value` is more than `who`'s total balance, then the maximum of the two is used.",
            "",
            "The dispatch origin of this call must be signed.",
            "",
            "### Warning",
            "",
            "It is the responsibility of the caller to **NOT** place all of their balance into the",
            "lock and keep some for further operations.",
            "",
            "# <weight>",
            "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "votes",
              "type": "Vec<[U8; 32]>"
            },
            {
              "name": "value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "1001",
          "name": "remove_voter",
          "docs": [
            "Remove `origin` as a voter.",
            "",
            "This removes the lock and returns the deposit.",
            "",
            "The dispatch origin of this call must be signed and be a voter."
          ],
          "args": null
        },
        {
          "lookup": "1002",
          "name": "submit_candidacy",
          "docs": [
            "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
            "",
            "All candidates are wiped at the end of the term. They either become a member/runner-up,",
            "or leave the system while their deposit is slashed.",
            "",
            "The dispatch origin of this call must be signed.",
            "",
            "### Warning",
            "",
            "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
            "to get their deposit back. Losing the spot in an election will always lead to a slash.",
            "",
            "# <weight>",
            "The number of current candidates must be provided as witness data.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "candidate_count",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "1003",
          "name": "renounce_candidacy",
          "docs": [
            "Renounce one's intention to be a candidate for the next election round. 3 potential",
            "outcomes exist:",
            "",
            "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
            "  unreserved, returned and origin is removed as a candidate.",
            "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
            "  origin is removed as a runner-up.",
            "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
            "  removed as a member, consequently not being a candidate for the next round anymore.",
            "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
            "  are immediately used. If the prime is renouncing, then no prime will exist until the",
            "  next round.",
            "",
            "The dispatch origin of this call must be signed, and have one of the above roles.",
            "",
            "# <weight>",
            "The type of renouncing must be provided as witness data.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "renouncing",
              "type": "pallet_elections_phragmenRenouncing"
            }
          ]
        },
        {
          "lookup": "1004",
          "name": "remove_member",
          "docs": [
            "Remove a particular member from the set. This is effective immediately and the bond of",
            "the outgoing member is slashed.",
            "",
            "If a runner-up is available, then the best runner-up will be removed and replaces the",
            "outgoing member. Otherwise, a new phragmen election is started.",
            "",
            "The dispatch origin of this call must be root.",
            "",
            "Note that this does not affect the designated block number of the next election.",
            "",
            "# <weight>",
            "If we have a replacement, we use a small weight. Else, since this is a root call and",
            "will go into phragmen, we assume full block for now.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "who",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "has_replacement",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "1005",
          "name": "clean_defunct_voters",
          "docs": [
            "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
            "deposit of the removed voters are returned.",
            "",
            "This is an root function to be used only for cleaning the state.",
            "",
            "The dispatch origin of this call must be root.",
            "",
            "# <weight>",
            "The total number of voters and those that are defunct must be provided as witness data.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "num_voters",
              "type": "U32"
            },
            {
              "name": "num_defunct",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 301
      },
      "events": [
        {
          "lookup": "1000",
          "name": "NewTerm",
          "docs": [
            "A new term with \\[new_members\\]. This indicates that enough candidates existed to run",
            "the election, not that enough have has been elected. The inner value must be examined",
            "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
            "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
            "begin with."
          ],
          "args": [
            "Vec<Tuple[U8; 32]U128>"
          ]
        },
        {
          "lookup": "1001",
          "name": "EmptyTerm",
          "docs": [
            "No (or not enough) candidates existed for this round. This is different from",
            "`NewTerm(\\[\\])`. See the description of `NewTerm`."
          ],
          "args": null
        },
        {
          "lookup": "1002",
          "name": "ElectionError",
          "docs": [
            "Internal error happened while trying to perform election."
          ],
          "args": null
        },
        {
          "lookup": "1003",
          "name": "MemberKicked",
          "docs": [
            "A \\[member\\] has been removed. This should always be followed by either `NewTerm` or",
            "`EmptyTerm`."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1004",
          "name": "Renounced",
          "docs": [
            "Someone has renounced their candidacy."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1005",
          "name": "CandidateSlashed",
          "docs": [
            "A \\[candidate\\] was slashed by \\[amount\\] due to failing to obtain a seat as member or",
            "runner-up.",
            "",
            "Note that old members and runners-up are also candidates."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1006",
          "name": "SeatHolderSlashed",
          "docs": [
            "A \\[seat holder\\] was slashed by \\[amount\\] by being forcefully removed from the set."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 57
      },
      "constants": [
        {
          "name": "PalletId",
          "type": "[U8; 8]",
          "type_value": 125,
          "constants_value": "phrelect",
          "docs": [
            " Identifier for the elections-phragmen pallet's lock"
          ]
        },
        {
          "name": "CandidacyBond",
          "type": "U128",
          "type_value": 6,
          "constants_value": "34a1aec6000000000000000000000000",
          "docs": [
            " How much should be locked up in order to submit one's candidacy."
          ]
        },
        {
          "name": "VotingBondBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "10c55b920f0000000000000000000000",
          "docs": [
            " Base deposit associated with voting.",
            "",
            " This should be sensibly high to economically ensure the pallet cannot be attacked by",
            " creating a gigantic number of votes."
          ]
        },
        {
          "name": "VotingBondFactor",
          "type": "U128",
          "type_value": 6,
          "constants_value": "80965b06000000000000000000000000",
          "docs": [
            " The amount of bond that need to be locked for each vote (32 bytes)."
          ]
        },
        {
          "name": "DesiredMembers",
          "type": "U32",
          "type_value": 4,
          "constants_value": "13000000",
          "docs": [
            " Number of members to elect."
          ]
        },
        {
          "name": "DesiredRunnersUp",
          "type": "U32",
          "type_value": 4,
          "constants_value": "13000000",
          "docs": [
            " Number of runners_up to keep."
          ]
        },
        {
          "name": "TermDuration",
          "type": "U32",
          "type_value": 4,
          "constants_value": "40380000",
          "docs": [
            " How long each seat is kept. This defines the next block number at which an election",
            " round will happen. If set to zero, no elections are ever triggered and the module will",
            " be in passive mode."
          ]
        }
      ],
      "errors": [
        {
          "name": "UnableToVote",
          "doc": [
            "Cannot vote when no candidates or members exist."
          ]
        },
        {
          "name": "NoVotes",
          "doc": [
            "Must vote for at least one candidate."
          ]
        },
        {
          "name": "TooManyVotes",
          "doc": [
            "Cannot vote more than candidates."
          ]
        },
        {
          "name": "MaximumVotesExceeded",
          "doc": [
            "Cannot vote more than maximum allowed."
          ]
        },
        {
          "name": "LowBalance",
          "doc": [
            "Cannot vote with stake less than minimum balance."
          ]
        },
        {
          "name": "UnableToPayBond",
          "doc": [
            "Voter can not pay voting bond."
          ]
        },
        {
          "name": "MustBeVoter",
          "doc": [
            "Must be a voter."
          ]
        },
        {
          "name": "ReportSelf",
          "doc": [
            "Cannot report self."
          ]
        },
        {
          "name": "DuplicatedCandidate",
          "doc": [
            "Duplicated candidate submission."
          ]
        },
        {
          "name": "MemberSubmit",
          "doc": [
            "Member cannot re-submit candidacy."
          ]
        },
        {
          "name": "RunnerUpSubmit",
          "doc": [
            "Runner cannot re-submit candidacy."
          ]
        },
        {
          "name": "InsufficientCandidateFunds",
          "doc": [
            "Candidate does not have enough funds."
          ]
        },
        {
          "name": "NotMember",
          "doc": [
            "Not a member."
          ]
        },
        {
          "name": "InvalidWitnessData",
          "doc": [
            "The provided count of number of candidates is incorrect."
          ]
        },
        {
          "name": "InvalidVoteCount",
          "doc": [
            "The provided count of number of votes is incorrect."
          ]
        },
        {
          "name": "InvalidRenouncing",
          "doc": [
            "The renouncing origin presented a wrong `Renouncing` parameter."
          ]
        },
        {
          "name": "InvalidReplacement",
          "doc": [
            "Prediction regarding replacement after member removal is wrong."
          ]
        }
      ],
      "errors_value": {
        "type": 533
      },
      "index": 16
    },
    {
      "name": "TechnicalMembership",
      "prefix": "TechnicalMembership",
      "storage": [
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 50
          },
          "fallback": "0x00",
          "docs": [
            " The current membership, stored as an ordered Vec."
          ]
        },
        {
          "name": "Prime",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": [
            " The current prime member, if one exists."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1100",
          "name": "add_member",
          "docs": [
            "Add a member `who` to the set.",
            "",
            "May only be called from `T::AddOrigin`."
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1101",
          "name": "remove_member",
          "docs": [
            "Remove a member `who` from the set.",
            "",
            "May only be called from `T::RemoveOrigin`."
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1102",
          "name": "swap_member",
          "docs": [
            "Swap out one member `remove` for another `add`.",
            "",
            "May only be called from `T::SwapOrigin`.",
            "",
            "Prime membership is *not* passed from `remove` to `add`, if extant."
          ],
          "args": [
            {
              "name": "remove",
              "type": "[U8; 32]"
            },
            {
              "name": "add",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1103",
          "name": "reset_members",
          "docs": [
            "Change the membership to a new set, disregarding the existing membership. Be nice and",
            "pass `members` pre-sorted.",
            "",
            "May only be called from `T::ResetOrigin`."
          ],
          "args": [
            {
              "name": "members",
              "type": "Vec<[U8; 32]>"
            }
          ]
        },
        {
          "lookup": "1104",
          "name": "change_key",
          "docs": [
            "Swap out the sending member for some other key `new`.",
            "",
            "May only be called from `Signed` origin of a current member.",
            "",
            "Prime membership is passed from the origin account to `new`, if extant."
          ],
          "args": [
            {
              "name": "new",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1105",
          "name": "set_prime",
          "docs": [
            "Set the prime member. Must be a current member.",
            "",
            "May only be called from `T::PrimeOrigin`."
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1106",
          "name": "clear_prime",
          "docs": [
            "Remove the prime member if it exists.",
            "",
            "May only be called from `T::PrimeOrigin`."
          ],
          "args": null
        }
      ],
      "calls_value": {
        "type": 303
      },
      "events": [
        {
          "lookup": "1100",
          "name": "MemberAdded",
          "docs": [
            "The given member was added; see the transaction for who."
          ],
          "args": null
        },
        {
          "lookup": "1101",
          "name": "MemberRemoved",
          "docs": [
            "The given member was removed; see the transaction for who."
          ],
          "args": null
        },
        {
          "lookup": "1102",
          "name": "MembersSwapped",
          "docs": [
            "Two members were swapped; see the transaction for who."
          ],
          "args": null
        },
        {
          "lookup": "1103",
          "name": "MembersReset",
          "docs": [
            "The membership was reset; see the transaction for who the new set is."
          ],
          "args": null
        },
        {
          "lookup": "1104",
          "name": "KeyChanged",
          "docs": [
            "One of the members' keys changed."
          ],
          "args": null
        },
        {
          "lookup": "1105",
          "name": "Dummy",
          "docs": [
            "Phantom member, never used."
          ],
          "args": null
        }
      ],
      "events_value": {
        "type": 60
      },
      "errors": [
        {
          "name": "AlreadyMember",
          "doc": [
            "Already a member."
          ]
        },
        {
          "name": "NotMember",
          "doc": [
            "Not a member."
          ]
        }
      ],
      "errors_value": {
        "type": 534
      },
      "index": 17
    },
    {
      "name": "Treasury",
      "prefix": "Treasury",
      "storage": [
        {
          "name": "ProposalCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Number of proposals that have been made."
          ]
        },
        {
          "name": "Proposals",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "pallet_treasuryProposal",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Proposals that have been made."
          ]
        },
        {
          "name": "Approvals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<U32>",
            "PlainTypeValue": 536
          },
          "fallback": "0x00",
          "docs": [
            " Proposal indices that have been approved but not yet awarded."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1200",
          "name": "propose_spend",
          "docs": [
            "Put forward a suggestion for spending. A deposit proportional to the value",
            "is reserved and slashed if the proposal is rejected. It is returned once the",
            "proposal is awarded.",
            "",
            "# <weight>",
            "- Complexity: O(1)",
            "- DbReads: `ProposalCount`, `origin account`",
            "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "value",
              "type": "compact<U128>"
            },
            {
              "name": "beneficiary",
              "type": "sp_runtimemultiaddressMultiAddress"
            }
          ]
        },
        {
          "lookup": "1201",
          "name": "reject_proposal",
          "docs": [
            "Reject a proposed spend. The original deposit will be slashed.",
            "",
            "May only be called from `T::RejectOrigin`.",
            "",
            "# <weight>",
            "- Complexity: O(1)",
            "- DbReads: `Proposals`, `rejected proposer account`",
            "- DbWrites: `Proposals`, `rejected proposer account`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal_id",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "1202",
          "name": "approve_proposal",
          "docs": [
            "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
            "and the original deposit will be returned.",
            "",
            "May only be called from `T::ApproveOrigin`.",
            "",
            "# <weight>",
            "- Complexity: O(1).",
            "- DbReads: `Proposals`, `Approvals`",
            "- DbWrite: `Approvals`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "proposal_id",
              "type": "compact<U32>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 304
      },
      "events": [
        {
          "lookup": "1200",
          "name": "Proposed",
          "docs": [
            "New proposal. \\[proposal_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "1201",
          "name": "Spending",
          "docs": [
            "We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
          ],
          "args": [
            "U128"
          ]
        },
        {
          "lookup": "1202",
          "name": "Awarded",
          "docs": [
            "Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
          ],
          "args": [
            "U32",
            "U128",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1203",
          "name": "Rejected",
          "docs": [
            "A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
          ],
          "args": [
            "U32",
            "U128"
          ]
        },
        {
          "lookup": "1204",
          "name": "Burnt",
          "docs": [
            "Some of our funds have been burnt. \\[burn\\]"
          ],
          "args": [
            "U128"
          ]
        },
        {
          "lookup": "1205",
          "name": "Rollover",
          "docs": [
            "Spending has finished; this is the amount that rolls over until next spend.",
            "\\[budget_remaining\\]"
          ],
          "args": [
            "U128"
          ]
        },
        {
          "lookup": "1206",
          "name": "Deposit",
          "docs": [
            "Some funds have been deposited. \\[deposit\\]"
          ],
          "args": [
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 61
      },
      "constants": [
        {
          "name": "ProposalBond",
          "type": "U32",
          "type_value": 537,
          "constants_value": "50c30000",
          "docs": [
            " Fraction of a proposal's value that should be bonded in order to place the proposal.",
            " An accepted proposal gets these back. A rejected proposal does not."
          ]
        },
        {
          "name": "ProposalBondMinimum",
          "type": "U128",
          "type_value": 6,
          "constants_value": "1098a4850f0000000000000000000000",
          "docs": [
            " Minimum amount of funds that should be placed in a deposit for making a proposal."
          ]
        },
        {
          "name": "SpendPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "80510100",
          "docs": [
            " Period between successive spends."
          ]
        },
        {
          "name": "Burn",
          "type": "U32",
          "type_value": 537,
          "constants_value": "d0070000",
          "docs": [
            " Percentage of spare funds (if any) that are burnt per spend period."
          ]
        },
        {
          "name": "PalletId",
          "type": "[U8; 8]",
          "type_value": 538,
          "constants_value": "py/trsry",
          "docs": [
            " The treasury's pallet id, used for deriving its sovereign account ID."
          ]
        },
        {
          "name": "MaxApprovals",
          "type": "U32",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": [
            " The maximum number of approvals that can wait in the spending queue."
          ]
        }
      ],
      "errors": [
        {
          "name": "InsufficientProposersBalance",
          "doc": [
            "Proposer's balance is too low."
          ]
        },
        {
          "name": "InvalidIndex",
          "doc": [
            "No proposal or bounty at that index."
          ]
        },
        {
          "name": "TooManyApprovals",
          "doc": [
            "Too many approvals in the queue."
          ]
        }
      ],
      "errors_value": {
        "type": 539
      },
      "index": 18
    },
    {
      "name": "Claims",
      "prefix": "Claims",
      "storage": [
        {
          "name": "Claims",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 20]"
              ],
              "value": "U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "Total",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U128",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": null
        },
        {
          "name": "Vesting",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 20]"
              ],
              "value": "TupleU128U128U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Vesting schedule for a claim.",
            " First balance is the total amount that should be held for vesting.",
            " Second balance is how much should be unlocked per block.",
            " The block number is when the vesting should start."
          ]
        },
        {
          "name": "Signing",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 20]"
              ],
              "value": "polkadot_runtime_commonclaimsStatementKind",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The statement kind that must be signed, if any."
          ]
        },
        {
          "name": "Preclaims",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "[U8; 20]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1300",
          "name": "claim",
          "docs": [
            "Make a claim to collect your DOTs.",
            "",
            "The dispatch origin for this call must be _None_.",
            "",
            "Unsigned Validation:",
            "A call to claim is deemed valid if the signature provided matches",
            "the expected signed message of:",
            "",
            "> Ethereum Signed Message:",
            "> (configured prefix string)(address)",
            "",
            "and `address` matches the `dest` account.",
            "",
            "Parameters:",
            "- `dest`: The destination account to payout the claim.",
            "- `ethereum_signature`: The signature of an ethereum signed message",
            "   matching the format described above.",
            "",
            "<weight>",
            "The weight of this call is invariant over the input parameters.",
            "Weight includes logic to validate unsigned `claim` call.",
            "",
            "Total Complexity: O(1)",
            "</weight>"
          ],
          "args": [
            {
              "name": "dest",
              "type": "[U8; 32]"
            },
            {
              "name": "ethereum_signature",
              "type": "[U8; 65]"
            }
          ]
        },
        {
          "lookup": "1301",
          "name": "mint_claim",
          "docs": [
            "Mint a new claim to collect DOTs.",
            "",
            "The dispatch origin for this call must be _Root_.",
            "",
            "Parameters:",
            "- `who`: The Ethereum address allowed to collect this claim.",
            "- `value`: The number of DOTs that will be claimed.",
            "- `vesting_schedule`: An optional vesting schedule for these DOTs.",
            "",
            "<weight>",
            "The weight of this call is invariant over the input parameters.",
            "We assume worst case that both vesting and statement is being inserted.",
            "",
            "Total Complexity: O(1)",
            "</weight>"
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 20]"
            },
            {
              "name": "value",
              "type": "U128"
            },
            {
              "name": "vesting_schedule",
              "type": "option<TupleU128U128U32>"
            },
            {
              "name": "statement",
              "type": "option<polkadot_runtime_commonclaimsStatementKind>"
            }
          ]
        },
        {
          "lookup": "1302",
          "name": "claim_attest",
          "docs": [
            "Make a claim to collect your DOTs by signing a statement.",
            "",
            "The dispatch origin for this call must be _None_.",
            "",
            "Unsigned Validation:",
            "A call to `claim_attest` is deemed valid if the signature provided matches",
            "the expected signed message of:",
            "",
            "> Ethereum Signed Message:",
            "> (configured prefix string)(address)(statement)",
            "",
            "and `address` matches the `dest` account; the `statement` must match that which is",
            "expected according to your purchase arrangement.",
            "",
            "Parameters:",
            "- `dest`: The destination account to payout the claim.",
            "- `ethereum_signature`: The signature of an ethereum signed message",
            "   matching the format described above.",
            "- `statement`: The identity of the statement which is being attested to in the signature.",
            "",
            "<weight>",
            "The weight of this call is invariant over the input parameters.",
            "Weight includes logic to validate unsigned `claim_attest` call.",
            "",
            "Total Complexity: O(1)",
            "</weight>"
          ],
          "args": [
            {
              "name": "dest",
              "type": "[U8; 32]"
            },
            {
              "name": "ethereum_signature",
              "type": "[U8; 65]"
            },
            {
              "name": "statement",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "1303",
          "name": "attest",
          "docs": [
            "Attest to a statement, needed to finalize the claims process.",
            "",
            "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a `SignedExtension`.",
            "",
            "Unsigned Validation:",
            "A call to attest is deemed valid if the sender has a `Preclaim` registered",
            "and provides a `statement` which is expected for the account.",
            "",
            "Parameters:",
            "- `statement`: The identity of the statement which is being attested to in the signature.",
            "",
            "<weight>",
            "The weight of this call is invariant over the input parameters.",
            "Weight includes logic to do pre-validation on `attest` call.",
            "",
            "Total Complexity: O(1)",
            "</weight>"
          ],
          "args": [
            {
              "name": "statement",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "1304",
          "name": "move_claim",
          "docs": null,
          "args": [
            {
              "name": "old",
              "type": "[U8; 20]"
            },
            {
              "name": "new",
              "type": "[U8; 20]"
            },
            {
              "name": "maybe_preclaim",
              "type": "option<[U8; 32]>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 305
      },
      "events": [
        {
          "lookup": "1300",
          "name": "Claimed",
          "docs": [
            "Someone claimed some DOTs. `[who, ethereum_address, amount]`"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 20]",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 62
      },
      "constants": [
        {
          "name": "Prefix",
          "type": "Vec<U8>",
          "type_value": 10,
          "constants_value": "|Pay KSMs to the Kusama account:",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "InvalidEthereumSignature",
          "doc": [
            "Invalid Ethereum signature."
          ]
        },
        {
          "name": "SignerHasNoClaim",
          "doc": [
            "Ethereum address has no claim."
          ]
        },
        {
          "name": "SenderHasNoClaim",
          "doc": [
            "Account ID sending transaction has no claim."
          ]
        },
        {
          "name": "PotUnderflow",
          "doc": [
            "There's not enough in the pot to pay out some unvested amount. Generally implies a logic",
            "error."
          ]
        },
        {
          "name": "InvalidStatement",
          "doc": [
            "A needed statement was not included."
          ]
        },
        {
          "name": "VestedBalanceExists",
          "doc": [
            "The account already has a vested balance."
          ]
        }
      ],
      "errors_value": {
        "type": 540
      },
      "index": 19
    },
    {
      "name": "Utility",
      "prefix": "",
      "storage": null,
      "calls": [
        {
          "lookup": "1800",
          "name": "batch",
          "docs": [
            "Send a batch of dispatch calls.",
            "",
            "May be called from any origin.",
            "",
            "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
            "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
            "",
            "If origin is root then call are dispatch without checking origin filter. (This includes",
            "bypassing `frame_system::Config::BaseCallFilter`).",
            "",
            "# <weight>",
            "- Complexity: O(C) where C is the number of calls to be batched.",
            "# </weight>",
            "",
            "This will return `Ok` in all circumstances. To determine the success of the batch, an",
            "event is deposited. If a call failed and the batch was interrupted, then the",
            "`BatchInterrupted` event is deposited, along with the number of successful calls made",
            "and the error of the failed call. If all were successful, then the `BatchCompleted`",
            "event is deposited."
          ],
          "args": [
            {
              "name": "calls",
              "type": "Vec<Call>"
            }
          ]
        },
        {
          "lookup": "1801",
          "name": "as_derivative",
          "docs": [
            "Send a call through an indexed pseudonym of the sender.",
            "",
            "Filter from origin are passed along. The call will be dispatched with an origin which",
            "use the same filter as the origin of this call.",
            "",
            "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
            "because you expect `proxy` to have been used prior in the call stack and you do not want",
            "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
            "in the Multisig pallet instead.",
            "",
            "NOTE: Prior to version *12, this was called `as_limited_sub`.",
            "",
            "The dispatch origin for this call must be _Signed_."
          ],
          "args": [
            {
              "name": "index",
              "type": "U16"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1802",
          "name": "batch_all",
          "docs": [
            "Send a batch of dispatch calls and atomically execute them.",
            "The whole transaction will rollback and fail if any of the calls failed.",
            "",
            "May be called from any origin.",
            "",
            "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
            "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
            "",
            "If origin is root then call are dispatch without checking origin filter. (This includes",
            "bypassing `frame_system::Config::BaseCallFilter`).",
            "",
            "# <weight>",
            "- Complexity: O(C) where C is the number of calls to be batched.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "calls",
              "type": "Vec<Call>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 312
      },
      "events": [
        {
          "lookup": "1800",
          "name": "BatchInterrupted",
          "docs": [
            "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
            "well as the error. \\[index, error\\]"
          ],
          "args": [
            "U32",
            "sp_runtimeDispatchError"
          ]
        },
        {
          "lookup": "1801",
          "name": "BatchCompleted",
          "docs": [
            "Batch of dispatches completed fully with no error."
          ],
          "args": null
        },
        {
          "lookup": "1802",
          "name": "ItemCompleted",
          "docs": [
            "A single item within a Batch of dispatches has completed with no error."
          ],
          "args": null
        }
      ],
      "events_value": {
        "type": 65
      },
      "constants": [
        {
          "name": "batched_calls_limit",
          "type": "U32",
          "type_value": 4,
          "constants_value": "0dd20000",
          "docs": [
            " The limit on the number of batched calls."
          ]
        }
      ],
      "errors": [
        {
          "name": "TooManyCalls",
          "doc": [
            "Too many calls batched."
          ]
        }
      ],
      "errors_value": {
        "type": 541
      },
      "index": 24
    },
    {
      "name": "Identity",
      "prefix": "Identity",
      "storage": [
        {
          "name": "IdentityOf",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_identitytypesRegistration",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Information that is pertinent to identify the entity behind an account.",
            "",
            "2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
          ]
        },
        {
          "name": "SuperOf",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Tuple[U8; 32]pallet_identitytypesData",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The super-identity of an alternative \"sub\" identity together with its name, within that",
            " context. If the account is not some other account's sub-identity, then just `None`."
          ]
        },
        {
          "name": "SubsOf",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "TupleU128Vec<[U8; 32]>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000000000000000000000",
          "docs": [
            " Alternative \"sub\" identities of this account.",
            "",
            " The first item is the deposit, the second is a vector of the accounts.",
            "",
            "2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
          ]
        },
        {
          "name": "Registrars",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<option<pallet_identitytypesRegistrarInfo>>",
            "PlainTypeValue": 548
          },
          "fallback": "0x00",
          "docs": [
            " The set of registrars. Not expected to get very big as can only be added through a",
            " special origin (likely a council motion).",
            "",
            " The index into this can be cast to `RegistrarIndex` to get a valid value."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1900",
          "name": "add_registrar",
          "docs": [
            "Add a registrar to the system.",
            "",
            "The dispatch origin for this call must be `T::RegistrarOrigin`.",
            "",
            "- `account`: the account of the registrar.",
            "",
            "Emits `RegistrarAdded` if successful.",
            "",
            "# <weight>",
            "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
            "- One storage mutation (codec `O(R)`).",
            "- One event.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1901",
          "name": "set_identity",
          "docs": [
            "Set an account's identity information and reserve the appropriate deposit.",
            "",
            "If the account already has identity information, the deposit is taken as part payment",
            "for the new deposit.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `info`: The identity information.",
            "",
            "Emits `IdentitySet` if successful.",
            "",
            "# <weight>",
            "- `O(X + X' + R)`",
            "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
            "  - where `R` judgements-count (registrar-count-bounded)",
            "- One balance reserve operation.",
            "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
            "- One event.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "info",
              "type": "pallet_identitytypesIdentityInfo"
            }
          ]
        },
        {
          "lookup": "1902",
          "name": "set_subs",
          "docs": [
            "Set the sub-accounts of the sender.",
            "",
            "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
            "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
            "identity.",
            "",
            "- `subs`: The identity's (new) sub-accounts.",
            "",
            "# <weight>",
            "- `O(P + S)`",
            "  - where `P` old-subs-count (hard- and deposit-bounded).",
            "  - where `S` subs-count (hard- and deposit-bounded).",
            "- At most one balance operations.",
            "- DB:",
            "  - `P + S` storage mutations (codec complexity `O(1)`)",
            "  - One storage read (codec complexity `O(P)`).",
            "  - One storage write (codec complexity `O(S)`).",
            "  - One storage-exists (`IdentityOf::contains_key`).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "subs",
              "type": "Vec<Tuple[U8; 32]pallet_identitytypesData>"
            }
          ]
        },
        {
          "lookup": "1903",
          "name": "clear_identity",
          "docs": [
            "Clear an account's identity info and all sub-accounts and return all deposits.",
            "",
            "Payment: All reserved balances on the account are returned.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
            "identity.",
            "",
            "Emits `IdentityCleared` if successful.",
            "",
            "# <weight>",
            "- `O(R + S + X)`",
            "  - where `R` registrar-count (governance-bounded).",
            "  - where `S` subs-count (hard- and deposit-bounded).",
            "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
            "- One balance-unreserve operation.",
            "- `2` storage reads and `S + 2` storage deletions.",
            "- One event.",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "1904",
          "name": "request_judgement",
          "docs": [
            "Request a judgement from a registrar.",
            "",
            "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
            "given.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have a",
            "registered identity.",
            "",
            "- `reg_index`: The index of the registrar whose judgement is requested.",
            "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
            "",
            "```nocompile",
            "Self::registrars().get(reg_index).unwrap().fee",
            "```",
            "",
            "Emits `JudgementRequested` if successful.",
            "",
            "# <weight>",
            "- `O(R + X)`.",
            "- One balance-reserve operation.",
            "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
            "- One event.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "reg_index",
              "type": "compact<U32>"
            },
            {
              "name": "max_fee",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "1905",
          "name": "cancel_request",
          "docs": [
            "Cancel a previous request.",
            "",
            "Payment: A previously reserved deposit is returned on success.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have a",
            "registered identity.",
            "",
            "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
            "",
            "Emits `JudgementUnrequested` if successful.",
            "",
            "# <weight>",
            "- `O(R + X)`.",
            "- One balance-reserve operation.",
            "- One storage mutation `O(R + X)`.",
            "- One event",
            "# </weight>"
          ],
          "args": [
            {
              "name": "reg_index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1906",
          "name": "set_fee",
          "docs": [
            "Set the fee required for a judgement to be requested from a registrar.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must be the account",
            "of the registrar whose index is `index`.",
            "",
            "- `index`: the index of the registrar whose fee is to be set.",
            "- `fee`: the new fee.",
            "",
            "# <weight>",
            "- `O(R)`.",
            "- One storage mutation `O(R)`.",
            "2d2042656e63686d61726b3a20372e333135202b2052202a20302e33323920c2b57320286d696e207371756172657320616e616c7973697329",
            "# </weight>"
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "fee",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "1907",
          "name": "set_account_id",
          "docs": [
            "Change the account associated with a registrar.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must be the account",
            "of the registrar whose index is `index`.",
            "",
            "- `index`: the index of the registrar whose fee is to be set.",
            "- `new`: the new account ID.",
            "",
            "# <weight>",
            "- `O(R)`.",
            "- One storage mutation `O(R)`.",
            "2d2042656e63686d61726b3a20382e383233202b2052202a20302e333220c2b57320286d696e207371756172657320616e616c7973697329",
            "# </weight>"
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "new",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1908",
          "name": "set_fields",
          "docs": [
            "Set the field information for a registrar.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must be the account",
            "of the registrar whose index is `index`.",
            "",
            "- `index`: the index of the registrar whose fee is to be set.",
            "- `fields`: the fields that the registrar concerns themselves with.",
            "",
            "# <weight>",
            "- `O(R)`.",
            "- One storage mutation `O(R)`.",
            "2d2042656e63686d61726b3a20372e343634202b2052202a20302e33323520c2b57320286d696e207371756172657320616e616c7973697329",
            "# </weight>"
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "fields",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "1909",
          "name": "provide_judgement",
          "docs": [
            "Provide a judgement for an account's identity.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must be the account",
            "of the registrar whose index is `reg_index`.",
            "",
            "- `reg_index`: the index of the registrar whose judgement is being made.",
            "- `target`: the account whose identity the judgement is upon. This must be an account",
            "  with a registered identity.",
            "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
            "",
            "Emits `JudgementGiven` if successful.",
            "",
            "# <weight>",
            "- `O(R + X)`.",
            "- One balance-transfer operation.",
            "- Up to one account-lookup operation.",
            "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
            "- One event.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "reg_index",
              "type": "compact<U32>"
            },
            {
              "name": "target",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "judgement",
              "type": "pallet_identitytypesJudgement"
            }
          ]
        },
        {
          "lookup": "190a",
          "name": "kill_identity",
          "docs": [
            "Remove an account's identity and sub-account information and slash the deposits.",
            "",
            "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
            "`Slash`. Verification request deposits are not returned; they should be cancelled",
            "manually using `cancel_request`.",
            "",
            "The dispatch origin for this call must match `T::ForceOrigin`.",
            "",
            "- `target`: the account whose identity the judgement is upon. This must be an account",
            "  with a registered identity.",
            "",
            "Emits `IdentityKilled` if successful.",
            "",
            "# <weight>",
            "- `O(R + S + X)`.",
            "- One balance-reserve operation.",
            "- `S + 2` storage mutations.",
            "- One event.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "target",
              "type": "sp_runtimemultiaddressMultiAddress"
            }
          ]
        },
        {
          "lookup": "190b",
          "name": "add_sub",
          "docs": [
            "Add the given account to the sender's subs.",
            "",
            "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
            "to the sender.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
            "sub identity of `sub`."
          ],
          "args": [
            {
              "name": "sub",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "data",
              "type": "pallet_identitytypesData"
            }
          ]
        },
        {
          "lookup": "190c",
          "name": "rename_sub",
          "docs": [
            "Alter the associated name of the given sub-account.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
            "sub identity of `sub`."
          ],
          "args": [
            {
              "name": "sub",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "data",
              "type": "pallet_identitytypesData"
            }
          ]
        },
        {
          "lookup": "190d",
          "name": "remove_sub",
          "docs": [
            "Remove the given account from the sender's subs.",
            "",
            "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
            "to the sender.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
            "sub identity of `sub`."
          ],
          "args": [
            {
              "name": "sub",
              "type": "sp_runtimemultiaddressMultiAddress"
            }
          ]
        },
        {
          "lookup": "190e",
          "name": "quit_sub",
          "docs": [
            "Remove the sender as a sub-account.",
            "",
            "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
            "to the sender (*not* the original depositor).",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
            "super-identity.",
            "",
            "NOTE: This should not normally be used, but is provided in the case that the non-",
            "controller of an account is maliciously registered as a sub-account."
          ],
          "args": null
        }
      ],
      "calls_value": {
        "type": 314
      },
      "events": [
        {
          "lookup": "1900",
          "name": "IdentitySet",
          "docs": [
            "A name was set or reset (which will remove all judgements). \\[who\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1901",
          "name": "IdentityCleared",
          "docs": [
            "A name was cleared, and the given balance returned. \\[who, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1902",
          "name": "IdentityKilled",
          "docs": [
            "A name was removed and the given balance slashed. \\[who, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1903",
          "name": "JudgementRequested",
          "docs": [
            "A judgement was asked from a registrar. \\[who, registrar_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "1904",
          "name": "JudgementUnrequested",
          "docs": [
            "A judgement request was retracted. \\[who, registrar_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "1905",
          "name": "JudgementGiven",
          "docs": [
            "A judgement was given by a registrar. \\[target, registrar_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "U32"
          ]
        },
        {
          "lookup": "1906",
          "name": "RegistrarAdded",
          "docs": [
            "A registrar was added. \\[registrar_index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "1907",
          "name": "SubIdentityAdded",
          "docs": [
            "A sub-identity was added to an identity and the deposit paid. \\[sub, main, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1908",
          "name": "SubIdentityRemoved",
          "docs": [
            "A sub-identity was removed from an identity and the deposit freed.",
            "\\[sub, main, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1909",
          "name": "SubIdentityRevoked",
          "docs": [
            "A sub-identity was cleared, and the given deposit repatriated from the",
            "main identity account to the sub-identity account. \\[sub, main, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 66
      },
      "constants": [
        {
          "name": "BasicDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "084cd2c2070000000000000000000000",
          "docs": [
            " The amount held on deposit for a registered identity"
          ]
        },
        {
          "name": "FieldDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "0293b4f0010000000000000000000000",
          "docs": [
            " The amount held on deposit per additional field for a registered identity."
          ]
        },
        {
          "name": "SubAccountDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "68425d8d010000000000000000000000",
          "docs": [
            " The amount held on deposit for a registered subaccount. This should account for the fact",
            " that one storage item's value will increase by the size of an account ID, and there will",
            " be another trie item whose value is the size of an account ID plus 32 bytes."
          ]
        },
        {
          "name": "MaxSubAccounts",
          "type": "U32",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": [
            " The maximum number of sub-accounts allowed per identified account."
          ]
        },
        {
          "name": "MaxAdditionalFields",
          "type": "U32",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": [
            " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
            " required to access an identity, but can be pretty high."
          ]
        },
        {
          "name": "MaxRegistrars",
          "type": "U32",
          "type_value": 4,
          "constants_value": "14000000",
          "docs": [
            " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
            " of, e.g., updating judgements."
          ]
        }
      ],
      "errors": [
        {
          "name": "TooManySubAccounts",
          "doc": [
            "Too many subs-accounts."
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "Account isn't found."
          ]
        },
        {
          "name": "NotNamed",
          "doc": [
            "Account isn't named."
          ]
        },
        {
          "name": "EmptyIndex",
          "doc": [
            "Empty index."
          ]
        },
        {
          "name": "FeeChanged",
          "doc": [
            "Fee is changed."
          ]
        },
        {
          "name": "NoIdentity",
          "doc": [
            "No identity found."
          ]
        },
        {
          "name": "StickyJudgement",
          "doc": [
            "Sticky judgement."
          ]
        },
        {
          "name": "JudgementGiven",
          "doc": [
            "Judgement given."
          ]
        },
        {
          "name": "InvalidJudgement",
          "doc": [
            "Invalid judgement."
          ]
        },
        {
          "name": "InvalidIndex",
          "doc": [
            "The index is invalid."
          ]
        },
        {
          "name": "InvalidTarget",
          "doc": [
            "The target is invalid."
          ]
        },
        {
          "name": "TooManyFields",
          "doc": [
            "Too many additional fields."
          ]
        },
        {
          "name": "TooManyRegistrars",
          "doc": [
            "Maximum amount of registrars reached. Cannot add any more."
          ]
        },
        {
          "name": "AlreadyClaimed",
          "doc": [
            "Account ID is already named."
          ]
        },
        {
          "name": "NotSub",
          "doc": [
            "Sender is not a sub-account."
          ]
        },
        {
          "name": "NotOwned",
          "doc": [
            "Sub-account isn't owned by sender."
          ]
        }
      ],
      "errors_value": {
        "type": 552
      },
      "index": 25
    },
    {
      "name": "Society",
      "prefix": "Society",
      "storage": [
        {
          "name": "Founder",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": [
            " The first member."
          ]
        },
        {
          "name": "Rules",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 9
          },
          "fallback": "0x00",
          "docs": [
            " A hash of the rules of this society concerning membership. Can only be set once and",
            " only by the founder."
          ]
        },
        {
          "name": "Candidates",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<pallet_societyBid>",
            "PlainTypeValue": 553
          },
          "fallback": "0x00",
          "docs": [
            " The current set of candidates; bidders that are attempting to become members."
          ]
        },
        {
          "name": "SuspendedCandidates",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "TupleU128pallet_societyBidKind",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The set of suspended candidates."
          ]
        },
        {
          "name": "Pot",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U128",
            "PlainTypeValue": 6
          },
          "fallback": "0x00000000000000000000000000000000",
          "docs": [
            " Amount of our account balance that is specifically for the next round's bid(s)."
          ]
        },
        {
          "name": "Head",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": [
            " The most primary from the most recently approved members."
          ]
        },
        {
          "name": "Members",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 50
          },
          "fallback": "0x00",
          "docs": [
            " The current set of members, ordered."
          ]
        },
        {
          "name": "SuspendedMembers",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Bool",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The set of suspended members."
          ]
        },
        {
          "name": "Bids",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<pallet_societyBid>",
            "PlainTypeValue": 553
          },
          "fallback": "0x00",
          "docs": [
            " The current bids, stored ordered by the value of the bid."
          ]
        },
        {
          "name": "Vouching",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_societyVouchingStatus",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Members currently vouching or banned from vouching again"
          ]
        },
        {
          "name": "Payouts",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Vec<TupleU32U128>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Pending payouts; ordered by block number, with the amount that should be paid out."
          ]
        },
        {
          "name": "Strikes",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00000000",
          "docs": [
            " The ongoing number of losing votes cast by the member."
          ]
        },
        {
          "name": "Votes",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "Tuple[U8; 32][U8; 32]"
              ],
              "value": "pallet_societyVote",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Double map from Candidate -> Voter -> (Maybe) Vote."
          ]
        },
        {
          "name": "Defender",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U8; 32]",
            "PlainTypeValue": 0
          },
          "fallback": "0x00",
          "docs": [
            " The defending member currently being challenged."
          ]
        },
        {
          "name": "DefenderVotes",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_societyVote",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Votes for the defender."
          ]
        },
        {
          "name": "MaxMembers",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The max number of members for the society at one time."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1a00",
          "name": "bid",
          "docs": [
            "A user outside of the society can make a bid for entry.",
            "",
            "Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
            "when the bid becomes a member, or if the bid calls `unbid`.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `value`: A one time payment the bid would like to receive when joining the society.",
            "",
            "# <weight>",
            "Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)",
            "- Storage Reads:",
            "\t- One storage read to check for suspended candidate. O(1)",
            "\t- One storage read to check for suspended member. O(1)",
            "\t- One storage read to retrieve all current bids. O(B)",
            "\t- One storage read to retrieve all current candidates. O(C)",
            "\t- One storage read to retrieve all members. O(M)",
            "- Storage Writes:",
            "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization",
            "   w/ read)",
            "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
            "- Notable Computation:",
            "\t- O(B + C + log M) search to check user is not already a part of society.",
            "\t- O(log B) search to insert the new bid sorted.",
            "- External Pallet Operations:",
            "\t- One balance reserve operation. O(X)",
            "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
            "- Events:",
            "\t- One event for new bid.",
            "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
            "",
            "Total Complexity: O(M + B + C + logM + logB + X)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "value",
              "type": "U128"
            }
          ]
        },
        {
          "lookup": "1a01",
          "name": "unbid",
          "docs": [
            "A bidder can remove their bid for entry into society.",
            "By doing so, they will have their candidate deposit returned or",
            "they will unvouch their voucher.",
            "",
            "Payment: The bid deposit is unreserved if the user made a bid.",
            "",
            "The dispatch origin for this call must be _Signed_ and a bidder.",
            "",
            "Parameters:",
            "- `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
            "",
            "# <weight>",
            "Key: B (len of bids), X (balance unreserve)",
            "- One storage read and write to retrieve and update the bids. O(B)",
            "- Either one unreserve balance action O(X) or one vouching storage removal. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(B + X)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "pos",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1a02",
          "name": "vouch",
          "docs": [
            "As a member, vouch for someone to join society by placing a bid on their behalf.",
            "",
            "There is no deposit required to vouch for a new bid, but a member can only vouch for",
            "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
            "the suspension judgement origin, the member will be banned from vouching again.",
            "",
            "As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
            "be paid as a portion of the reward the member will receive for joining the society.",
            "",
            "The dispatch origin for this call must be _Signed_ and a member.",
            "",
            "Parameters:",
            "- `who`: The user who you would like to vouch for.",
            "- `value`: The total reward to be paid between you and the candidate if they become",
            "a member in the society.",
            "- `tip`: Your cut of the total `value` payout when the candidate is inducted into",
            "the society. Tips larger than `value` will be saturated upon payout.",
            "",
            "# <weight>",
            "Key: B (len of bids), C (len of candidates), M (len of members)",
            "- Storage Reads:",
            "\t- One storage read to retrieve all members. O(M)",
            "\t- One storage read to check member is not already vouching. O(1)",
            "\t- One storage read to check for suspended candidate. O(1)",
            "\t- One storage read to check for suspended member. O(1)",
            "\t- One storage read to retrieve all current bids. O(B)",
            "\t- One storage read to retrieve all current candidates. O(C)",
            "- Storage Writes:",
            "\t- One storage write to insert vouching status to the member. O(1)",
            "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization",
            "   w/ read)",
            "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
            "- Notable Computation:",
            "\t- O(log M) search to check sender is a member.",
            "\t- O(B + C + log M) search to check user is not already a part of society.",
            "\t- O(log B) search to insert the new bid sorted.",
            "- External Pallet Operations:",
            "\t- One balance reserve operation. O(X)",
            "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
            "- Events:",
            "\t- One event for vouch.",
            "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
            "",
            "Total Complexity: O(M + B + C + logM + logB + X)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "value",
              "type": "U128"
            },
            {
              "name": "tip",
              "type": "U128"
            }
          ]
        },
        {
          "lookup": "1a03",
          "name": "unvouch",
          "docs": [
            "As a vouching member, unvouch a bid. This only works while vouched user is",
            "only a bidder (and not a candidate).",
            "",
            "The dispatch origin for this call must be _Signed_ and a vouching member.",
            "",
            "Parameters:",
            "- `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
            "",
            "# <weight>",
            "Key: B (len of bids)",
            "- One storage read O(1) to check the signer is a vouching member.",
            "- One storage mutate to retrieve and update the bids. O(B)",
            "- One vouching storage removal. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(B)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "pos",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1a04",
          "name": "vote",
          "docs": [
            "As a member, vote on a candidate.",
            "",
            "The dispatch origin for this call must be _Signed_ and a member.",
            "",
            "Parameters:",
            "- `candidate`: The candidate that the member would like to bid on.",
            "- `approve`: A boolean which says if the candidate should be approved (`true`) or",
            "  rejected (`false`).",
            "",
            "# <weight>",
            "Key: C (len of candidates), M (len of members)",
            "- One storage read O(M) and O(log M) search to check user is a member.",
            "- One account lookup.",
            "- One storage read O(C) and O(C) search to check that user is a candidate.",
            "- One storage write to add vote to votes. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(M + logM + C)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "candidate",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "approve",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "1a05",
          "name": "defender_vote",
          "docs": [
            "As a member, vote on the defender.",
            "",
            "The dispatch origin for this call must be _Signed_ and a member.",
            "",
            "Parameters:",
            "- `approve`: A boolean which says if the candidate should be",
            "approved (`true`) or rejected (`false`).",
            "",
            "# <weight>",
            "- Key: M (len of members)",
            "- One storage read O(M) and O(log M) search to check user is a member.",
            "- One storage write to add vote to votes. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(M + logM)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "approve",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "1a06",
          "name": "payout",
          "docs": [
            "Transfer the first matured payout for the sender and remove it from the records.",
            "",
            "NOTE: This extrinsic needs to be called multiple times to claim multiple matured",
            "payouts.",
            "",
            "Payment: The member will receive a payment equal to their first matured",
            "payout to their free balance.",
            "",
            "The dispatch origin for this call must be _Signed_ and a member with",
            "payouts remaining.",
            "",
            "# <weight>",
            "Key: M (len of members), P (number of payouts for a particular member)",
            "- One storage read O(M) and O(log M) search to check signer is a member.",
            "- One storage read O(P) to get all payouts for a member.",
            "- One storage read O(1) to get the current block number.",
            "- One currency transfer call. O(X)",
            "- One storage write or removal to update the member's payouts. O(P)",
            "",
            "Total Complexity: O(M + logM + P + X)",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "1a07",
          "name": "found",
          "docs": [
            "Found the society.",
            "",
            "This is done as a discrete action in order to allow for the",
            "pallet to be included into a running chain and can only be done once.",
            "",
            "The dispatch origin for this call must be from the _FounderSetOrigin_.",
            "",
            "Parameters:",
            "- `founder` - The first member and head of the newly founded society.",
            "- `max_members` - The initial max number of members for the society.",
            "- `rules` - The rules of this society concerning membership.",
            "",
            "# <weight>",
            "- Two storage mutates to set `Head` and `Founder`. O(1)",
            "- One storage write to add the first member to society. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(1)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "founder",
              "type": "[U8; 32]"
            },
            {
              "name": "max_members",
              "type": "U32"
            },
            {
              "name": "rules",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "1a08",
          "name": "unfound",
          "docs": [
            "Annul the founding of the society.",
            "",
            "The dispatch origin for this call must be Signed, and the signing account must be both",
            "the `Founder` and the `Head`. This implies that it may only be done when there is one",
            "member.",
            "",
            "# <weight>",
            "- Two storage reads O(1).",
            "- Four storage removals O(1).",
            "- One event.",
            "",
            "Total Complexity: O(1)",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "1a09",
          "name": "judge_suspended_member",
          "docs": [
            "Allow suspension judgement origin to make judgement on a suspended member.",
            "",
            "If a suspended member is forgiven, we simply add them back as a member, not affecting",
            "any of the existing storage items for that member.",
            "",
            "If a suspended member is rejected, remove all associated storage items, including",
            "their payouts, and remove any vouched bids they currently have.",
            "",
            "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
            "",
            "Parameters:",
            "- `who` - The suspended member to be judged.",
            "- `forgive` - A boolean representing whether the suspension judgement origin forgives",
            "  (`true`) or rejects (`false`) a suspended member.",
            "",
            "# <weight>",
            "Key: B (len of bids), M (len of members)",
            "- One storage read to check `who` is a suspended member. O(1)",
            "- Up to one storage write O(M) with O(log M) binary search to add a member back to",
            "  society.",
            "- Up to 3 storage removals O(1) to clean up a removed member.",
            "- Up to one storage write O(B) with O(B) search to remove vouched bid from bids.",
            "- Up to one additional event if unvouch takes place.",
            "- One storage removal. O(1)",
            "- One event for the judgement.",
            "",
            "Total Complexity: O(M + logM + B)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "forgive",
              "type": "Bool"
            }
          ]
        },
        {
          "lookup": "1a0a",
          "name": "judge_suspended_candidate",
          "docs": [
            "Allow suspended judgement origin to make judgement on a suspended candidate.",
            "",
            "If the judgement is `Approve`, we add them to society as a member with the appropriate",
            "payment for joining society.",
            "",
            "If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
            "to the society treasury, or we ban the voucher from vouching again.",
            "",
            "If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
            "through the induction process again.",
            "",
            "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
            "",
            "Parameters:",
            "- `who` - The suspended candidate to be judged.",
            "- `judgement` - `Approve`, `Reject`, or `Rebid`.",
            "",
            "# <weight>",
            "Key: B (len of bids), M (len of members), X (balance action)",
            "- One storage read to check `who` is a suspended candidate.",
            "- One storage removal of the suspended candidate.",
            "- Approve Logic",
            "\t- One storage read to get the available pot to pay users with. O(1)",
            "\t- One storage write to update the available pot. O(1)",
            "\t- One storage read to get the current block number. O(1)",
            "\t- One storage read to get all members. O(M)",
            "\t- Up to one unreserve currency action.",
            "\t- Up to two new storage writes to payouts.",
            "\t- Up to one storage write with O(log M) binary search to add a member to society.",
            "- Reject Logic",
            "\t- Up to one repatriate reserved currency action. O(X)",
            "\t- Up to one storage write to ban the vouching member from vouching again.",
            "- Rebid Logic",
            "\t- Storage mutate with O(log B) binary search to place the user back into bids.",
            "- Up to one additional event if unvouch takes place.",
            "- One storage removal.",
            "- One event for the judgement.",
            "",
            "Total Complexity: O(M + logM + B + X)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "judgement",
              "type": "pallet_societyJudgement"
            }
          ]
        },
        {
          "lookup": "1a0b",
          "name": "set_max_members",
          "docs": [
            "Allows root origin to change the maximum number of members in society.",
            "Max membership count must be greater than 1.",
            "",
            "The dispatch origin for this call must be from _ROOT_.",
            "",
            "Parameters:",
            "- `max` - The maximum number of members for the society.",
            "",
            "# <weight>",
            "- One storage write to update the max. O(1)",
            "- One event.",
            "",
            "Total Complexity: O(1)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "max",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 354
      },
      "events": [
        {
          "lookup": "1a00",
          "name": "Founded",
          "docs": [
            "The society is founded by the given identity. \\[founder\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a01",
          "name": "Bid",
          "docs": [
            "A membership bid just happened. The given account is the candidate's ID and their offer",
            "is the second. \\[candidate_id, offer\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1a02",
          "name": "Vouch",
          "docs": [
            "A membership bid just happened by vouching. The given account is the candidate's ID and",
            "their offer is the second. The vouching party is the third. \\[candidate_id, offer,",
            "vouching\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a03",
          "name": "AutoUnbid",
          "docs": [
            "A \\[candidate\\] was dropped (due to an excess of bids in the system)."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a04",
          "name": "Unbid",
          "docs": [
            "A \\[candidate\\] was dropped (by their request)."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a05",
          "name": "Unvouch",
          "docs": [
            "A \\[candidate\\] was dropped (by request of who vouched for them)."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a06",
          "name": "Inducted",
          "docs": [
            "A group of candidates have been inducted. The batch's primary is the first value, the",
            "batch in full is the second. \\[primary, candidates\\]"
          ],
          "args": [
            "[U8; 32]",
            "Vec<[U8; 32]>"
          ]
        },
        {
          "lookup": "1a07",
          "name": "SuspendedMemberJudgement",
          "docs": [
            "A suspended member has been judged. \\[who, judged\\]"
          ],
          "args": [
            "[U8; 32]",
            "Bool"
          ]
        },
        {
          "lookup": "1a08",
          "name": "CandidateSuspended",
          "docs": [
            "A \\[candidate\\] has been suspended"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a09",
          "name": "MemberSuspended",
          "docs": [
            "A \\[member\\] has been suspended"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a0a",
          "name": "Challenged",
          "docs": [
            "A \\[member\\] has been challenged"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a0b",
          "name": "Vote",
          "docs": [
            "A vote has been placed \\[candidate, voter, vote\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "Bool"
          ]
        },
        {
          "lookup": "1a0c",
          "name": "DefenderVote",
          "docs": [
            "A vote has been placed for a defending member \\[voter, vote\\]"
          ],
          "args": [
            "[U8; 32]",
            "Bool"
          ]
        },
        {
          "lookup": "1a0d",
          "name": "NewMaxMembers",
          "docs": [
            "A new \\[max\\] member count has been set"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "1a0e",
          "name": "Unfounded",
          "docs": [
            "Society is unfounded. \\[founder\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1a0f",
          "name": "Deposit",
          "docs": [
            "Some funds were deposited into the society account. \\[value\\]"
          ],
          "args": [
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 67
      },
      "constants": [
        {
          "name": "PalletId",
          "type": "[U8; 8]",
          "type_value": 538,
          "constants_value": "py/socie",
          "docs": [
            " The societies's pallet id"
          ]
        },
        {
          "name": "CandidateDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "084cd2c2070000000000000000000000",
          "docs": [
            " The minimum amount of a deposit required for a bid to be made."
          ]
        },
        {
          "name": "WrongSideDeduction",
          "type": "U128",
          "type_value": 6,
          "constants_value": "68425d8d010000000000000000000000",
          "docs": [
            " The amount of the unpaid reward that gets deducted in the case that either a skeptic",
            " doesn't vote or someone votes in the wrong way."
          ]
        },
        {
          "name": "MaxStrikes",
          "type": "U32",
          "type_value": 4,
          "constants_value": "0a000000",
          "docs": [
            " The number of times a member may vote the wrong way (or not at all, when they are a",
            " skeptic) before they become suspended."
          ]
        },
        {
          "name": "PeriodSpend",
          "type": "U128",
          "type_value": 6,
          "constants_value": "90d9120d840100000000000000000000",
          "docs": [
            " The amount of incentive paid within each period. Doesn't include VoterTip."
          ]
        },
        {
          "name": "RotationPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "c0890100",
          "docs": [
            " The number of blocks between candidate/membership rotation periods."
          ]
        },
        {
          "name": "MaxLockDuration",
          "type": "U32",
          "type_value": 4,
          "constants_value": "004eed00",
          "docs": [
            " The maximum duration of the payout lock."
          ]
        },
        {
          "name": "ChallengePeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "c0890100",
          "docs": [
            " The number of blocks between membership challenges."
          ]
        },
        {
          "name": "MaxCandidateIntake",
          "type": "U32",
          "type_value": 4,
          "constants_value": "01000000",
          "docs": [
            " The maximum number of candidates that we accept per round."
          ]
        }
      ],
      "errors": [
        {
          "name": "BadPosition",
          "doc": [
            "An incorrect position was provided."
          ]
        },
        {
          "name": "NotMember",
          "doc": [
            "User is not a member."
          ]
        },
        {
          "name": "AlreadyMember",
          "doc": [
            "User is already a member."
          ]
        },
        {
          "name": "Suspended",
          "doc": [
            "User is suspended."
          ]
        },
        {
          "name": "NotSuspended",
          "doc": [
            "User is not suspended."
          ]
        },
        {
          "name": "NoPayout",
          "doc": [
            "Nothing to payout."
          ]
        },
        {
          "name": "AlreadyFounded",
          "doc": [
            "Society already founded."
          ]
        },
        {
          "name": "InsufficientPot",
          "doc": [
            "Not enough in pot to accept candidate."
          ]
        },
        {
          "name": "AlreadyVouching",
          "doc": [
            "Member is already vouching or banned from vouching again."
          ]
        },
        {
          "name": "NotVouching",
          "doc": [
            "Member is not vouching."
          ]
        },
        {
          "name": "Head",
          "doc": [
            "Cannot remove the head of the chain."
          ]
        },
        {
          "name": "Founder",
          "doc": [
            "Cannot remove the founder."
          ]
        },
        {
          "name": "AlreadyBid",
          "doc": [
            "User has already made a bid."
          ]
        },
        {
          "name": "AlreadyCandidate",
          "doc": [
            "User is already a candidate."
          ]
        },
        {
          "name": "NotCandidate",
          "doc": [
            "User is not a candidate."
          ]
        },
        {
          "name": "MaxMembers",
          "doc": [
            "Too many members in the society."
          ]
        },
        {
          "name": "NotFounder",
          "doc": [
            "The caller is not the founder."
          ]
        },
        {
          "name": "NotHead",
          "doc": [
            "The caller is not the head."
          ]
        }
      ],
      "errors_value": {
        "type": 562
      },
      "index": 26
    },
    {
      "name": "Recovery",
      "prefix": "Recovery",
      "storage": [
        {
          "name": "Recoverable",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_recoveryRecoveryConfig",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The set of recoverable accounts and their recovery configuration."
          ]
        },
        {
          "name": "ActiveRecoveries",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Twox64Concat"
              ],
              "key_vec": [
                "Tuple[U8; 32][U8; 32]"
              ],
              "value": "pallet_recoveryActiveRecovery",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Active recovery attempts.",
            "",
            " First account is the account to be recovered, and the second account",
            " is the user trying to recover the account."
          ]
        },
        {
          "name": "Proxy",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "[U8; 32]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The list of allowed proxy accounts.",
            "",
            " Map from the user who can access it to the recovered account."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1b00",
          "name": "as_recovered",
          "docs": [
            "Send a call through a recovered account.",
            "",
            "The dispatch origin for this call must be _Signed_ and registered to",
            "be able to make calls on behalf of the recovered account.",
            "",
            "Parameters:",
            "- `account`: The recovered account you want to make a call on-behalf-of.",
            "- `call`: The call you want to make with the recovered account.",
            "",
            "# <weight>",
            "- The weight of the `call` + 10,000.",
            "- One storage lookup to check account is recovered by `who`. O(1)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1b01",
          "name": "set_recovered",
          "docs": [
            "Allow ROOT to bypass the recovery process and set an a rescuer account",
            "for a lost account directly.",
            "",
            "The dispatch origin for this call must be _ROOT_.",
            "",
            "Parameters:",
            "- `lost`: The \"lost account\" to be recovered.",
            "- `rescuer`: The \"rescuer account\" which can call as the lost account.",
            "",
            "# <weight>",
            "- One storage write O(1)",
            "- One event",
            "# </weight>"
          ],
          "args": [
            {
              "name": "lost",
              "type": "[U8; 32]"
            },
            {
              "name": "rescuer",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b02",
          "name": "create_recovery",
          "docs": [
            "Create a recovery configuration for your account. This makes your account recoverable.",
            "",
            "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
            "will be reserved for storing the recovery configuration. This deposit is returned",
            "in full when the user calls `remove_recovery`.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
            "  ordered and contain no duplicate values.",
            "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
            "  account can be recovered. Should be less than or equal to the length of the list of",
            "  friends.",
            "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
            "  needs to pass before the account can be recovered.",
            "",
            "# <weight>",
            "- Key: F (len of friends)",
            "- One storage read to check that account is not already recoverable. O(1).",
            "- A check that the friends list is sorted and unique. O(F)",
            "- One currency reserve operation. O(X)",
            "- One storage write. O(1). Codec O(F).",
            "- One event.",
            "",
            "Total Complexity: O(F + X)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "friends",
              "type": "Vec<[U8; 32]>"
            },
            {
              "name": "threshold",
              "type": "U16"
            },
            {
              "name": "delay_period",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1b03",
          "name": "initiate_recovery",
          "docs": [
            "Initiate the process for recovering a recoverable account.",
            "",
            "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
            "recovery process. This deposit will always be repatriated to the account",
            "trying to be recovered. See `close_recovery`.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `account`: The lost account that you want to recover. This account needs to be",
            "  recoverable (i.e. have a recovery configuration).",
            "",
            "# <weight>",
            "- One storage read to check that account is recoverable. O(F)",
            "- One storage read to check that this recovery process hasn't already started. O(1)",
            "- One currency reserve operation. O(X)",
            "- One storage read to get the current block number. O(1)",
            "- One storage write. O(1).",
            "- One event.",
            "",
            "Total Complexity: O(F + X)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b04",
          "name": "vouch_recovery",
          "docs": [
            "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
            "process for that account.",
            "",
            "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
            "for the recoverable account.",
            "",
            "Parameters:",
            "- `lost`: The lost account that you want to recover.",
            "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
            "",
            "The combination of these two parameters must point to an active recovery",
            "process.",
            "",
            "# <weight>",
            "Key: F (len of friends in config), V (len of vouching friends)",
            "- One storage read to get the recovery configuration. O(1), Codec O(F)",
            "- One storage read to get the active recovery process. O(1), Codec O(V)",
            "- One binary search to confirm caller is a friend. O(logF)",
            "- One binary search to confirm caller has not already vouched. O(logV)",
            "- One storage write. O(1), Codec O(V).",
            "- One event.",
            "",
            "Total Complexity: O(F + logF + V + logV)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "lost",
              "type": "[U8; 32]"
            },
            {
              "name": "rescuer",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b05",
          "name": "claim_recovery",
          "docs": [
            "Allow a successful rescuer to claim their recovered account.",
            "",
            "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
            "who has successfully completed the account recovery process: collected",
            "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
            "",
            "Parameters:",
            "- `account`: The lost account that you want to claim has been successfully recovered by",
            "  you.",
            "",
            "# <weight>",
            "Key: F (len of friends in config), V (len of vouching friends)",
            "- One storage read to get the recovery configuration. O(1), Codec O(F)",
            "- One storage read to get the active recovery process. O(1), Codec O(V)",
            "- One storage read to get the current block number. O(1)",
            "- One storage write. O(1), Codec O(V).",
            "- One event.",
            "",
            "Total Complexity: O(F + V)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b06",
          "name": "close_recovery",
          "docs": [
            "As the controller of a recoverable account, close an active recovery",
            "process for your account.",
            "",
            "Payment: By calling this function, the recoverable account will receive",
            "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
            "",
            "The dispatch origin for this call must be _Signed_ and must be a",
            "recoverable account with an active recovery process for it.",
            "",
            "Parameters:",
            "- `rescuer`: The account trying to rescue this recoverable account.",
            "",
            "# <weight>",
            "Key: V (len of vouching friends)",
            "- One storage read/remove to get the active recovery process. O(1), Codec O(V)",
            "- One balance call to repatriate reserved. O(X)",
            "- One event.",
            "",
            "Total Complexity: O(V + X)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "rescuer",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1b07",
          "name": "remove_recovery",
          "docs": [
            "Remove the recovery process for your account. Recovered accounts are still accessible.",
            "",
            "NOTE: The user must make sure to call `close_recovery` on all active",
            "recovery attempts before calling this function else it will fail.",
            "",
            "Payment: By calling this function the recoverable account will unreserve",
            "their recovery configuration deposit.",
            "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
            "",
            "The dispatch origin for this call must be _Signed_ and must be a",
            "recoverable account (i.e. has a recovery configuration).",
            "",
            "# <weight>",
            "Key: F (len of friends)",
            "- One storage read to get the prefix iterator for active recoveries. O(1)",
            "- One storage read/remove to get the recovery configuration. O(1), Codec O(F)",
            "- One balance call to unreserved. O(X)",
            "- One event.",
            "",
            "Total Complexity: O(F + X)",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "1b08",
          "name": "cancel_recovered",
          "docs": [
            "Cancel the ability to use `as_recovered` for `account`.",
            "",
            "The dispatch origin for this call must be _Signed_ and registered to",
            "be able to make calls on behalf of the recovered account.",
            "",
            "Parameters:",
            "- `account`: The recovered account you are able to call on-behalf-of.",
            "",
            "# <weight>",
            "- One storage mutation to check account is recovered by `who`. O(1)",
            "# </weight>"
          ],
          "args": [
            {
              "name": "account",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 356
      },
      "events": [
        {
          "lookup": "1b00",
          "name": "RecoveryCreated",
          "docs": [
            "A recovery process has been set up for an \\[account\\]."
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b01",
          "name": "RecoveryInitiated",
          "docs": [
            "A recovery process has been initiated for lost account by rescuer account.",
            "\\[lost, rescuer\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b02",
          "name": "RecoveryVouched",
          "docs": [
            "A recovery process for lost account by rescuer account has been vouched for by sender.",
            "\\[lost, rescuer, sender\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b03",
          "name": "RecoveryClosed",
          "docs": [
            "A recovery process for lost account by rescuer account has been closed.",
            "\\[lost, rescuer\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b04",
          "name": "AccountRecovered",
          "docs": [
            "Lost account has been successfully recovered by rescuer account.",
            "\\[lost, rescuer\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1b05",
          "name": "RecoveryRemoved",
          "docs": [
            "A recovery process has been removed for an \\[account\\]."
          ],
          "args": [
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 68
      },
      "constants": [
        {
          "name": "ConfigDepositBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "042669e1030000000000000000000000",
          "docs": [
            " The base amount of currency needed to reserve for creating a recovery configuration.",
            "",
            " This is held for an additional storage item whose value size is",
            " `2 + sizeof(BlockNumber, Balance)` bytes."
          ]
        },
        {
          "name": "FriendDepositFactor",
          "type": "U128",
          "type_value": 6,
          "constants_value": "9a505763000000000000000000000000",
          "docs": [
            " The amount of currency needed per additional user when creating a recovery",
            " configuration.",
            "",
            " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
            " value."
          ]
        },
        {
          "name": "MaxFriends",
          "type": "U16",
          "type_value": 75,
          "constants_value": "0900",
          "docs": [
            " The maximum amount of friends allowed in a recovery configuration."
          ]
        },
        {
          "name": "RecoveryDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "042669e1030000000000000000000000",
          "docs": [
            " The base amount of currency needed to reserve for starting a recovery.",
            "",
            " This is primarily held for deterring malicious recovery attempts, and should",
            " have a value large enough that a bad actor would choose not to place this",
            " deposit. It also acts to fund additional storage item whose value size is",
            " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
            " threshold."
          ]
        }
      ],
      "errors": [
        {
          "name": "NotAllowed",
          "doc": [
            "User is not allowed to make a call on behalf of this account"
          ]
        },
        {
          "name": "ZeroThreshold",
          "doc": [
            "Threshold must be greater than zero"
          ]
        },
        {
          "name": "NotEnoughFriends",
          "doc": [
            "Friends list must be greater than zero and threshold"
          ]
        },
        {
          "name": "MaxFriends",
          "doc": [
            "Friends list must be less than max friends"
          ]
        },
        {
          "name": "NotSorted",
          "doc": [
            "Friends list must be sorted and free of duplicates"
          ]
        },
        {
          "name": "NotRecoverable",
          "doc": [
            "This account is not set up for recovery"
          ]
        },
        {
          "name": "AlreadyRecoverable",
          "doc": [
            "This account is already set up for recovery"
          ]
        },
        {
          "name": "AlreadyStarted",
          "doc": [
            "A recovery process has already started for this account"
          ]
        },
        {
          "name": "NotStarted",
          "doc": [
            "A recovery process has not started for this rescuer"
          ]
        },
        {
          "name": "NotFriend",
          "doc": [
            "This account is not a friend who can vouch"
          ]
        },
        {
          "name": "DelayPeriod",
          "doc": [
            "The friend must wait until the delay period to vouch for this recovery"
          ]
        },
        {
          "name": "AlreadyVouched",
          "doc": [
            "This user has already vouched for this recovery"
          ]
        },
        {
          "name": "Threshold",
          "doc": [
            "The threshold for recovering this account has not been met"
          ]
        },
        {
          "name": "StillActive",
          "doc": [
            "There are still active recovery attempts that need to be closed"
          ]
        },
        {
          "name": "AlreadyProxy",
          "doc": [
            "This account is already set up for recovery"
          ]
        },
        {
          "name": "BadState",
          "doc": [
            "Some internal state is broken."
          ]
        }
      ],
      "errors_value": {
        "type": 565
      },
      "index": 27
    },
    {
      "name": "Vesting",
      "prefix": "Vesting",
      "storage": [
        {
          "name": "Vesting",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Vec<pallet_vestingvesting_infoVestingInfo>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Information regarding the vesting of a given account."
          ]
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_vestingReleases",
            "PlainTypeValue": 568
          },
          "fallback": "0x00",
          "docs": [
            " Storage version of the pallet.",
            "",
            " New networks start with latest version, as determined by the genesis build."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1c00",
          "name": "vest",
          "docs": [
            "Unlock any vested funds of the sender account.",
            "",
            "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
            "locked under this pallet.",
            "",
            "Emits either `VestingCompleted` or `VestingUpdated`.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- DbWeight: 2 Reads, 2 Writes",
            "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
            "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "1c01",
          "name": "vest_other",
          "docs": [
            "Unlock any vested funds of a `target` account.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `target`: The account whose vested funds should be unlocked. Must have funds still",
            "locked under this pallet.",
            "",
            "Emits either `VestingCompleted` or `VestingUpdated`.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- DbWeight: 3 Reads, 3 Writes",
            "    - Reads: Vesting Storage, Balances Locks, Target Account",
            "    - Writes: Vesting Storage, Balances Locks, Target Account",
            "# </weight>"
          ],
          "args": [
            {
              "name": "target",
              "type": "sp_runtimemultiaddressMultiAddress"
            }
          ]
        },
        {
          "lookup": "1c02",
          "name": "vested_transfer",
          "docs": [
            "Create a vested transfer.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `target`: The account receiving the vested funds.",
            "- `schedule`: The vesting schedule attached to the transfer.",
            "",
            "Emits `VestingCreated`.",
            "",
            "NOTE: This will unlock all schedules through the current block.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- DbWeight: 3 Reads, 3 Writes",
            "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
            "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
            "# </weight>"
          ],
          "args": [
            {
              "name": "target",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "schedule",
              "type": "pallet_vestingvesting_infoVestingInfo"
            }
          ]
        },
        {
          "lookup": "1c03",
          "name": "force_vested_transfer",
          "docs": [
            "Force a vested transfer.",
            "",
            "The dispatch origin for this call must be _Root_.",
            "",
            "- `source`: The account whose funds should be transferred.",
            "- `target`: The account that should be transferred the vested funds.",
            "- `schedule`: The vesting schedule attached to the transfer.",
            "",
            "Emits `VestingCreated`.",
            "",
            "NOTE: This will unlock all schedules through the current block.",
            "",
            "# <weight>",
            "- `O(1)`.",
            "- DbWeight: 4 Reads, 4 Writes",
            "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
            "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
            "# </weight>"
          ],
          "args": [
            {
              "name": "source",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "target",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "schedule",
              "type": "pallet_vestingvesting_infoVestingInfo"
            }
          ]
        },
        {
          "lookup": "1c04",
          "name": "merge_schedules",
          "docs": [
            "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
            "the highest possible start and end blocks. If both schedules have already started the",
            "current block will be used as the schedule start; with the caveat that if one schedule",
            "is finished by the current block, the other will be treated as the new merged schedule,",
            "unmodified.",
            "",
            "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
            "NOTE: This will unlock all schedules through the current block prior to merging.",
            "NOTE: If both schedules have ended by the current block, no new schedule will be created",
            "and both will be removed.",
            "",
            "Merged schedule attributes:",
            "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
            "  current_block)`.",
            "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
            "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `schedule1_index`: index of the first schedule to merge.",
            "- `schedule2_index`: index of the second schedule to merge."
          ],
          "args": [
            {
              "name": "schedule1_index",
              "type": "U32"
            },
            {
              "name": "schedule2_index",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 357
      },
      "events": [
        {
          "lookup": "1c00",
          "name": "VestingUpdated",
          "docs": [
            "The amount vested has been updated. This could indicate a change in funds available.",
            "The balance given is the amount which is left unvested (and thus locked).",
            "\\[account, unvested\\]"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "1c01",
          "name": "VestingCompleted",
          "docs": [
            "An \\[account\\] has become fully vested."
          ],
          "args": [
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 69
      },
      "constants": [
        {
          "name": "MinVestedTransfer",
          "type": "U128",
          "type_value": 6,
          "constants_value": "34a1aec6000000000000000000000000",
          "docs": [
            " The minimum amount transferred to call `vested_transfer`."
          ]
        },
        {
          "name": "MaxVestingSchedules",
          "type": "U32",
          "type_value": 4,
          "constants_value": "1c000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "NotVesting",
          "doc": [
            "The account given is not vesting."
          ]
        },
        {
          "name": "AtMaxVestingSchedules",
          "doc": [
            "The account already has `MaxVestingSchedules` count of schedules and thus",
            "cannot add another one. Consider merging existing schedules in order to add another."
          ]
        },
        {
          "name": "AmountLow",
          "doc": [
            "Amount being transferred is too low to create a vesting schedule."
          ]
        },
        {
          "name": "ScheduleIndexOutOfBounds",
          "doc": [
            "An index was out of bounds of the vesting schedules."
          ]
        },
        {
          "name": "InvalidScheduleParams",
          "doc": [
            "Failed to create a new schedule because some parameter was invalid."
          ]
        }
      ],
      "errors_value": {
        "type": 569
      },
      "index": 28
    },
    {
      "name": "Scheduler",
      "prefix": "Scheduler",
      "storage": [
        {
          "name": "Agenda",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<option<pallet_schedulerScheduledV2>>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Items to be executed, indexed by the block number that they should be executed on."
          ]
        },
        {
          "name": "Lookup",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "Vec<U8>"
              ],
              "value": "TupleU32U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Lookup from identity to the block number and index of the task."
          ]
        },
        {
          "name": "StorageVersion",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_schedulerReleases",
            "PlainTypeValue": 580
          },
          "fallback": "0x00",
          "docs": [
            " Storage version of the pallet.",
            "",
            " New networks start with last version."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1d00",
          "name": "schedule",
          "docs": [
            "Anonymously schedule a task.",
            "",
            "# <weight>",
            "- S = Number of already scheduled calls",
            "2d2042617365205765696768743a2032322e3239202b202e313236202a205320c2b573",
            "- DB Weight:",
            "    - Read: Agenda",
            "    - Write: Agenda",
            "- Will use base weight of 25 which should be good for up to 30 scheduled calls",
            "# </weight>"
          ],
          "args": [
            {
              "name": "when",
              "type": "U32"
            },
            {
              "name": "maybe_periodic",
              "type": "option<TupleU32U32>"
            },
            {
              "name": "priority",
              "type": "U8"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1d01",
          "name": "cancel",
          "docs": [
            "Cancel an anonymously scheduled task.",
            "",
            "# <weight>",
            "- S = Number of already scheduled calls",
            "2d2042617365205765696768743a2032322e3135202b20322e383639202a205320c2b573",
            "- DB Weight:",
            "    - Read: Agenda",
            "    - Write: Agenda, Lookup",
            "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
            "# </weight>"
          ],
          "args": [
            {
              "name": "when",
              "type": "U32"
            },
            {
              "name": "index",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1d02",
          "name": "schedule_named",
          "docs": [
            "Schedule a named task.",
            "",
            "# <weight>",
            "- S = Number of already scheduled calls",
            "2d2042617365205765696768743a2032392e36202b202e313539202a205320c2b573",
            "- DB Weight:",
            "    - Read: Agenda, Lookup",
            "    - Write: Agenda, Lookup",
            "- Will use base weight of 35 which should be good for more than 30 scheduled calls",
            "# </weight>"
          ],
          "args": [
            {
              "name": "id",
              "type": "Vec<U8>"
            },
            {
              "name": "when",
              "type": "U32"
            },
            {
              "name": "maybe_periodic",
              "type": "option<TupleU32U32>"
            },
            {
              "name": "priority",
              "type": "U8"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1d03",
          "name": "cancel_named",
          "docs": [
            "Cancel a named scheduled task.",
            "",
            "# <weight>",
            "- S = Number of already scheduled calls",
            "2d2042617365205765696768743a2032342e3931202b20322e393037202a205320c2b573",
            "- DB Weight:",
            "    - Read: Agenda, Lookup",
            "    - Write: Agenda, Lookup",
            "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
            "# </weight>"
          ],
          "args": [
            {
              "name": "id",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "1d04",
          "name": "schedule_after",
          "docs": [
            "Anonymously schedule a task after a delay.",
            "",
            "# <weight>",
            "Same as [`schedule`].",
            "# </weight>"
          ],
          "args": [
            {
              "name": "after",
              "type": "U32"
            },
            {
              "name": "maybe_periodic",
              "type": "option<TupleU32U32>"
            },
            {
              "name": "priority",
              "type": "U8"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1d05",
          "name": "schedule_named_after",
          "docs": [
            "Schedule a named task after a delay.",
            "",
            "# <weight>",
            "Same as [`schedule_named`](Self::schedule_named).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "id",
              "type": "Vec<U8>"
            },
            {
              "name": "after",
              "type": "U32"
            },
            {
              "name": "maybe_periodic",
              "type": "option<TupleU32U32>"
            },
            {
              "name": "priority",
              "type": "U8"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 359
      },
      "events": [
        {
          "lookup": "1d00",
          "name": "Scheduled",
          "docs": [
            "Scheduled some task. \\[when, index\\]"
          ],
          "args": [
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "1d01",
          "name": "Canceled",
          "docs": [
            "Canceled some task. \\[when, index\\]"
          ],
          "args": [
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "1d02",
          "name": "Dispatched",
          "docs": [
            "Dispatched some task. \\[task, id, result\\]"
          ],
          "args": [
            "TupleU32U32",
            "option<Vec<U8>>",
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        }
      ],
      "events_value": {
        "type": 70
      },
      "constants": [
        {
          "name": "MaximumWeight",
          "type": "U64",
          "type_value": 8,
          "constants_value": "00806e8774010000",
          "docs": [
            " The maximum weight that may be scheduled per block for any dispatchables of less",
            " priority than `schedule::HARD_DEADLINE`."
          ]
        },
        {
          "name": "MaxScheduledPerBlock",
          "type": "U32",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": [
            " The maximum number of scheduled calls in the queue for a single block.",
            " Not strictly enforced, but used for weight estimation."
          ]
        }
      ],
      "errors": [
        {
          "name": "FailedToSchedule",
          "doc": [
            "Failed to schedule a call"
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "Cannot find the scheduled call."
          ]
        },
        {
          "name": "TargetBlockNumberInPast",
          "doc": [
            "Given target block number is in the past."
          ]
        },
        {
          "name": "RescheduleNoChange",
          "doc": [
            "Reschedule failed because it does not change scheduled time."
          ]
        }
      ],
      "errors_value": {
        "type": 581
      },
      "index": 29
    },
    {
      "name": "Proxy",
      "prefix": "Proxy",
      "storage": [
        {
          "name": "Proxies",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "TupleVec<pallet_proxyProxyDefinition>U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000000000000000000000",
          "docs": [
            " The set of account proxies. Maps the account which has delegated to the accounts",
            " which are being delegated to, together with the amount held on deposit."
          ]
        },
        {
          "name": "Announcements",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "TupleVec<pallet_proxyAnnouncement>U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000000000000000000000",
          "docs": [
            " The announcements made by the proxy (key)."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "1e00",
          "name": "proxy",
          "docs": [
            "Dispatch the given `call` from an account that the sender is authorised for through",
            "`add_proxy`.",
            "",
            "Removes any corresponding announcement(s).",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `real`: The account that the proxy will make a call on behalf of.",
            "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
            "- `call`: The call to be made by the `real` account.",
            "",
            "# <weight>",
            "Weight is a function of the number of proxies the user has (P).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "real",
              "type": "[U8; 32]"
            },
            {
              "name": "force_proxy_type",
              "type": "option<kusama_runtimeProxyType>"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1e01",
          "name": "add_proxy",
          "docs": [
            "Register a proxy account for the sender that is able to make calls on its behalf.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `proxy`: The account that the `caller` would like to make a proxy.",
            "- `proxy_type`: The permissions allowed for this proxy account.",
            "- `delay`: The announcement period required of the initial proxy. Will generally be",
            "zero.",
            "",
            "# <weight>",
            "Weight is a function of the number of proxies the user has (P).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "delegate",
              "type": "[U8; 32]"
            },
            {
              "name": "proxy_type",
              "type": "kusama_runtimeProxyType"
            },
            {
              "name": "delay",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1e02",
          "name": "remove_proxy",
          "docs": [
            "Unregister a proxy account for the sender.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `proxy`: The account that the `caller` would like to remove as a proxy.",
            "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
            "",
            "# <weight>",
            "Weight is a function of the number of proxies the user has (P).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "delegate",
              "type": "[U8; 32]"
            },
            {
              "name": "proxy_type",
              "type": "kusama_runtimeProxyType"
            },
            {
              "name": "delay",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "1e03",
          "name": "remove_proxies",
          "docs": [
            "Unregister all proxy accounts for the sender.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
            "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
            "",
            "# <weight>",
            "Weight is a function of the number of proxies the user has (P).",
            "# </weight>"
          ],
          "args": null
        },
        {
          "lookup": "1e04",
          "name": "anonymous",
          "docs": [
            "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
            "initialize it with a proxy of `proxy_type` for `origin` sender.",
            "",
            "Requires a `Signed` origin.",
            "",
            "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
            "new account. This will almost always be the most permissive `ProxyType` possible to",
            "allow for maximum flexibility.",
            "- `index`: A disambiguation index, in case this is called multiple times in the same",
            "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
            "want to use `0`.",
            "- `delay`: The announcement period required of the initial proxy. Will generally be",
            "zero.",
            "",
            "Fails with `Duplicate` if this has already been called in this transaction, from the",
            "same sender, with the same parameters.",
            "",
            "Fails if there are insufficient funds to pay for deposit.",
            "",
            "# <weight>",
            "Weight is a function of the number of proxies the user has (P).",
            "# </weight>",
            "TODO: Might be over counting 1 read"
          ],
          "args": [
            {
              "name": "proxy_type",
              "type": "kusama_runtimeProxyType"
            },
            {
              "name": "delay",
              "type": "U32"
            },
            {
              "name": "index",
              "type": "U16"
            }
          ]
        },
        {
          "lookup": "1e05",
          "name": "kill_anonymous",
          "docs": [
            "Removes a previously spawned anonymous proxy.",
            "",
            "WARNING: **All access to this account will be lost.** Any funds held in it will be",
            "inaccessible.",
            "",
            "Requires a `Signed` origin, and the sender account must have been created by a call to",
            "`anonymous` with corresponding parameters.",
            "",
            "- `spawner`: The account that originally called `anonymous` to create this account.",
            "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
            "- `proxy_type`: The proxy type originally passed to `anonymous`.",
            "- `height`: The height of the chain when the call to `anonymous` was processed.",
            "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
            "",
            "Fails with `NoPermission` in case the caller is not a previously created anonymous",
            "account whose `anonymous` call has corresponding parameters.",
            "",
            "# <weight>",
            "Weight is a function of the number of proxies the user has (P).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "spawner",
              "type": "[U8; 32]"
            },
            {
              "name": "proxy_type",
              "type": "kusama_runtimeProxyType"
            },
            {
              "name": "index",
              "type": "U16"
            },
            {
              "name": "height",
              "type": "compact<U32>"
            },
            {
              "name": "ext_index",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "1e06",
          "name": "announce",
          "docs": [
            "Publish the hash of a proxy-call that will be made in the future.",
            "",
            "This must be called some number of blocks before the corresponding `proxy` is attempted",
            "if the delay associated with the proxy relationship is greater than zero.",
            "",
            "No more than `MaxPending` announcements may be made at any one time.",
            "",
            "This will take a deposit of `AnnouncementDepositFactor` as well as",
            "`AnnouncementDepositBase` if there are no other pending announcements.",
            "",
            "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
            "",
            "Parameters:",
            "- `real`: The account that the proxy will make a call on behalf of.",
            "- `call_hash`: The hash of the call to be made by the `real` account.",
            "",
            "# <weight>",
            "Weight is a function of:",
            "- A: the number of announcements made.",
            "- P: the number of proxies the user has.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "real",
              "type": "[U8; 32]"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1e07",
          "name": "remove_announcement",
          "docs": [
            "Remove a given announcement.",
            "",
            "May be called by a proxy account to remove a call they previously announced and return",
            "the deposit.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `real`: The account that the proxy will make a call on behalf of.",
            "- `call_hash`: The hash of the call to be made by the `real` account.",
            "",
            "# <weight>",
            "Weight is a function of:",
            "- A: the number of announcements made.",
            "- P: the number of proxies the user has.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "real",
              "type": "[U8; 32]"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1e08",
          "name": "reject_announcement",
          "docs": [
            "Remove the given announcement of a delegate.",
            "",
            "May be called by a target (proxied) account to remove a call that one of their delegates",
            "(`delegate`) has announced they want to execute. The deposit is returned.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `delegate`: The account that previously announced the call.",
            "- `call_hash`: The hash of the call to be made.",
            "",
            "# <weight>",
            "Weight is a function of:",
            "- A: the number of announcements made.",
            "- P: the number of proxies the user has.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "delegate",
              "type": "[U8; 32]"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "1e09",
          "name": "proxy_announced",
          "docs": [
            "Dispatch the given `call` from an account that the sender is authorized for through",
            "`add_proxy`.",
            "",
            "Removes any corresponding announcement(s).",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Parameters:",
            "- `real`: The account that the proxy will make a call on behalf of.",
            "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
            "- `call`: The call to be made by the `real` account.",
            "",
            "# <weight>",
            "Weight is a function of:",
            "- A: the number of announcements made.",
            "- P: the number of proxies the user has.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "delegate",
              "type": "[U8; 32]"
            },
            {
              "name": "real",
              "type": "[U8; 32]"
            },
            {
              "name": "force_proxy_type",
              "type": "option<kusama_runtimeProxyType>"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 361
      },
      "events": [
        {
          "lookup": "1e00",
          "name": "ProxyExecuted",
          "docs": [
            "A proxy was executed correctly, with the given \\[result\\]."
          ],
          "args": [
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        },
        {
          "lookup": "1e01",
          "name": "AnonymousCreated",
          "docs": [
            "Anonymous account has been created by new proxy with given",
            "disambiguation index and proxy type. \\[anonymous, who, proxy_type,",
            "disambiguation_index\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "kusama_runtimeProxyType",
            "U16"
          ]
        },
        {
          "lookup": "1e02",
          "name": "Announced",
          "docs": [
            "An announcement was placed to make a call in the future. \\[real, proxy, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1e03",
          "name": "ProxyAdded",
          "docs": [
            "A proxy was added. \\[delegator, delegatee, proxy_type, delay\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "kusama_runtimeProxyType",
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 73
      },
      "constants": [
        {
          "name": "ProxyDepositBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "b07d3b870f0000000000000000000000",
          "docs": [
            " The base amount of currency needed to reserve for creating a proxy.",
            "",
            " This is held for an additional storage item whose value size is",
            " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
          ]
        },
        {
          "name": "ProxyDepositFactor",
          "type": "U128",
          "type_value": 6,
          "constants_value": "34738e06000000000000000000000000",
          "docs": [
            " The amount of currency needed per proxy added.",
            "",
            " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
            " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
            " into account `32 + proxy_type.encode().len()` bytes of data."
          ]
        },
        {
          "name": "MaxProxies",
          "type": "U32",
          "type_value": 4,
          "constants_value": "20000000",
          "docs": [
            " The maximum amount of proxies allowed for a single account."
          ]
        },
        {
          "name": "MaxPending",
          "type": "U32",
          "type_value": 4,
          "constants_value": "20000000",
          "docs": [
            " The maximum amount of time-delayed announcements that are allowed to be pending."
          ]
        },
        {
          "name": "AnnouncementDepositBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "b07d3b870f0000000000000000000000",
          "docs": [
            " The base amount of currency needed to reserve for creating an announcement.",
            "",
            " This is held when a new storage item holding a `Balance` is created (typically 16",
            " bytes)."
          ]
        },
        {
          "name": "AnnouncementDepositFactor",
          "type": "U128",
          "type_value": 6,
          "constants_value": "68e61c0d000000000000000000000000",
          "docs": [
            " The amount of currency needed per announcement made.",
            "",
            " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
            " into a pre-existing storage value."
          ]
        }
      ],
      "errors": [
        {
          "name": "TooMany",
          "doc": [
            "There are too many proxies registered or too many announcements pending."
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "Proxy registration not found."
          ]
        },
        {
          "name": "NotProxy",
          "doc": [
            "Sender is not a proxy of the account to be proxied."
          ]
        },
        {
          "name": "Unproxyable",
          "doc": [
            "A call which is incompatible with the proxy type's filter was attempted."
          ]
        },
        {
          "name": "Duplicate",
          "doc": [
            "Account is already a proxy."
          ]
        },
        {
          "name": "NoPermission",
          "doc": [
            "Call may not be made by proxy because it may escalate its privileges."
          ]
        },
        {
          "name": "Unannounced",
          "doc": [
            "Announcement, if made at all, was made too recently."
          ]
        },
        {
          "name": "NoSelfProxy",
          "doc": [
            "Cannot add self as proxy."
          ]
        }
      ],
      "errors_value": {
        "type": 590
      },
      "index": 30
    },
    {
      "name": "Multisig",
      "prefix": "Multisig",
      "storage": [
        {
          "name": "Multisigs",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Blake2_128Concat"
              ],
              "key_vec": [
                "Tuple[U8; 32][U8; 32]"
              ],
              "value": "pallet_multisigMultisig",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The set of open multisig operations."
          ]
        },
        {
          "name": "Calls",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "TupleVec<U8>[U8; 32]U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": null
        }
      ],
      "calls": [
        {
          "lookup": "1f00",
          "name": "as_multi_threshold_1",
          "docs": [
            "Immediately dispatch a multi-signature call using a single approval from the caller.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `other_signatories`: The accounts (other than the sender) who are part of the",
            "multi-signature, but do not participate in the approval process.",
            "- `call`: The call to be executed.",
            "",
            "Result is equivalent to the dispatched result.",
            "",
            "# <weight>",
            "O(Z + C) where Z is the length of the call and C its execution weight.",
            "-------------------------------",
            "- DB Weight: None",
            "- Plus Call Weight",
            "# </weight>"
          ],
          "args": [
            {
              "name": "other_signatories",
              "type": "Vec<[U8; 32]>"
            },
            {
              "name": "call",
              "type": "Call"
            }
          ]
        },
        {
          "lookup": "1f01",
          "name": "as_multi",
          "docs": [
            "Register approval for a dispatch to be made from a deterministic composite account if",
            "approved by a total of `threshold - 1` of `other_signatories`.",
            "",
            "If there are enough, then dispatch the call.",
            "",
            "Payment: `DepositBase` will be reserved if this is the first approval, plus",
            "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
            "is cancelled.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `threshold`: The total number of approvals for this dispatch before it is executed.",
            "- `other_signatories`: The accounts (other than the sender) who can approve this",
            "dispatch. May not be empty.",
            "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
            "not the first approval, then it must be `Some`, with the timepoint (block number and",
            "transaction index) of the first approval transaction.",
            "- `call`: The call to be executed.",
            "",
            "NOTE: Unless this is the final approval, you will generally want to use",
            "`approve_as_multi` instead, since it only requires a hash of the call.",
            "",
            "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
            "on success, result is `Ok` and the result from the interior call, if it was executed,",
            "may be found in the deposited `MultisigExecuted` event.",
            "",
            "# <weight>",
            "- `O(S + Z + Call)`.",
            "- Up to one balance-reserve or unreserve operation.",
            "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
            "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
            "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
            "- One encode & hash, both of complexity `O(S)`.",
            "- Up to one binary search and insert (`O(logS + S)`).",
            "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
            "- One event.",
            "- The weight of the `call`.",
            "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
            "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
            "-------------------------------",
            "- DB Weight:",
            "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
            "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
            "- Plus Call Weight",
            "# </weight>"
          ],
          "args": [
            {
              "name": "threshold",
              "type": "U16"
            },
            {
              "name": "other_signatories",
              "type": "Vec<[U8; 32]>"
            },
            {
              "name": "maybe_timepoint",
              "type": "option<pallet_multisigTimepoint>"
            },
            {
              "name": "call",
              "type": "Vec<U8>"
            },
            {
              "name": "store_call",
              "type": "Bool"
            },
            {
              "name": "max_weight",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "1f02",
          "name": "approve_as_multi",
          "docs": [
            "Register approval for a dispatch to be made from a deterministic composite account if",
            "approved by a total of `threshold - 1` of `other_signatories`.",
            "",
            "Payment: `DepositBase` will be reserved if this is the first approval, plus",
            "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
            "is cancelled.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `threshold`: The total number of approvals for this dispatch before it is executed.",
            "- `other_signatories`: The accounts (other than the sender) who can approve this",
            "dispatch. May not be empty.",
            "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
            "not the first approval, then it must be `Some`, with the timepoint (block number and",
            "transaction index) of the first approval transaction.",
            "- `call_hash`: The hash of the call to be executed.",
            "",
            "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
            "",
            "# <weight>",
            "- `O(S)`.",
            "- Up to one balance-reserve or unreserve operation.",
            "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
            "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
            "- One encode & hash, both of complexity `O(S)`.",
            "- Up to one binary search and insert (`O(logS + S)`).",
            "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
            "- One event.",
            "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
            "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
            "----------------------------------",
            "- DB Weight:",
            "    - Read: Multisig Storage, [Caller Account]",
            "    - Write: Multisig Storage, [Caller Account]",
            "# </weight>"
          ],
          "args": [
            {
              "name": "threshold",
              "type": "U16"
            },
            {
              "name": "other_signatories",
              "type": "Vec<[U8; 32]>"
            },
            {
              "name": "maybe_timepoint",
              "type": "option<pallet_multisigTimepoint>"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            },
            {
              "name": "max_weight",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "1f03",
          "name": "cancel_as_multi",
          "docs": [
            "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
            "for this operation will be unreserved on success.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "- `threshold`: The total number of approvals for this dispatch before it is executed.",
            "- `other_signatories`: The accounts (other than the sender) who can approve this",
            "dispatch. May not be empty.",
            "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
            "transaction for this dispatch.",
            "- `call_hash`: The hash of the call to be executed.",
            "",
            "# <weight>",
            "- `O(S)`.",
            "- Up to one balance-reserve or unreserve operation.",
            "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
            "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
            "- One encode & hash, both of complexity `O(S)`.",
            "- One event.",
            "- I/O: 1 read `O(S)`, one remove.",
            "- Storage: removes one item.",
            "----------------------------------",
            "- DB Weight:",
            "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
            "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
            "# </weight>"
          ],
          "args": [
            {
              "name": "threshold",
              "type": "U16"
            },
            {
              "name": "other_signatories",
              "type": "Vec<[U8; 32]>"
            },
            {
              "name": "timepoint",
              "type": "pallet_multisigTimepoint"
            },
            {
              "name": "call_hash",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 363
      },
      "events": [
        {
          "lookup": "1f00",
          "name": "NewMultisig",
          "docs": [
            "A new multisig operation has begun. \\[approving, multisig, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1f01",
          "name": "MultisigApproval",
          "docs": [
            "A multisig operation has been approved by someone.",
            "\\[approving, timepoint, multisig, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "pallet_multisigTimepoint",
            "[U8; 32]",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "1f02",
          "name": "MultisigExecuted",
          "docs": [
            "A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "pallet_multisigTimepoint",
            "[U8; 32]",
            "[U8; 32]",
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        },
        {
          "lookup": "1f03",
          "name": "MultisigCancelled",
          "docs": [
            "A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"
          ],
          "args": [
            "[U8; 32]",
            "pallet_multisigTimepoint",
            "[U8; 32]",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 76
      },
      "constants": [
        {
          "name": "DepositBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "f07520970f0000000000000000000000",
          "docs": [
            " The base amount of currency needed to reserve for creating a multisig execution or to",
            " store a dispatch call for later.",
            "",
            " This is held for an additional storage item whose value size is",
            " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
            " `32 + sizeof(AccountId)` bytes."
          ]
        },
        {
          "name": "DepositFactor",
          "type": "U128",
          "type_value": 6,
          "constants_value": "80965b06000000000000000000000000",
          "docs": [
            " The amount of currency needed per unit threshold when creating a multisig execution.",
            "",
            " This is held for adding 32 bytes more into a pre-existing storage value."
          ]
        },
        {
          "name": "MaxSignatories",
          "type": "U16",
          "type_value": 75,
          "constants_value": "6400",
          "docs": [
            " The maximum amount of signatories allowed in the multisig."
          ]
        }
      ],
      "errors": [
        {
          "name": "MinimumThreshold",
          "doc": [
            "Threshold must be 2 or greater."
          ]
        },
        {
          "name": "AlreadyApproved",
          "doc": [
            "Call is already approved by this signatory."
          ]
        },
        {
          "name": "NoApprovalsNeeded",
          "doc": [
            "Call doesn't need any (more) approvals."
          ]
        },
        {
          "name": "TooFewSignatories",
          "doc": [
            "There are too few signatories in the list."
          ]
        },
        {
          "name": "TooManySignatories",
          "doc": [
            "There are too many signatories in the list."
          ]
        },
        {
          "name": "SignatoriesOutOfOrder",
          "doc": [
            "The signatories were provided out of order; they should be ordered."
          ]
        },
        {
          "name": "SenderInSignatories",
          "doc": [
            "The sender was contained in the other signatories; it shouldn't be."
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "Multisig operation not found when attempting to cancel."
          ]
        },
        {
          "name": "NotOwner",
          "doc": [
            "Only the account that originally created the multisig is able to cancel it."
          ]
        },
        {
          "name": "NoTimepoint",
          "doc": [
            "No timepoint was given, yet the multisig operation is already underway."
          ]
        },
        {
          "name": "WrongTimepoint",
          "doc": [
            "A different timepoint was given to the multisig operation that is underway."
          ]
        },
        {
          "name": "UnexpectedTimepoint",
          "doc": [
            "A timepoint was given, yet no multisig operation is underway."
          ]
        },
        {
          "name": "MaxWeightTooLow",
          "doc": [
            "The maximum weight information provided was too low."
          ]
        },
        {
          "name": "AlreadyStored",
          "doc": [
            "The data to be stored is already stored."
          ]
        }
      ],
      "errors_value": {
        "type": 594
      },
      "index": 31
    },
    {
      "name": "Bounties",
      "prefix": "Bounties",
      "storage": [
        {
          "name": "BountyCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Number of bounty proposals that have been made."
          ]
        },
        {
          "name": "Bounties",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "pallet_bountiesBounty",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Bounties that have been made."
          ]
        },
        {
          "name": "BountyDescriptions",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<U8>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The description of each bounty."
          ]
        },
        {
          "name": "BountyApprovals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<U32>",
            "PlainTypeValue": 211
          },
          "fallback": "0x00",
          "docs": [
            " Bounty indices that have been approved but not yet funded."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "2300",
          "name": "propose_bounty",
          "docs": [
            "Propose a new bounty.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
            "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
            "or slashed when rejected.",
            "",
            "- `curator`: The curator account whom will manage this bounty.",
            "- `fee`: The curator fee.",
            "- `value`: The total payment amount of this bounty, curator fee included.",
            "- `description`: The description of this bounty."
          ],
          "args": [
            {
              "name": "value",
              "type": "compact<U128>"
            },
            {
              "name": "description",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "2301",
          "name": "approve_bounty",
          "docs": [
            "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
            "and the original deposit will be returned.",
            "",
            "May only be called from `T::ApproveOrigin`.",
            "",
            "# <weight>",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "2302",
          "name": "propose_curator",
          "docs": [
            "Assign a curator to a funded bounty.",
            "",
            "May only be called from `T::ApproveOrigin`.",
            "",
            "# <weight>",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact<U32>"
            },
            {
              "name": "curator",
              "type": "sp_runtimemultiaddressMultiAddress"
            },
            {
              "name": "fee",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "2303",
          "name": "unassign_curator",
          "docs": [
            "Unassign curator from a bounty.",
            "",
            "This function can only be called by the `RejectOrigin` a signed origin.",
            "",
            "If this function is called by the `RejectOrigin`, we assume that the curator is",
            "malicious or inactive. As a result, we will slash the curator when possible.",
            "",
            "If the origin is the curator, we take this as a sign they are unable to do their job and",
            "they willingly give up. We could slash them, but for now we allow them to recover their",
            "deposit and exit without issue. (We may want to change this if it is abused.)",
            "",
            "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
            "anyone in the community to call out that a curator is not doing their due diligence, and",
            "we should pick a new curator. In this case the curator should also be slashed.",
            "",
            "# <weight>",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "2304",
          "name": "accept_curator",
          "docs": [
            "Accept the curator role for a bounty.",
            "A deposit will be reserved from curator and refund upon successful payout.",
            "",
            "May only be called from the curator.",
            "",
            "# <weight>",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "2305",
          "name": "award_bounty",
          "docs": [
            "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
            "after a delay.",
            "",
            "The dispatch origin for this call must be the curator of this bounty.",
            "",
            "- `bounty_id`: Bounty ID to award.",
            "- `beneficiary`: The beneficiary account whom will receive the payout.",
            "",
            "# <weight>",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact<U32>"
            },
            {
              "name": "beneficiary",
              "type": "sp_runtimemultiaddressMultiAddress"
            }
          ]
        },
        {
          "lookup": "2306",
          "name": "claim_bounty",
          "docs": [
            "Claim the payout from an awarded bounty after payout delay.",
            "",
            "The dispatch origin for this call must be the beneficiary of this bounty.",
            "",
            "- `bounty_id`: Bounty ID to claim.",
            "",
            "# <weight>",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "2307",
          "name": "close_bounty",
          "docs": [
            "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
            "the curator deposit will be unreserved if possible.",
            "",
            "Only `T::RejectOrigin` is able to cancel a bounty.",
            "",
            "- `bounty_id`: Bounty ID to cancel.",
            "",
            "# <weight>",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "2308",
          "name": "extend_bounty_expiry",
          "docs": [
            "Extend the expiry time of an active bounty.",
            "",
            "The dispatch origin for this call must be the curator of this bounty.",
            "",
            "- `bounty_id`: Bounty ID to extend.",
            "- `remark`: additional information.",
            "",
            "# <weight>",
            "- O(1).",
            "# </weight>"
          ],
          "args": [
            {
              "name": "bounty_id",
              "type": "compact<U32>"
            },
            {
              "name": "remark",
              "type": "Vec<U8>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 365
      },
      "events": [
        {
          "lookup": "2300",
          "name": "BountyProposed",
          "docs": [
            "New bounty proposal. \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2301",
          "name": "BountyRejected",
          "docs": [
            "A bounty proposal was rejected; funds were slashed. \\[index, bond\\]"
          ],
          "args": [
            "U32",
            "U128"
          ]
        },
        {
          "lookup": "2302",
          "name": "BountyBecameActive",
          "docs": [
            "A bounty proposal is funded and became active. \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2303",
          "name": "BountyAwarded",
          "docs": [
            "A bounty is awarded to a beneficiary. \\[index, beneficiary\\]"
          ],
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2304",
          "name": "BountyClaimed",
          "docs": [
            "A bounty is claimed by beneficiary. \\[index, payout, beneficiary\\]"
          ],
          "args": [
            "U32",
            "U128",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2305",
          "name": "BountyCanceled",
          "docs": [
            "A bounty is cancelled. \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2306",
          "name": "BountyExtended",
          "docs": [
            "A bounty expiry is extended. \\[index\\]"
          ],
          "args": [
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 78
      },
      "constants": [
        {
          "name": "BountyDepositBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "34a1aec6000000000000000000000000",
          "docs": [
            " The amount held on deposit for placing a bounty proposal."
          ]
        },
        {
          "name": "BountyDepositPayoutDelay",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00e10000",
          "docs": [
            " The delay period for which a bounty beneficiary need to wait before claim the payout."
          ]
        },
        {
          "name": "BountyUpdatePeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "80c61300",
          "docs": [
            " Bounty duration in blocks."
          ]
        },
        {
          "name": "BountyCuratorDeposit",
          "type": "U32",
          "type_value": 537,
          "constants_value": "20a10700",
          "docs": [
            " Percentage of the curator fee that will be reserved upfront as deposit for bounty",
            " curator."
          ]
        },
        {
          "name": "BountyValueMinimum",
          "type": "U128",
          "type_value": 6,
          "constants_value": "68425d8d010000000000000000000000",
          "docs": [
            " Minimum value for a bounty."
          ]
        },
        {
          "name": "DataDepositPerByte",
          "type": "U128",
          "type_value": 6,
          "constants_value": "55a0fc01000000000000000000000000",
          "docs": [
            " The amount held on deposit per byte within the tip report reason or bounty description."
          ]
        },
        {
          "name": "MaximumReasonLength",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00400000",
          "docs": [
            " Maximum acceptable reason length."
          ]
        }
      ],
      "errors": [
        {
          "name": "InsufficientProposersBalance",
          "doc": [
            "Proposer's balance is too low."
          ]
        },
        {
          "name": "InvalidIndex",
          "doc": [
            "No proposal or bounty at that index."
          ]
        },
        {
          "name": "ReasonTooBig",
          "doc": [
            "The reason given is just too big."
          ]
        },
        {
          "name": "UnexpectedStatus",
          "doc": [
            "The bounty status is unexpected."
          ]
        },
        {
          "name": "RequireCurator",
          "doc": [
            "Require bounty curator."
          ]
        },
        {
          "name": "InvalidValue",
          "doc": [
            "Invalid bounty value."
          ]
        },
        {
          "name": "InvalidFee",
          "doc": [
            "Invalid bounty fee."
          ]
        },
        {
          "name": "PendingPayout",
          "doc": [
            "A bounty payout is pending.",
            "To cancel the bounty, you must unassign and slash the curator."
          ]
        },
        {
          "name": "Premature",
          "doc": [
            "The bounties cannot be claimed/closed because it's still in the countdown period."
          ]
        }
      ],
      "errors_value": {
        "type": 597
      },
      "index": 35
    },
    {
      "name": "Tips",
      "prefix": "Tips",
      "storage": [
        {
          "name": "Tips",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_tipsOpenTip",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
            " This has the insecure enumerable hash function since the key itself is already",
            " guaranteed to be a secure hash."
          ]
        },
        {
          "name": "Reasons",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Vec<U8>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Simple preimage lookup from the reason's hash to the original data. Again, has an",
            " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "2400",
          "name": "report_awesome",
          "docs": [
            "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
            "`DataDepositPerByte` for each byte in `reason`.",
            "",
            "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
            "  a UTF-8-encoded URL.",
            "- `who`: The account which should be credited for the tip.",
            "",
            "Emits `NewTip` if successful.",
            "",
            "# <weight>",
            "- Complexity: `O(R)` where `R` length of `reason`.",
            "  - encoding and hashing of 'reason'",
            "- DbReads: `Reasons`, `Tips`",
            "- DbWrites: `Reasons`, `Tips`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "reason",
              "type": "Vec<U8>"
            },
            {
              "name": "who",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "2401",
          "name": "retract_tip",
          "docs": [
            "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
            "",
            "If successful, the original deposit will be unreserved.",
            "",
            "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
            "must have been reported by the signing account through `report_awesome` (and not",
            "through `tip_new`).",
            "",
            "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
            "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
            "",
            "Emits `TipRetracted` if successful.",
            "",
            "# <weight>",
            "- Complexity: `O(1)`",
            "  - Depends on the length of `T::Hash` which is fixed.",
            "- DbReads: `Tips`, `origin account`",
            "- DbWrites: `Reasons`, `Tips`, `origin account`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "2402",
          "name": "tip_new",
          "docs": [
            "Give a tip for something new; no finder's fee will be taken.",
            "",
            "The dispatch origin for this call must be _Signed_ and the signing account must be a",
            "member of the `Tippers` set.",
            "",
            "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
            "  a UTF-8-encoded URL.",
            "- `who`: The account which should be credited for the tip.",
            "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
            "  value of active tippers will be given to the `who`.",
            "",
            "Emits `NewTip` if successful.",
            "",
            "# <weight>",
            "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
            "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
            "    `ContainsLengthBound`. The actual cost depends on the implementation of",
            "    `T::Tippers`.",
            "  - `O(R)`: hashing and encoding of reason of length `R`",
            "- DbReads: `Tippers`, `Reasons`",
            "- DbWrites: `Reasons`, `Tips`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "reason",
              "type": "Vec<U8>"
            },
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "tip_value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "2403",
          "name": "tip",
          "docs": [
            "Declare a tip value for an already-open tip.",
            "",
            "The dispatch origin for this call must be _Signed_ and the signing account must be a",
            "member of the `Tippers` set.",
            "",
            "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
            "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
            "  account ID.",
            "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
            "  value of active tippers will be given to the `who`.",
            "",
            "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
            "has started.",
            "",
            "# <weight>",
            "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
            "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
            "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
            "",
            "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
            "  is weighted as if almost full i.e of length `T-1`.",
            "- DbReads: `Tippers`, `Tips`",
            "- DbWrites: `Tips`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "hash",
              "type": "[U8; 32]"
            },
            {
              "name": "tip_value",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "2404",
          "name": "close_tip",
          "docs": [
            "Close and payout a tip.",
            "",
            "The dispatch origin for this call must be _Signed_.",
            "",
            "The tip identified by `hash` must have finished its countdown period.",
            "",
            "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
            "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
            "",
            "# <weight>",
            "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
            "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
            "  depends on the implementation of `T::Tippers`.",
            "- DbReads: `Tips`, `Tippers`, `tip finder`",
            "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
            "# </weight>"
          ],
          "args": [
            {
              "name": "hash",
              "type": "[U8; 32]"
            }
          ]
        },
        {
          "lookup": "2405",
          "name": "slash_tip",
          "docs": [
            "Remove and slash an already-open tip.",
            "",
            "May only be called from `T::RejectOrigin`.",
            "",
            "As a result, the finder is slashed and the deposits are lost.",
            "",
            "Emits `TipSlashed` if successful.",
            "",
            "# <weight>",
            "  `T` is charged as upper bound given by `ContainsLengthBound`.",
            "  The actual cost depends on the implementation of `T::Tippers`.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "hash",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 366
      },
      "events": [
        {
          "lookup": "2400",
          "name": "NewTip",
          "docs": [
            "A new tip suggestion has been opened. \\[tip_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2401",
          "name": "TipClosing",
          "docs": [
            "A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2402",
          "name": "TipClosed",
          "docs": [
            "A tip suggestion has been closed. \\[tip_hash, who, payout\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "2403",
          "name": "TipRetracted",
          "docs": [
            "A tip suggestion has been retracted. \\[tip_hash\\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "2404",
          "name": "TipSlashed",
          "docs": [
            "A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"
          ],
          "args": [
            "[U8; 32]",
            "[U8; 32]",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 79
      },
      "constants": [
        {
          "name": "MaximumReasonLength",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00400000",
          "docs": [
            " Maximum acceptable reason length."
          ]
        },
        {
          "name": "DataDepositPerByte",
          "type": "U128",
          "type_value": 6,
          "constants_value": "55a0fc01000000000000000000000000",
          "docs": [
            " The amount held on deposit per byte within the tip report reason or bounty description."
          ]
        },
        {
          "name": "TipCountdown",
          "type": "U32",
          "type_value": 4,
          "constants_value": "40380000",
          "docs": [
            " The period for which a tip remains open after is has achieved threshold tippers."
          ]
        },
        {
          "name": "TipFindersFee",
          "type": "U8",
          "type_value": 229,
          "constants_value": "14",
          "docs": [
            " The percent of the final tip which goes to the original reporter of the tip."
          ]
        },
        {
          "name": "TipReportDepositBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "34a1aec6000000000000000000000000",
          "docs": [
            " The amount held on deposit for placing a tip report."
          ]
        }
      ],
      "errors": [
        {
          "name": "ReasonTooBig",
          "doc": [
            "The reason given is just too big."
          ]
        },
        {
          "name": "AlreadyKnown",
          "doc": [
            "The tip was already found/started."
          ]
        },
        {
          "name": "UnknownTip",
          "doc": [
            "The tip hash is unknown."
          ]
        },
        {
          "name": "NotFinder",
          "doc": [
            "The account attempting to retract the tip is not the finder of the tip."
          ]
        },
        {
          "name": "StillOpen",
          "doc": [
            "The tip cannot be claimed/closed because there are not enough tippers yet."
          ]
        },
        {
          "name": "Premature",
          "doc": [
            "The tip cannot be claimed/closed because it's still in the countdown period."
          ]
        }
      ],
      "errors_value": {
        "type": 599
      },
      "index": 36
    },
    {
      "name": "ElectionProviderMultiPhase",
      "prefix": "ElectionProviderMultiPhase",
      "storage": [
        {
          "name": "Round",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x01000000",
          "docs": [
            " Internal counter for the number of rounds.",
            "",
            " This is useful for de-duplication of transactions submitted to the pool, and general",
            " diagnostics of the pallet.",
            "",
            " This is merely incremented once per every time that an upstream `elect` is called."
          ]
        },
        {
          "name": "CurrentPhase",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_election_provider_multi_phasePhase",
            "PlainTypeValue": 600
          },
          "fallback": "0x00",
          "docs": [
            " Current phase."
          ]
        },
        {
          "name": "QueuedSolution",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_election_provider_multi_phaseReadySolution",
            "PlainTypeValue": 602
          },
          "fallback": "0x00",
          "docs": [
            " Current best solution, signed or unsigned, queued to be returned upon `elect`."
          ]
        },
        {
          "name": "Snapshot",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_election_provider_multi_phaseRoundSnapshot",
            "PlainTypeValue": 603
          },
          "fallback": "0x00",
          "docs": [
            " Snapshot data of the round.",
            "",
            " This is created at the beginning of the signed phase and cleared upon calling `elect`."
          ]
        },
        {
          "name": "DesiredTargets",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " Desired number of targets to elect for this round.",
            "",
            " Only exists when [`Snapshot`] is present."
          ]
        },
        {
          "name": "SnapshotMetadata",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_election_provider_multi_phaseSolutionOrSnapshotSize",
            "PlainTypeValue": 445
          },
          "fallback": "0x00",
          "docs": [
            " The metadata of the [`RoundSnapshot`]",
            "",
            " Only exists when [`Snapshot`] is present."
          ]
        },
        {
          "name": "SignedSubmissionNextIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The next index to be assigned to an incoming signed submission.",
            "",
            " Every accepted submission is assigned a unique index; that index is bound to that particular",
            " submission for the duration of the election. On election finalization, the next index is",
            " reset to 0.",
            "",
            " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
            " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
            " because iteration is slow. Instead, we store the value here."
          ]
        },
        {
          "name": "SignedSubmissionIndices",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<Tuple[U128; 3]U32>",
            "PlainTypeValue": 606
          },
          "fallback": "0x00",
          "docs": [
            " A sorted, bounded set of `(score, index)`, where each `index` points to a value in",
            " `SignedSubmissions`.",
            "",
            " We never need to process more than a single signed submission at a time. Signed submissions",
            " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
            " them one at a time instead of reading and decoding all of them at once."
          ]
        },
        {
          "name": "SignedSubmissionsMap",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "pallet_election_provider_multi_phasesignedSignedSubmission",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000",
          "docs": [
            " Unchecked, signed solutions.",
            "",
            " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
            " allowing us to keep only a single one in memory at a time.",
            "",
            " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
            " affect; we shouldn't need a cryptographically secure hasher."
          ]
        },
        {
          "name": "MinimumUntrustedScore",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "[U128; 3]",
            "PlainTypeValue": 444
          },
          "fallback": "0x00",
          "docs": [
            " The minimum score that each 'untrusted' solution must attain in order to be considered",
            " feasible.",
            "",
            " Can be set via `set_minimum_untrusted_score`."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "2500",
          "name": "submit_unsigned",
          "docs": [
            "Submit a solution for the unsigned phase.",
            "",
            "The dispatch origin fo this call must be __none__.",
            "",
            "This submission is checked on the fly. Moreover, this unsigned solution is only",
            "validated when submitted to the pool from the **local** node. Effectively, this means",
            "that only active validators can submit this transaction when authoring a block (similar",
            "to an inherent).",
            "",
            "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
            "panic if the solution submitted by the validator is invalid in any way, effectively",
            "putting their authoring reward at risk.",
            "",
            "No deposit or reward is associated with this submission."
          ],
          "args": [
            {
              "name": "raw_solution",
              "type": "pallet_election_provider_multi_phaseRawSolution"
            },
            {
              "name": "witness",
              "type": "pallet_election_provider_multi_phaseSolutionOrSnapshotSize"
            }
          ]
        },
        {
          "lookup": "2501",
          "name": "set_minimum_untrusted_score",
          "docs": [
            "Set a new value for `MinimumUntrustedScore`.",
            "",
            "Dispatch origin must be aligned with `T::ForceOrigin`.",
            "",
            "This check can be turned off by setting the value to `None`."
          ],
          "args": [
            {
              "name": "maybe_next_score",
              "type": "option<[U128; 3]>"
            }
          ]
        },
        {
          "lookup": "2502",
          "name": "set_emergency_election_result",
          "docs": [
            "Set a solution in the queue, to be handed out to the client of this pallet in the next",
            "call to `ElectionProvider::elect`.",
            "",
            "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
            "",
            "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
            "feasibility check itself can in principle cause the election process to fail (due to",
            "memory/weight constrains)."
          ],
          "args": [
            {
              "name": "supports",
              "type": "Vec<Tuple[U8; 32]sp_npos_electionsSupport>"
            }
          ]
        },
        {
          "lookup": "2503",
          "name": "submit",
          "docs": [
            "Submit a solution for the signed phase.",
            "",
            "The dispatch origin fo this call must be __signed__.",
            "",
            "The solution is potentially queued, based on the claimed score and processed at the end",
            "of the signed phase.",
            "",
            "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
            "might be rewarded, slashed, or get all or a part of the deposit back.",
            "",
            "# <weight>",
            "Queue size must be provided as witness data.",
            "# </weight>"
          ],
          "args": [
            {
              "name": "raw_solution",
              "type": "pallet_election_provider_multi_phaseRawSolution"
            },
            {
              "name": "num_signed_submissions",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 367
      },
      "events": [
        {
          "lookup": "2500",
          "name": "SolutionStored",
          "docs": [
            "A solution was stored with the given compute.",
            "",
            "If the solution is signed, this means that it hasn't yet been processed. If the",
            "solution is unsigned, this means that it has also been processed.",
            "",
            "The `bool` is `true` when a previous solution was ejected to make room for this one."
          ],
          "args": [
            "pallet_election_provider_multi_phaseElectionCompute",
            "Bool"
          ]
        },
        {
          "lookup": "2501",
          "name": "ElectionFinalized",
          "docs": [
            "The election has been finalized, with `Some` of the given computation, or else if the",
            "election failed, `None`."
          ],
          "args": [
            "option<pallet_election_provider_multi_phaseElectionCompute>"
          ]
        },
        {
          "lookup": "2502",
          "name": "Rewarded",
          "docs": [
            "An account has been rewarded for their signed submission being finalized."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "2503",
          "name": "Slashed",
          "docs": [
            "An account has been slashed for submitting an invalid signed submission."
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "2504",
          "name": "SignedPhaseStarted",
          "docs": [
            "The signed phase of the given round has started."
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "2505",
          "name": "UnsignedPhaseStarted",
          "docs": [
            "The unsigned phase of the given round has started."
          ],
          "args": [
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 80
      },
      "constants": [
        {
          "name": "UnsignedPhase",
          "type": "U32",
          "type_value": 4,
          "constants_value": "96000000",
          "docs": [
            " Duration of the unsigned phase."
          ]
        },
        {
          "name": "SignedPhase",
          "type": "U32",
          "type_value": 4,
          "constants_value": "96000000",
          "docs": [
            " Duration of the signed phase."
          ]
        },
        {
          "name": "SolutionImprovementThreshold",
          "type": "U32",
          "type_value": 148,
          "constants_value": "20a10700",
          "docs": [
            " The minimum amount of improvement to the solution score that defines a solution as",
            " \"better\" (in any phase)."
          ]
        },
        {
          "name": "OffchainRepeat",
          "type": "U32",
          "type_value": 4,
          "constants_value": "05000000",
          "docs": [
            " The repeat threshold of the offchain worker.",
            "",
            " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
            " to submit the worker's solution."
          ]
        },
        {
          "name": "MinerTxPriority",
          "type": "U64",
          "type_value": 8,
          "constants_value": "65666666666666e6",
          "docs": [
            " The priority of the unsigned transaction submitted in the unsigned-phase"
          ]
        },
        {
          "name": "MinerMaxWeight",
          "type": "U64",
          "type_value": 8,
          "constants_value": "c084666557010000",
          "docs": [
            " Maximum weight that the miner should consume.",
            "",
            " The miner will ensure that the total weight of the unsigned solution will not exceed",
            " this value, based on [`WeightInfo::submit_unsigned`]."
          ]
        },
        {
          "name": "SignedMaxSubmissions",
          "type": "U32",
          "type_value": 4,
          "constants_value": "10000000",
          "docs": [
            " Maximum number of signed submissions that can be queued.",
            "",
            " It is best to avoid adjusting this during an election, as it impacts downstream data",
            " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
            " update this value during an election, you _must_ ensure that",
            " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
            " attempts to submit new solutions may cause a runtime panic."
          ]
        },
        {
          "name": "SignedMaxWeight",
          "type": "U64",
          "type_value": 8,
          "constants_value": "c084666557010000",
          "docs": [
            " Maximum weight of a signed solution.",
            "",
            " This should probably be similar to [`Config::MinerMaxWeight`]."
          ]
        },
        {
          "name": "SignedRewardBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "00e87648170000000000000000000000",
          "docs": [
            " Base reward for a signed solution"
          ]
        },
        {
          "name": "SignedDepositBase",
          "type": "U128",
          "type_value": 6,
          "constants_value": "2030490b1f0000000000000000000000",
          "docs": [
            " Base deposit for a signed solution."
          ]
        },
        {
          "name": "SignedDepositByte",
          "type": "U128",
          "type_value": 6,
          "constants_value": "277f0000000000000000000000000000",
          "docs": [
            " Per-byte deposit for a signed solution."
          ]
        },
        {
          "name": "SignedDepositWeight",
          "type": "U128",
          "type_value": 6,
          "constants_value": "00000000000000000000000000000000",
          "docs": [
            " Per-weight deposit for a signed solution."
          ]
        },
        {
          "name": "VoterSnapshotPerBlock",
          "type": "U32",
          "type_value": 4,
          "constants_value": "e4570000",
          "docs": [
            " The maximum number of voters to put in the snapshot. At the moment, snapshots are only",
            " over a single block, but once multi-block elections are introduced they will take place",
            " over multiple blocks.",
            "",
            " Also, note the data type: If the voters are represented by a `u32` in `type",
            " CompactSolution`, the same `u32` is used here to ensure bounds are respected."
          ]
        },
        {
          "name": "MinerMaxLength",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00003600",
          "docs": [
            " Maximum length (bytes) that the mined solution should consume.",
            "",
            " The miner will ensure that the total length of the unsigned solution will not exceed",
            " this value."
          ]
        }
      ],
      "errors": [
        {
          "name": "PreDispatchEarlySubmission",
          "doc": [
            "Submission was too early."
          ]
        },
        {
          "name": "PreDispatchWrongWinnerCount",
          "doc": [
            "Wrong number of winners presented."
          ]
        },
        {
          "name": "PreDispatchWeakSubmission",
          "doc": [
            "Submission was too weak, score-wise."
          ]
        },
        {
          "name": "SignedQueueFull",
          "doc": [
            "The queue was full, and the solution was not better than any of the existing ones."
          ]
        },
        {
          "name": "SignedCannotPayDeposit",
          "doc": [
            "The origin failed to pay the deposit."
          ]
        },
        {
          "name": "SignedInvalidWitness",
          "doc": [
            "Witness data to dispatchable is invalid."
          ]
        },
        {
          "name": "SignedTooMuchWeight",
          "doc": [
            "The signed submission consumes too much weight"
          ]
        },
        {
          "name": "OcwCallWrongEra",
          "doc": [
            "OCW submitted solution for wrong round"
          ]
        },
        {
          "name": "MissingSnapshotMetadata",
          "doc": [
            "Snapshot metadata should exist but didn't."
          ]
        },
        {
          "name": "InvalidSubmissionIndex",
          "doc": [
            "`Self::insert_submission` returned an invalid index."
          ]
        },
        {
          "name": "CallNotAllowed",
          "doc": [
            "The call is not allowed at this point."
          ]
        }
      ],
      "errors_value": {
        "type": 611
      },
      "index": 37
    },
    {
      "name": "Gilt",
      "prefix": "Gilt",
      "storage": [
        {
          "name": "QueueTotals",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<TupleU32U128>",
            "PlainTypeValue": 558
          },
          "fallback": "0x00",
          "docs": [
            " The totals of items and balances within each queue. Saves a lot of storage reads in the",
            " case of sparsely packed queues.",
            "",
            " The vector is indexed by duration in `Period`s, offset by one, so information on the queue",
            " whose duration is one `Period` would be storage `0`."
          ]
        },
        {
          "name": "Queues",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<pallet_giltpalletGiltBid>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The queues of bids ready to become gilts. Indexed by duration (in `Period`s)."
          ]
        },
        {
          "name": "ActiveTotal",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_giltpalletActiveGiltsTotal",
            "PlainTypeValue": 614
          },
          "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " Information relating to the gilts currently active."
          ]
        },
        {
          "name": "Active",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "pallet_giltpalletActiveGilt",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The currently active gilts, indexed according to the order of creation."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "2600",
          "name": "place_bid",
          "docs": [
            "Place a bid for a gilt to be issued.",
            "",
            "Origin must be Signed, and account must have at least `amount` in free balance.",
            "",
            "- `amount`: The amount of the bid; these funds will be reserved. If the bid is",
            "successfully elevated into an issued gilt, then these funds will continue to be",
            "reserved until the gilt expires. Must be at least `MinFreeze`.",
            "- `duration`: The number of periods for which the funds will be locked if the gilt is",
            "issued. It will expire only after this period has elapsed after the point of issuance.",
            "Must be greater than 1 and no more than `QueueCount`.",
            "",
            "Complexities:",
            "- `Queues[duration].len()` (just take max)."
          ],
          "args": [
            {
              "name": "amount",
              "type": "compact<U128>"
            },
            {
              "name": "duration",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "2601",
          "name": "retract_bid",
          "docs": [
            "Retract a previously placed bid.",
            "",
            "Origin must be Signed, and the account should have previously issued a still-active bid",
            "of `amount` for `duration`.",
            "",
            "- `amount`: The amount of the previous bid.",
            "- `duration`: The duration of the previous bid."
          ],
          "args": [
            {
              "name": "amount",
              "type": "compact<U128>"
            },
            {
              "name": "duration",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "2602",
          "name": "set_target",
          "docs": [
            "Set target proportion of gilt-funds.",
            "",
            "Origin must be `AdminOrigin`.",
            "",
            "- `target`: The target proportion of effective issued funds that should be under gilts",
            "at any one time."
          ],
          "args": [
            {
              "name": "target",
              "type": "compact<U64>"
            }
          ]
        },
        {
          "lookup": "2603",
          "name": "thaw",
          "docs": [
            "Remove an active but expired gilt. Reserved funds under gilt are freed and balance is",
            "adjusted to ensure that the funds grow or shrink to maintain the equivalent proportion",
            "of effective total issued funds.",
            "",
            "Origin must be Signed and the account must be the owner of the gilt of the given index.",
            "",
            "- `index`: The index of the gilt to be thawed."
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 450
      },
      "events": [
        {
          "lookup": "2600",
          "name": "BidPlaced",
          "docs": [
            "A bid was successfully placed.",
            "\\[ who, amount, duration \\]"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "U32"
          ]
        },
        {
          "lookup": "2601",
          "name": "BidRetracted",
          "docs": [
            "A bid was successfully removed (before being accepted as a gilt).",
            "\\[ who, amount, duration \\]"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "U32"
          ]
        },
        {
          "lookup": "2602",
          "name": "GiltIssued",
          "docs": [
            "A bid was accepted as a gilt. The balance may not be released until expiry.",
            "\\[ index, expiry, who, amount \\]"
          ],
          "args": [
            "U32",
            "U32",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "2603",
          "name": "GiltThawed",
          "docs": [
            "An expired gilt has been thawed.",
            "\\[ index, who, original_amount, additional_amount \\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "U128",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 83
      },
      "constants": [
        {
          "name": "IgnoredIssuance",
          "type": "U128",
          "type_value": 6,
          "constants_value": "f7325890955726060000000000000000",
          "docs": [
            " The issuance to ignore. This is subtracted from the `Currency`'s `total_issuance` to get",
            " the issuance by which we inflate or deflate the gilt."
          ]
        },
        {
          "name": "QueueCount",
          "type": "U32",
          "type_value": 4,
          "constants_value": "2c010000",
          "docs": [
            " Number of duration queues in total. This sets the maximum duration supported, which is",
            " this value multiplied by `Period`."
          ]
        },
        {
          "name": "MaxQueueLen",
          "type": "U32",
          "type_value": 4,
          "constants_value": "e8030000",
          "docs": [
            " Maximum number of items that may be in each duration queue."
          ]
        },
        {
          "name": "FifoQueueLen",
          "type": "U32",
          "type_value": 4,
          "constants_value": "fa000000",
          "docs": [
            " Portion of the queue which is free from ordering and just a FIFO.",
            "",
            " Must be no greater than `MaxQueueLen`."
          ]
        },
        {
          "name": "Period",
          "type": "U32",
          "type_value": 4,
          "constants_value": "80970600",
          "docs": [
            " The base period for the duration queues. This is the common multiple across all",
            " supported freezing durations that can be bid upon."
          ]
        },
        {
          "name": "MinFreeze",
          "type": "U128",
          "type_value": 6,
          "constants_value": "50f8369c4d0000000000000000000000",
          "docs": [
            " The minimum amount of funds that may be offered to freeze for a gilt. Note that this",
            " does not actually limit the amount which may be frozen in a gilt since gilts may be",
            " split up in order to satisfy the desired amount of funds under gilts.",
            "",
            " It should be at least big enough to ensure that there is no possible storage spam attack",
            " or queue-filling attack."
          ]
        },
        {
          "name": "IntakePeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "32000000",
          "docs": [
            " The number of blocks between consecutive attempts to issue more gilts in an effort to",
            " get to the target amount to be frozen.",
            "",
            " A larger value results in fewer storage hits each block, but a slower period to get to",
            " the target."
          ]
        },
        {
          "name": "MaxIntakeBids",
          "type": "U32",
          "type_value": 4,
          "constants_value": "64000000",
          "docs": [
            " The maximum amount of bids that can be turned into issued gilts each block. A larger",
            " value here means less of the block available for transactions should there be a glut of",
            " bids to make into gilts to reach the target."
          ]
        }
      ],
      "errors": [
        {
          "name": "DurationTooSmall",
          "doc": [
            "The duration of the bid is less than one."
          ]
        },
        {
          "name": "DurationTooBig",
          "doc": [
            "The duration is the bid is greater than the number of queues."
          ]
        },
        {
          "name": "AmountTooSmall",
          "doc": [
            "The amount of the bid is less than the minimum allowed."
          ]
        },
        {
          "name": "BidTooLow",
          "doc": [
            "The queue for the bid's duration is full and the amount bid is too low to get in",
            "through replacing an existing bid."
          ]
        },
        {
          "name": "Unknown",
          "doc": [
            "Gilt index is unknown."
          ]
        },
        {
          "name": "NotOwner",
          "doc": [
            "Not the owner of the gilt."
          ]
        },
        {
          "name": "NotExpired",
          "doc": [
            "Gilt not yet at expiry date."
          ]
        },
        {
          "name": "NotFound",
          "doc": [
            "The given bid for retraction is not found."
          ]
        }
      ],
      "errors_value": {
        "type": 616
      },
      "index": 38
    },
    {
      "name": "BagsList",
      "prefix": "BagsList",
      "storage": [
        {
          "name": "CounterForListNodes",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " How many ids are registered."
          ]
        },
        {
          "name": "ListNodes",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "pallet_bags_listlistNode",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " A single node, within some bag.",
            "",
            " Nodes store links forward and back within their respective bags."
          ]
        },
        {
          "name": "ListBags",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U64"
              ],
              "value": "pallet_bags_listlistBag",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " A bag stored in storage.",
            "",
            " Stores a `Bag` struct, which stores head and tail pointers to itself."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "2700",
          "name": "rebag",
          "docs": [
            "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
            "changed its weight that it should properly fall into a different bag than its current",
            "one.",
            "",
            "Anyone can call this function about any potentially dislocated account.",
            "",
            "Will never return an error; if `dislocated` does not exist or doesn't need a rebag, then",
            "it is a noop and fees are still collected from `origin`."
          ],
          "args": [
            {
              "name": "dislocated",
              "type": "[U8; 32]"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 453
      },
      "events": [
        {
          "lookup": "2700",
          "name": "Rebagged",
          "docs": [
            "Moved an account from one bag to another. \\[who, from, to\\]."
          ],
          "args": [
            "[U8; 32]",
            "U64",
            "U64"
          ]
        }
      ],
      "events_value": {
        "type": 84
      },
      "constants": [
        {
          "name": "BagThresholds",
          "type": "Vec<U64>",
          "type_value": 619,
          "constants_value": "210355a0fc0100000000daa64602000000006e739b02000000007997fc0200000000d0de6b03000000003358eb03000000000d5f7d04000000009aa6240500000000b146e4050000000067cabf0600000000d640bb07000000005350db0800000000714c250a00000000364f9f0b000000000056500d000000009862400f000000001ba17811000000006593031400000000cd42ed16000000002079431a00000000e401161e000000001ef5762200000000f90c7b2700000000e0073a2d00000000e818cf33000000008c68593b000000002ea8fc43000000000abbe14d00000000c3773759000000001986336600000000e85c13750000000018651d8600000000e846a29900000000be67feaf00000000849f9bc900000000ad2df3e60000000028f78f0801000000d817112f01000000bed32c5b01000000c2f5b38d010000000aac95c7010000002bf4e3090200000022acd855020000001060dbac020000002ef08710030000007c2eb682030000002b988205040000001754589b040000009da5fc4605000000ff099c0b060000006c3ed9ec06000000c475deee07000000960f711609000000aa2d08690a000000f892e6ec0b0000008c4638a90d000000978634a60f0000006dac44ed1100000078b93089140000001660528617000000e479cff21a0000004000ddde1e000000ffc30b5d23000000824fa082280000002793f7672e000000a638fa283500000048bfa0e53c00000047d28ac245000000c5a5ace94f000000f68e158b5b0000009083d3dd6800000066b5f72078000000cf1bc19c89000000fc6ff2a39d0000001eef5995b4000000c02092ddce000000b2ed03f9ec000000078933760f010000d30e63f8360100001252973a64010000e1230d1398010000a0722f77d301000078012180170200006533ef6f65020000428586b7be02000028e784fd24030000b13f0a269a030000d016ac5b2004000022c8b619ba04000079c7ec376a050000e092fbf7330600003d05e6141b070000f701add423080000d8108a1c53090000c8ab1b88ae0a0000b2eff0833c0c0000e858f26b040e00000f7d37ae0e100000d5a7eef264120000583f134a121500001753cb5f231800005c3664b8a61b0000a61a0af5ac1f000033f27f22492400004b3a4c1391290000288805c79d2f000037d3a7e08b360000ffa1222e7c3e0000f0c4a14394470000e5ad6f2dff510000076ebb3bee5d0000abf006ec996b00008c6c8ef4427b00003ad69a76338d0000ba57695dc0a100005dda24f04ab90000b66f609e42d400007655960f27f30000258d6c7f8a1601005169eb71143f0100b9be72cc846d01003c4b1762b7a20100cc2f3404a8df0100f7276e2a77250200480b33486f7502001d5cf5e80ad102000f6410b0fb390300a904775d32b203002de121fde73b040030afb76ca8d90400fb753e695e8e05003c44e45d615d06002cb93b35854a0700a8f8cb772c5a08007a48b90d5d9109003d3dc705d8f50a000d1e42d2348e0c001cb0be7c00620e0024796364e17910001b8ded2fc0df1200d3e942b5f69e1500e8ca99b485c41800d0c88c65525f1c00c2f577f96c8020000abce260613b250074bd4dd293a62a00ec4b61c8aadb300048b0376d08f83700c01384b1551d4000dc2bfda12172490070b645ed972254006cfc51fa516160006c93086d46686e009caae886db797e00c036837621e29000a0649b653af8a50028a34ceef61fbe00385aa297aecbd900483335165d7ef900d0cae4520ece1d010090a7aea4664701e09d92a5060d770130778edcc2a2ad01d00bb8d53b2aec0140b18c096fcb3302805193026ed98502a0f6d663a3d8e30260bbcb8701864f03a045f8b63cdfca0340816de8372c5804405e20a9d009fa04808d72453d76b30580f35bc037df8706804eeca838327b0700b198a10eef9108800b2f9b2a3dd10980a2489405043f0b00724c5a1307e20c00d8f897c605c20e009890be3de0e71000434f6546c15d1300d61cff7d4e2f16009b32b873df691900008775d0bc1c1d00da56ebaf68592100dacb4281f13326003c889ef750c32b000ab7e6cbd8213200346dad52af6d39005047e9335ec9410024ee18e8755c4b0038d4b40049545600087d76b2c2e46200981c03995c497100881e553f38c68100b0cb90a161a99400284fe59e404caa00c0e54a304015c30060cd7437b379dfffffffffffffffff",
          "docs": [
            " The list of thresholds separating the various bags.",
            "",
            " Ids are separated into unsorted bags according to their vote weight. This specifies the",
            " thresholds separating the bags. An id's bag is the largest bag for which the id's weight",
            " is less than or equal to its upper threshold.",
            "",
            " When ids are iterated, higher bags are iterated completely before lower bags. This means",
            " that iteration is _semi-sorted_: ids of higher weight tend to come before ids of lower",
            " weight, but peer ids within a particular bag are sorted in insertion order.",
            "",
            " # Expressing the constant",
            "",
            " This constant must be sorted in strictly increasing order. Duplicate items are not",
            " permitted.",
            "",
            " There is an implied upper limit of `VoteWeight::MAX`; that value does not need to be",
            " specified within the bag. For any two threshold lists, if one ends with",
            " `VoteWeight::MAX`, the other one does not, and they are otherwise equal, the two lists",
            " will behave identically.",
            "",
            " # Calculation",
            "",
            " It is recommended to generate the set of thresholds in a geometric series, such that",
            " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
            " constant_ratio).max(threshold[k] + 1)` for all `k`.",
            "",
            " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
            "",
            " # Examples",
            "",
            " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
            "   iteration is strictly in insertion order.",
            " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
            "   the procedure given above, then the constant ratio is equal to 2.",
            " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
            "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
            " - If the threshold list begins `[1, 2, 3, ...]`, then an id with weight 0 or 1 will fall",
            "   into bag 0, an id with weight 2 will fall into bag 1, etc.",
            "",
            " # Migration",
            "",
            " In the event that this list ever changes, a copy of the old bags list must be retained.",
            " With that `List::migrate` can be called, which will perform the appropriate migration."
          ]
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 39
    },
    {
      "name": "ParachainsOrigin",
      "prefix": "",
      "storage": null,
      "errors": null,
      "errors_value": null,
      "index": 50
    },
    {
      "name": "Configuration",
      "prefix": "Configuration",
      "storage": [
        {
          "name": "ActiveConfig",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "polkadot_runtime_parachainsconfigurationHostConfiguration",
            "PlainTypeValue": 620
          },
          "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000100000001000000000000000000060000006400000002000000c8000000010000000000000000000000000000000000000000c817a804000000",
          "docs": [
            " The active configuration for the current session."
          ]
        },
        {
          "name": "PendingConfig",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_runtime_parachainsconfigurationHostConfiguration",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Pending configuration (if any) for the next session."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "3300",
          "name": "set_validation_upgrade_frequency",
          "docs": [
            "Set the validation upgrade frequency."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3301",
          "name": "set_validation_upgrade_delay",
          "docs": [
            "Set the validation upgrade delay."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3302",
          "name": "set_code_retention_period",
          "docs": [
            "Set the acceptance period for an included candidate."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3303",
          "name": "set_max_code_size",
          "docs": [
            "Set the max validation code size for incoming upgrades."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3304",
          "name": "set_max_pov_size",
          "docs": [
            "Set the max POV block size for incoming upgrades."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3305",
          "name": "set_max_head_data_size",
          "docs": [
            "Set the max head data size for paras."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3306",
          "name": "set_parathread_cores",
          "docs": [
            "Set the number of parathread execution cores."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3307",
          "name": "set_parathread_retries",
          "docs": [
            "Set the number of retries for a particular parathread."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3308",
          "name": "set_group_rotation_frequency",
          "docs": [
            "Set the parachain validator-group rotation frequency"
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3309",
          "name": "set_chain_availability_period",
          "docs": [
            "Set the availability period for parachains."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "330a",
          "name": "set_thread_availability_period",
          "docs": [
            "Set the availability period for parathreads."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "330b",
          "name": "set_scheduling_lookahead",
          "docs": [
            "Set the scheduling lookahead, in expected number of blocks at peak throughput."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "330c",
          "name": "set_max_validators_per_core",
          "docs": [
            "Set the maximum number of validators to assign to any core."
          ],
          "args": [
            {
              "name": "new",
              "type": "option<U32>"
            }
          ]
        },
        {
          "lookup": "330d",
          "name": "set_max_validators",
          "docs": [
            "Set the maximum number of validators to use in parachain consensus."
          ],
          "args": [
            {
              "name": "new",
              "type": "option<U32>"
            }
          ]
        },
        {
          "lookup": "330e",
          "name": "set_dispute_period",
          "docs": [
            "Set the dispute period, in number of sessions to keep for disputes."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "330f",
          "name": "set_dispute_post_conclusion_acceptance_period",
          "docs": [
            "Set the dispute post conclusion acceptance period."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3310",
          "name": "set_dispute_max_spam_slots",
          "docs": [
            "Set the maximum number of dispute spam slots."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3311",
          "name": "set_dispute_conclusion_by_time_out_period",
          "docs": [
            "Set the dispute conclusion by time out period."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3312",
          "name": "set_no_show_slots",
          "docs": [
            "Set the no show slots, in number of number of consensus slots.",
            "Must be at least 1."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3313",
          "name": "set_n_delay_tranches",
          "docs": [
            "Set the total number of delay tranches."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3314",
          "name": "set_zeroth_delay_tranche_width",
          "docs": [
            "Set the zeroth delay tranche width."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3315",
          "name": "set_needed_approvals",
          "docs": [
            "Set the number of validators needed to approve a block."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3316",
          "name": "set_relay_vrf_modulo_samples",
          "docs": [
            "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3317",
          "name": "set_max_upward_queue_count",
          "docs": [
            "Sets the maximum items that can present in a upward dispatch queue at once."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3318",
          "name": "set_max_upward_queue_size",
          "docs": [
            "Sets the maximum total size of items that can present in a upward dispatch queue at once."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3319",
          "name": "set_max_downward_message_size",
          "docs": [
            "Set the critical downward message size."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "331a",
          "name": "set_ump_service_total_weight",
          "docs": [
            "Sets the soft limit for the phase of dispatching dispatchable upward messages."
          ],
          "args": [
            {
              "name": "new",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "331b",
          "name": "set_max_upward_message_size",
          "docs": [
            "Sets the maximum size of an upward message that can be sent by a candidate."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "331c",
          "name": "set_max_upward_message_num_per_candidate",
          "docs": [
            "Sets the maximum number of messages that a candidate can contain."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "331d",
          "name": "set_hrmp_open_request_ttl",
          "docs": [
            "Sets the number of sessions after which an HRMP open channel request expires."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "331e",
          "name": "set_hrmp_sender_deposit",
          "docs": [
            "Sets the amount of funds that the sender should provide for opening an HRMP channel."
          ],
          "args": [
            {
              "name": "new",
              "type": "U128"
            }
          ]
        },
        {
          "lookup": "331f",
          "name": "set_hrmp_recipient_deposit",
          "docs": [
            "Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
            "channel."
          ],
          "args": [
            {
              "name": "new",
              "type": "U128"
            }
          ]
        },
        {
          "lookup": "3320",
          "name": "set_hrmp_channel_max_capacity",
          "docs": [
            "Sets the maximum number of messages allowed in an HRMP channel at once."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3321",
          "name": "set_hrmp_channel_max_total_size",
          "docs": [
            "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3322",
          "name": "set_hrmp_max_parachain_inbound_channels",
          "docs": [
            "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3323",
          "name": "set_hrmp_max_parathread_inbound_channels",
          "docs": [
            "Sets the maximum number of inbound HRMP channels a parathread is allowed to accept."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3324",
          "name": "set_hrmp_channel_max_message_size",
          "docs": [
            "Sets the maximum size of a message that could ever be put into an HRMP channel."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3325",
          "name": "set_hrmp_max_parachain_outbound_channels",
          "docs": [
            "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3326",
          "name": "set_hrmp_max_parathread_outbound_channels",
          "docs": [
            "Sets the maximum number of outbound HRMP channels a parathread is allowed to open."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3327",
          "name": "set_hrmp_max_message_num_per_candidate",
          "docs": [
            "Sets the maximum number of outbound HRMP messages can be sent by a candidate."
          ],
          "args": [
            {
              "name": "new",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3328",
          "name": "set_ump_max_individual_weight",
          "docs": [
            "Sets the maximum amount of weight any individual upward message may consume."
          ],
          "args": [
            {
              "name": "new",
              "type": "U64"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 454
      },
      "errors": [
        {
          "name": "InvalidNewValue",
          "doc": [
            "The new value for a configuration parameter is invalid."
          ]
        }
      ],
      "errors_value": {
        "type": 621
      },
      "index": 51
    },
    {
      "name": "ParasShared",
      "prefix": "ParasShared",
      "storage": [
        {
          "name": "CurrentSessionIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The current session index."
          ]
        },
        {
          "name": "ActiveValidatorIndices",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<U32>",
            "PlainTypeValue": 622
          },
          "fallback": "0x00",
          "docs": [
            " All the validators actively participating in parachain consensus.",
            " Indices are into the broader validator set."
          ]
        },
        {
          "name": "ActiveValidatorKeys",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 623
          },
          "fallback": "0x00",
          "docs": [
            " The parachain attestation keys of the validators actively participating in parachain consensus.",
            " This should be the same length as `ActiveValidatorIndices`."
          ]
        }
      ],
      "calls_value": {
        "type": 455
      },
      "errors": null,
      "errors_value": null,
      "index": 52
    },
    {
      "name": "ParaInclusion",
      "prefix": "ParaInclusion",
      "storage": [
        {
          "name": "AvailabilityBitfields",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_runtime_parachainsinclusionAvailabilityBitfieldRecord",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The latest bitfield for each validator, referred to by their index in the validator set."
          ]
        },
        {
          "name": "PendingAvailability",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_runtime_parachainsinclusionCandidatePendingAvailability",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Candidates pending availability by `ParaId`."
          ]
        },
        {
          "name": "PendingAvailabilityCommitments",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_primitivesv1CandidateCommitments",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The commitments of candidates pending availability, by `ParaId`."
          ]
        }
      ],
      "calls_value": {
        "type": 456
      },
      "events": [
        {
          "lookup": "3500",
          "name": "CandidateBacked",
          "docs": [
            "A candidate was backed. `[candidate, head_data]`"
          ],
          "args": [
            "polkadot_primitivesv1CandidateReceipt",
            "Vec<U8>",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "3501",
          "name": "CandidateIncluded",
          "docs": [
            "A candidate was included. `[candidate, head_data]`"
          ],
          "args": [
            "polkadot_primitivesv1CandidateReceipt",
            "Vec<U8>",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "3502",
          "name": "CandidateTimedOut",
          "docs": [
            "A candidate timed out. `[candidate, head_data]`"
          ],
          "args": [
            "polkadot_primitivesv1CandidateReceipt",
            "Vec<U8>",
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 85
      },
      "errors": [
        {
          "name": "WrongBitfieldSize",
          "doc": [
            "Availability bitfield has unexpected size."
          ]
        },
        {
          "name": "BitfieldDuplicateOrUnordered",
          "doc": [
            "Multiple bitfields submitted by same validator or validators out of order by index."
          ]
        },
        {
          "name": "ValidatorIndexOutOfBounds",
          "doc": [
            "Validator index out of bounds."
          ]
        },
        {
          "name": "InvalidBitfieldSignature",
          "doc": [
            "Invalid signature"
          ]
        },
        {
          "name": "UnscheduledCandidate",
          "doc": [
            "Candidate submitted but para not scheduled."
          ]
        },
        {
          "name": "CandidateScheduledBeforeParaFree",
          "doc": [
            "Candidate scheduled despite pending candidate already existing for the para."
          ]
        },
        {
          "name": "WrongCollator",
          "doc": [
            "Candidate included with the wrong collator."
          ]
        },
        {
          "name": "ScheduledOutOfOrder",
          "doc": [
            "Scheduled cores out of order."
          ]
        },
        {
          "name": "HeadDataTooLarge",
          "doc": [
            "Head data exceeds the configured maximum."
          ]
        },
        {
          "name": "PrematureCodeUpgrade",
          "doc": [
            "Code upgrade prematurely."
          ]
        },
        {
          "name": "NewCodeTooLarge",
          "doc": [
            "Output code is too large"
          ]
        },
        {
          "name": "CandidateNotInParentContext",
          "doc": [
            "Candidate not in parent context."
          ]
        },
        {
          "name": "UnoccupiedBitInBitfield",
          "doc": [
            "The bitfield contains a bit relating to an unassigned availability core."
          ]
        },
        {
          "name": "InvalidGroupIndex",
          "doc": [
            "Invalid group index in core assignment."
          ]
        },
        {
          "name": "InsufficientBacking",
          "doc": [
            "Insufficient (non-majority) backing."
          ]
        },
        {
          "name": "InvalidBacking",
          "doc": [
            "Invalid (bad signature, unknown validator, etc.) backing."
          ]
        },
        {
          "name": "NotCollatorSigned",
          "doc": [
            "Collator did not sign PoV."
          ]
        },
        {
          "name": "ValidationDataHashMismatch",
          "doc": [
            "The validation data hash does not match expected."
          ]
        },
        {
          "name": "InternalError",
          "doc": [
            "Internal error only returned when compiled with debug assertions."
          ]
        },
        {
          "name": "IncorrectDownwardMessageHandling",
          "doc": [
            "The downward message queue is not processed correctly."
          ]
        },
        {
          "name": "InvalidUpwardMessages",
          "doc": [
            "At least one upward message sent does not pass the acceptance criteria."
          ]
        },
        {
          "name": "HrmpWatermarkMishandling",
          "doc": [
            "The candidate didn't follow the rules of HRMP watermark advancement."
          ]
        },
        {
          "name": "InvalidOutboundHrmp",
          "doc": [
            "The HRMP messages sent by the candidate is not valid."
          ]
        },
        {
          "name": "InvalidValidationCodeHash",
          "doc": [
            "The validation code hash of the candidate is not valid."
          ]
        },
        {
          "name": "ParaHeadMismatch",
          "doc": [
            "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual para head in the",
            "commitments."
          ]
        }
      ],
      "errors_value": {
        "type": 626
      },
      "index": 53
    },
    {
      "name": "ParaInherent",
      "prefix": "ParaInherent",
      "storage": [
        {
          "name": "Included",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "NULL",
            "PlainTypeValue": 53
          },
          "fallback": "0x00",
          "docs": [
            " Whether the paras inherent was included within this block.",
            "",
            " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
            " due to the guarantees of FRAME's storage APIs.",
            "",
            " If this is `None` at the end of the block, we panic and render the block invalid."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "3600",
          "name": "enter",
          "docs": [
            "Enter the paras inherent. This will process bitfields and backed candidates."
          ],
          "args": [
            {
              "name": "data",
              "type": "polkadot_primitivesv1InherentData"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 457
      },
      "errors": [
        {
          "name": "TooManyInclusionInherents",
          "doc": [
            "Inclusion inherent called more than once per block."
          ]
        },
        {
          "name": "InvalidParentHeader",
          "doc": [
            "The hash of the submitted parent header doesn't correspond to the saved block hash of",
            "the parent."
          ]
        },
        {
          "name": "CandidateConcludedInvalid",
          "doc": [
            "Disputed candidate that was concluded invalid."
          ]
        }
      ],
      "errors_value": {
        "type": 627
      },
      "index": 54
    },
    {
      "name": "ParaScheduler",
      "prefix": "ParaScheduler",
      "storage": [
        {
          "name": "ValidatorGroups",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<Vec<U32>>",
            "PlainTypeValue": 628
          },
          "fallback": "0x00",
          "docs": [
            " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
            " broader set of Polkadot validators, but instead just the subset used for parachains during",
            " this session.",
            "",
            " Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers.",
            " Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k."
          ]
        },
        {
          "name": "ParathreadQueue",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "polkadot_runtime_parachainsschedulerParathreadClaimQueue",
            "PlainTypeValue": 629
          },
          "fallback": "0x0000000000",
          "docs": [
            " A queue of upcoming claims and which core they should be mapped onto.",
            "",
            " The number of queued claims is bounded at the `scheduling_lookahead`",
            " multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500."
          ]
        },
        {
          "name": "AvailabilityCores",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<option<polkadot_primitivesv1CoreOccupied>>",
            "PlainTypeValue": 634
          },
          "fallback": "0x00",
          "docs": [
            " One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be",
            " temporarily `Some` if scheduled but not occupied.",
            " The i'th parachain belongs to the i'th core, with the remaining cores all being",
            " parathread-multiplexers.",
            "",
            " Bounded by the maximum of either of these two values:",
            "   * The number of parachains and parathread multiplexers",
            "   * The number of validators divided by `configuration.max_validators_per_core`."
          ]
        },
        {
          "name": "ParathreadClaimIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<U32>",
            "PlainTypeValue": 637
          },
          "fallback": "0x00",
          "docs": [
            " An index used to ensure that only one claim on a parathread exists in the queue or is",
            " currently being handled by an occupied core.",
            "",
            " Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500."
          ]
        },
        {
          "name": "SessionStartBlock",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The block number where the session start occurred. Used to track how many group rotations have occurred.",
            "",
            " Note that in the context of parachains modules the session change is signaled during",
            " the block and enacted at the end of the block (at the finalization stage, to be exact).",
            " Thus for all intents and purposes the effect of the session change is observed at the",
            " block following the session change, block number of which we save in this storage value."
          ]
        },
        {
          "name": "Scheduled",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<polkadot_runtime_parachainsschedulerCoreAssignment>",
            "PlainTypeValue": 638
          },
          "fallback": "0x00",
          "docs": [
            " Currently scheduled cores - free but up to be occupied.",
            "",
            " Bounded by the number of cores: one for each parachain and parathread multiplexer.",
            "",
            " The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/",
            " for the upcoming block."
          ]
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 55
    },
    {
      "name": "Paras",
      "prefix": "Paras",
      "storage": [
        {
          "name": "Parachains",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<U32>",
            "PlainTypeValue": 637
          },
          "fallback": "0x00",
          "docs": [
            " All parachains. Ordered ascending by `ParaId`. Parathreads are not included."
          ]
        },
        {
          "name": "ParaLifecycles",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_runtime_parachainsparasParaLifecycle",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The current lifecycle of a all known Para IDs."
          ]
        },
        {
          "name": "Heads",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<U8>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The head-data of every registered para."
          ]
        },
        {
          "name": "CurrentCodeHash",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "[U8; 32]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The validation code hash of every live para.",
            "",
            " Corresponding code can be retrieved with [`CodeByHash`]."
          ]
        },
        {
          "name": "PastCodeHash",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "TupleU32U32"
              ],
              "value": "[U8; 32]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Actual past code hash, indicated by the para id as well as the block number at which it",
            " became outdated.",
            "",
            " Corresponding code can be retrieved with [`CodeByHash`]."
          ]
        },
        {
          "name": "PastCodeMeta",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_runtime_parachainsparasParaPastCodeMeta",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000",
          "docs": [
            " Past code of parachains. The parachains themselves may not be registered anymore,",
            " but we also keep their code on-chain for the same amount of time as outdated code",
            " to keep it available for secondary checkers."
          ]
        },
        {
          "name": "PastCodePruning",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<TupleU32U32>",
            "PlainTypeValue": 646
          },
          "fallback": "0x00",
          "docs": [
            " Which paras have past code that needs pruning and the relay-chain block at which the code was replaced.",
            " Note that this is the actual height of the included block, not the expected height at which the",
            " code upgrade would be applied, although they may be equal.",
            " This is to ensure the entire acceptance period is covered, not an offset acceptance period starting",
            " from the time at which the parachain perceives a code upgrade as having occurred.",
            " Multiple entries for a single para are permitted. Ordered ascending by block number."
          ]
        },
        {
          "name": "FutureCodeUpgrades",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The block number at which the planned code change is expected for a para.",
            " The change will be applied after the first parablock for this ID included which executes",
            " in the context of a relay chain block with a number >= `expected_at`."
          ]
        },
        {
          "name": "FutureCodeHash",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "[U8; 32]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The actual future code hash of a para.",
            "",
            " Corresponding code can be retrieved with [`CodeByHash`]."
          ]
        },
        {
          "name": "UpgradeGoAheadSignal",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_primitivesv1UpgradeGoAhead",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure.",
            "",
            " This value is absent when there are no upgrades scheduled or during the time the relay chain",
            " performs the checks. It is set at the first relay-chain block when the corresponding parachain",
            " can switch its upgrade function. As soon as the parachain's block is included, the value",
            " gets reset to `None`.",
            "",
            " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
            " the format will require migration of parachains."
          ]
        },
        {
          "name": "UpgradeRestrictionSignal",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_primitivesv1UpgradeRestriction",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " This is used by the relay-chain to communicate that there are restrictions for performing",
            " an upgrade for this parachain.",
            "",
            " This may be a because the parachain waits for the upgrade cooldown to expire. Another",
            " potential use case is when we want to perform some maintenance (such as storage migration)",
            " we could restrict upgrades to make the process simpler.",
            "",
            " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
            " the format will require migration of parachains."
          ]
        },
        {
          "name": "UpgradeCooldowns",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<TupleU32U32>",
            "PlainTypeValue": 646
          },
          "fallback": "0x00",
          "docs": [
            " The list of parachains that are awaiting for their upgrade restriction to cooldown.",
            "",
            " Ordered ascending by block number."
          ]
        },
        {
          "name": "UpcomingUpgrades",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<TupleU32U32>",
            "PlainTypeValue": 646
          },
          "fallback": "0x00",
          "docs": [
            " The list of upcoming code upgrades. Each item is a pair of which para performs a code",
            " upgrade and at which relay-chain block it is expected at.",
            "",
            " Ordered ascending by block number."
          ]
        },
        {
          "name": "ActionsQueue",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<U32>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The actions to perform during the start of a specific session index."
          ]
        },
        {
          "name": "UpcomingParasGenesis",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_runtime_parachainsparasParaGenesisArgs",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Upcoming paras instantiation arguments."
          ]
        },
        {
          "name": "CodeByHashRefs",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00000000",
          "docs": [
            " The number of reference on the validation code in [`CodeByHash`] storage."
          ]
        },
        {
          "name": "CodeByHash",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "Vec<U8>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Validation code stored by its hash.",
            "",
            " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
            " [`PastCodeHash`]."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "3800",
          "name": "force_set_current_code",
          "docs": [
            "Set the storage for the parachain validation code immediately."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            },
            {
              "name": "new_code",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "3801",
          "name": "force_set_current_head",
          "docs": [
            "Set the storage for the current parachain head data immediately."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            },
            {
              "name": "new_head",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "3802",
          "name": "force_schedule_code_upgrade",
          "docs": [
            "Schedule an upgrade as if it was scheduled in the given relay parent block."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            },
            {
              "name": "new_code",
              "type": "Vec<U8>"
            },
            {
              "name": "relay_parent_number",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3803",
          "name": "force_note_new_head",
          "docs": [
            "Note a new block head for para within the context of the current block."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            },
            {
              "name": "new_head",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "3804",
          "name": "force_queue_action",
          "docs": [
            "Put a parachain directly into the next session's action queue.",
            "We can't queue it any sooner than this without going into the",
            "initializer..."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 484
      },
      "events": [
        {
          "lookup": "3800",
          "name": "CurrentCodeUpdated",
          "docs": [
            "Current code has been updated for a Para. `para_id`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "3801",
          "name": "CurrentHeadUpdated",
          "docs": [
            "Current head has been updated for a Para. `para_id`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "3802",
          "name": "CodeUpgradeScheduled",
          "docs": [
            "A code upgrade has been scheduled for a Para. `para_id`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "3803",
          "name": "NewHeadNoted",
          "docs": [
            "A new head has been noted for a Para. `para_id`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "3804",
          "name": "ActionQueued",
          "docs": [
            "A para has been queued to execute pending actions. `para_id`"
          ],
          "args": [
            "U32",
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 97
      },
      "errors": [
        {
          "name": "NotRegistered",
          "doc": [
            "Para is not registered in our system."
          ]
        },
        {
          "name": "CannotOnboard",
          "doc": [
            "Para cannot be onboarded because it is already tracked by our system."
          ]
        },
        {
          "name": "CannotOffboard",
          "doc": [
            "Para cannot be offboarded at this time."
          ]
        },
        {
          "name": "CannotUpgrade",
          "doc": [
            "Para cannot be upgraded to a parachain."
          ]
        },
        {
          "name": "CannotDowngrade",
          "doc": [
            "Para cannot be downgraded to a parathread."
          ]
        }
      ],
      "errors_value": {
        "type": 650
      },
      "index": 56
    },
    {
      "name": "Initializer",
      "prefix": "Initializer",
      "storage": [
        {
          "name": "HasInitialized",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "NULL",
            "PlainTypeValue": 53
          },
          "fallback": "0x00",
          "docs": [
            " Whether the parachains modules have been initialized within this block.",
            "",
            " Semantically a `bool`, but this guarantees it should never hit the trie,",
            " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
            "",
            " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of",
            " them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for",
            " the semantics of this variable."
          ]
        },
        {
          "name": "BufferedSessionChanges",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<polkadot_runtime_parachainsinitializerBufferedSessionChange>",
            "PlainTypeValue": 651
          },
          "fallback": "0x00",
          "docs": [
            " Buffered session changes along with the block number at which they should be applied.",
            "",
            " Typically this will be empty or one element long. Apart from that this item never hits",
            " the storage.",
            "",
            " However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
            " upgrade boundaries or if governance intervenes."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "3900",
          "name": "force_approve",
          "docs": [
            "Issue a signal to the consensus engine to forcibly act as though all parachain",
            "blocks in all relay chain blocks up to and including the given number in the current",
            "chain are valid and should be finalized."
          ],
          "args": [
            {
              "name": "up_to",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 485
      },
      "errors": null,
      "errors_value": null,
      "index": 57
    },
    {
      "name": "Dmp",
      "prefix": "Dmp",
      "storage": [
        {
          "name": "DownwardMessageQueues",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<polkadot_core_primitivesInboundDownwardMessage>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The downward messages addressed for a certain para."
          ]
        },
        {
          "name": "DownwardMessageQueueHeads",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "[U8; 32]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "docs": [
            " A mapping that stores the downward message queue MQC head for each para.",
            "",
            " Each link in this chain has a form:",
            " `(prev_head, B, H(M))`, where",
            " - `prev_head`: is the previous head hash or zero if none.",
            " - `B`: is the relay-chain block number in which a message was appended.",
            " - `H(M)`: is the hash of the message being appended."
          ]
        }
      ],
      "calls_value": {
        "type": 486
      },
      "errors": null,
      "errors_value": null,
      "index": 58
    },
    {
      "name": "Ump",
      "prefix": "Ump",
      "storage": [
        {
          "name": "RelayDispatchQueues",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<Vec<U8>>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The messages waiting to be handled by the relay-chain originating from a certain parachain.",
            "",
            " Note that some upward messages might have been already processed by the inclusion logic. E.g.",
            " channel management messages.",
            "",
            " The messages are processed in FIFO order."
          ]
        },
        {
          "name": "RelayDispatchQueueSize",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "TupleU32U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " Size of the dispatch queues. Caches sizes of the queues in `RelayDispatchQueue`.",
            "",
            " First item in the tuple is the count of messages and second",
            " is the total length (in bytes) of the message payloads.",
            "",
            " Note that this is an auxiliary mapping: it's possible to tell the byte size and the number of",
            " messages only looking at `RelayDispatchQueues`. This mapping is separate to avoid the cost of",
            " loading the whole message queue if only the total size and count are required.",
            "",
            " Invariant:",
            " - The set of keys should exactly match the set of keys of `RelayDispatchQueues`."
          ]
        },
        {
          "name": "NeedsDispatch",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<U32>",
            "PlainTypeValue": 637
          },
          "fallback": "0x00",
          "docs": [
            " The ordered list of `ParaId`s that have a `RelayDispatchQueue` entry.",
            "",
            " Invariant:",
            " - The set of items from this vector should be exactly the set of the keys in",
            "   `RelayDispatchQueues` and `RelayDispatchQueueSize`."
          ]
        },
        {
          "name": "NextDispatchRoundStartWith",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 88
          },
          "fallback": "0x00",
          "docs": [
            " This is the para that gets will get dispatched first during the next upward dispatchable queue",
            " execution round.",
            "",
            " Invariant:",
            " - If `Some(para)`, then `para` must be present in `NeedsDispatch`."
          ]
        },
        {
          "name": "Overweight",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U64"
              ],
              "value": "TupleU32Vec<U8>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The messages that exceeded max individual message weight budget.",
            "",
            " These messages stay there until manually dispatched."
          ]
        },
        {
          "name": "OverweightCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U64",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " The number of overweight messages ever recorded in `Overweight` (and thus the lowest free",
            " index)."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "3b00",
          "name": "service_overweight",
          "docs": [
            "Service a single overweight upward message.",
            "",
            "- `origin`: Must pass `ExecuteOverweightOrigin`.",
            "- `index`: The index of the overweight message to service.",
            "- `weight_limit`: The amount of weight that message execution may take.",
            "",
            "Errors:",
            "- `UnknownMessageIndex`: Message of `index` is unknown.",
            "- `WeightOverLimit`: Message execution may use greater than `weight_limit`.",
            "",
            "Events:",
            "- `OverweightServiced`: On success."
          ],
          "args": [
            {
              "name": "index",
              "type": "U64"
            },
            {
              "name": "weight_limit",
              "type": "U64"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 487
      },
      "events": [
        {
          "lookup": "3b00",
          "name": "InvalidFormat",
          "docs": [
            "Upward message is invalid XCM.",
            "\\[ id \\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "3b01",
          "name": "UnsupportedVersion",
          "docs": [
            "Upward message is unsupported version of XCM.",
            "\\[ id \\]"
          ],
          "args": [
            "[U8; 32]"
          ]
        },
        {
          "lookup": "3b02",
          "name": "ExecutedUpward",
          "docs": [
            "Upward message executed with the given outcome.",
            "\\[ id, outcome \\]"
          ],
          "args": [
            "[U8; 32]",
            "xcmv2traitsOutcome"
          ]
        },
        {
          "lookup": "3b03",
          "name": "WeightExhausted",
          "docs": [
            "The weight limit for handling downward messages was reached.",
            "\\[ id, remaining, required \\]"
          ],
          "args": [
            "[U8; 32]",
            "U64",
            "U64"
          ]
        },
        {
          "lookup": "3b04",
          "name": "UpwardMessagesReceived",
          "docs": [
            "Some downward messages have been received and will be processed.",
            "\\[ para, count, size \\]"
          ],
          "args": [
            "U32",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "3b05",
          "name": "OverweightEnqueued",
          "docs": [
            "The weight budget was exceeded for an individual downward message.",
            "",
            "This message can be later dispatched manually using `service_overweight` dispatchable",
            "using the assigned `overweight_index`.",
            "",
            "\\[ para, id, overweight_index, required \\]"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "U64",
            "U64"
          ]
        },
        {
          "lookup": "3b06",
          "name": "OverweightServiced",
          "docs": [
            "Downward message from the overweight queue was executed with the given actual weight",
            "used.",
            "",
            "\\[ overweight_index, used \\]"
          ],
          "args": [
            "U64",
            "U64"
          ]
        }
      ],
      "events_value": {
        "type": 98
      },
      "errors": [
        {
          "name": "UnknownMessageIndex",
          "doc": [
            "The message index given is unknown."
          ]
        },
        {
          "name": "WeightOverLimit",
          "doc": [
            "The amount of weight given is possibly not enough for executing the message."
          ]
        }
      ],
      "errors_value": {
        "type": 656
      },
      "index": 59
    },
    {
      "name": "Hrmp",
      "prefix": "Hrmp",
      "storage": [
        {
          "name": "HrmpOpenChannelRequests",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "polkadot_parachainprimitivesHrmpChannelId"
              ],
              "value": "polkadot_runtime_parachainshrmpHrmpOpenChannelRequest",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The set of pending HRMP open channel requests.",
            "",
            " The set is accompanied by a list for iteration.",
            "",
            " Invariant:",
            " - There are no channels that exists in list but not in the set and vice versa."
          ]
        },
        {
          "name": "HrmpOpenChannelRequestsList",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<polkadot_parachainprimitivesHrmpChannelId>",
            "PlainTypeValue": 658
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "HrmpOpenChannelRequestCount",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00000000",
          "docs": [
            " This mapping tracks how many open channel requests are initiated by a given sender para.",
            " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has `(X, _)`",
            " as the number of `HrmpOpenChannelRequestCount` for `X`."
          ]
        },
        {
          "name": "HrmpAcceptedChannelRequestCount",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00000000",
          "docs": [
            " This mapping tracks how many open channel requests were accepted by a given recipient para.",
            " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
            " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
          ]
        },
        {
          "name": "HrmpCloseChannelRequests",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "polkadot_parachainprimitivesHrmpChannelId"
              ],
              "value": "NULL",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " A set of pending HRMP close channel requests that are going to be closed during the session change.",
            " Used for checking if a given channel is registered for closure.",
            "",
            " The set is accompanied by a list for iteration.",
            "",
            " Invariant:",
            " - There are no channels that exists in list but not in the set and vice versa."
          ]
        },
        {
          "name": "HrmpCloseChannelRequestsList",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<polkadot_parachainprimitivesHrmpChannelId>",
            "PlainTypeValue": 658
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "HrmpWatermarks",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The HRMP watermark associated with each para.",
            " Invariant:",
            " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session."
          ]
        },
        {
          "name": "HrmpChannels",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "polkadot_parachainprimitivesHrmpChannelId"
              ],
              "value": "polkadot_runtime_parachainshrmpHrmpChannel",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " HRMP channel data associated with each para.",
            " Invariant:",
            " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
          ]
        },
        {
          "name": "HrmpIngressChannelsIndex",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<U32>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Ingress/egress indexes allow to find all the senders and receivers given the opposite",
            " side. I.e.",
            "",
            " (a) ingress index allows to find all the senders for a given recipient.",
            " (b) egress index allows to find all the recipients for a given sender.",
            "",
            " Invariants:",
            " - for each ingress index entry for `P` each item `I` in the index should present in `HrmpChannels`",
            "   as `(I, P)`.",
            " - for each egress index entry for `P` each item `E` in the index should present in `HrmpChannels`",
            "   as `(P, E)`.",
            " - there should be no other dangling channels in `HrmpChannels`.",
            " - the vectors are sorted."
          ]
        },
        {
          "name": "HrmpEgressChannelsIndex",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<U32>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": null
        },
        {
          "name": "HrmpChannelContents",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "polkadot_parachainprimitivesHrmpChannelId"
              ],
              "value": "Vec<polkadot_core_primitivesInboundHrmpMessage>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Storage for the messages for each channel.",
            " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
          ]
        },
        {
          "name": "HrmpChannelDigests",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<TupleU32Vec<U32>>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Maintains a mapping that can be used to answer the question:",
            " What paras sent a message at the given block number for a given receiver.",
            " Invariants:",
            " - The inner `Vec<ParaId>` is never empty.",
            " - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
            " - The outer vector is sorted ascending by block number and cannot store two items with the same",
            "   block number."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "3c00",
          "name": "hrmp_init_open_channel",
          "docs": [
            "Initiate opening a channel from a parachain to a given recipient with given channel",
            "parameters.",
            "",
            "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
            "- `proposed_max_message_size` - specifies the maximum size of the messages.",
            "",
            "These numbers are a subject to the relay-chain configuration limits.",
            "",
            "The channel can be opened only after the recipient confirms it and only on a session",
            "change."
          ],
          "args": [
            {
              "name": "recipient",
              "type": "U32"
            },
            {
              "name": "proposed_max_capacity",
              "type": "U32"
            },
            {
              "name": "proposed_max_message_size",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3c01",
          "name": "hrmp_accept_open_channel",
          "docs": [
            "Accept a pending open channel request from the given sender.",
            "",
            "The channel will be opened only on the next session boundary."
          ],
          "args": [
            {
              "name": "sender",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3c02",
          "name": "hrmp_close_channel",
          "docs": [
            "Initiate unilateral closing of a channel. The origin must be either the sender or the",
            "recipient in the channel being closed.",
            "",
            "The closure can only happen on a session change."
          ],
          "args": [
            {
              "name": "channel_id",
              "type": "polkadot_parachainprimitivesHrmpChannelId"
            }
          ]
        },
        {
          "lookup": "3c03",
          "name": "force_clean_hrmp",
          "docs": [
            "This extrinsic triggers the cleanup of all the HRMP storage items that",
            "a para may have. Normally this happens once per session, but this allows",
            "you to trigger the cleanup immediately for a specific parachain.",
            "",
            "Origin must be Root."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "3c04",
          "name": "force_process_hrmp_open",
          "docs": [
            "Force process HRMP open channel requests.",
            "",
            "If there are pending HRMP open channel requests, you can use this",
            "function process all of those requests immediately."
          ],
          "args": null
        },
        {
          "lookup": "3c05",
          "name": "force_process_hrmp_close",
          "docs": [
            "Force process HRMP close channel requests.",
            "",
            "If there are pending HRMP close channel requests, you can use this",
            "function process all of those requests immediately."
          ],
          "args": null
        },
        {
          "lookup": "3c06",
          "name": "hrmp_cancel_open_request",
          "docs": [
            "This cancels a pending open channel request. It can be canceled be either of the sender",
            "or the recipient for that request. The origin must be either of those.",
            "",
            "The cancelling happens immediately. It is not possible to cancel the request if it is",
            "already accepted."
          ],
          "args": [
            {
              "name": "channel_id",
              "type": "polkadot_parachainprimitivesHrmpChannelId"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 488
      },
      "events": [
        {
          "lookup": "3c00",
          "name": "OpenChannelRequested",
          "docs": [
            "Open HRMP channel requested.",
            "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
          ],
          "args": [
            "U32",
            "U32",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "3c01",
          "name": "OpenChannelCanceled",
          "docs": [
            "An HRMP channel request sent by the receiver was canceled by either party.",
            "`[by_parachain, channel_id]`"
          ],
          "args": [
            "U32",
            "polkadot_parachainprimitivesHrmpChannelId"
          ]
        },
        {
          "lookup": "3c02",
          "name": "OpenChannelAccepted",
          "docs": [
            "Open HRMP channel accepted. `[sender, recipient]`"
          ],
          "args": [
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "3c03",
          "name": "ChannelClosed",
          "docs": [
            "HRMP channel closed. `[by_parachain, channel_id]`"
          ],
          "args": [
            "U32",
            "polkadot_parachainprimitivesHrmpChannelId"
          ]
        }
      ],
      "events_value": {
        "type": 101
      },
      "errors": [
        {
          "name": "OpenHrmpChannelToSelf",
          "doc": [
            "The sender tried to open a channel to themselves."
          ]
        },
        {
          "name": "OpenHrmpChannelInvalidRecipient",
          "doc": [
            "The recipient is not a valid para."
          ]
        },
        {
          "name": "OpenHrmpChannelZeroCapacity",
          "doc": [
            "The requested capacity is zero."
          ]
        },
        {
          "name": "OpenHrmpChannelCapacityExceedsLimit",
          "doc": [
            "The requested capacity exceeds the global limit."
          ]
        },
        {
          "name": "OpenHrmpChannelZeroMessageSize",
          "doc": [
            "The requested maximum message size is 0."
          ]
        },
        {
          "name": "OpenHrmpChannelMessageSizeExceedsLimit",
          "doc": [
            "The open request requested the message size that exceeds the global limit."
          ]
        },
        {
          "name": "OpenHrmpChannelAlreadyExists",
          "doc": [
            "The channel already exists"
          ]
        },
        {
          "name": "OpenHrmpChannelAlreadyRequested",
          "doc": [
            "There is already a request to open the same channel."
          ]
        },
        {
          "name": "OpenHrmpChannelLimitExceeded",
          "doc": [
            "The sender already has the maximum number of allowed outbound channels."
          ]
        },
        {
          "name": "AcceptHrmpChannelDoesntExist",
          "doc": [
            "The channel from the sender to the origin doesn't exist."
          ]
        },
        {
          "name": "AcceptHrmpChannelAlreadyConfirmed",
          "doc": [
            "The channel is already confirmed."
          ]
        },
        {
          "name": "AcceptHrmpChannelLimitExceeded",
          "doc": [
            "The recipient already has the maximum number of allowed inbound channels."
          ]
        },
        {
          "name": "CloseHrmpChannelUnauthorized",
          "doc": [
            "The origin tries to close a channel where it is neither the sender nor the recipient."
          ]
        },
        {
          "name": "CloseHrmpChannelDoesntExist",
          "doc": [
            "The channel to be closed doesn't exist."
          ]
        },
        {
          "name": "CloseHrmpChannelAlreadyUnderway",
          "doc": [
            "The channel close request is already requested."
          ]
        },
        {
          "name": "CancelHrmpOpenChannelUnauthorized",
          "doc": [
            "Canceling is requested by neither the sender nor recipient of the open channel request."
          ]
        },
        {
          "name": "OpenHrmpChannelDoesntExist",
          "doc": [
            "The open request doesn't exist."
          ]
        },
        {
          "name": "OpenHrmpChannelAlreadyConfirmed",
          "doc": [
            "Cannot cancel an HRMP open channel request because it is already confirmed."
          ]
        }
      ],
      "errors_value": {
        "type": 665
      },
      "index": 60
    },
    {
      "name": "ParaSessionInfo",
      "prefix": "ParaSessionInfo",
      "storage": [
        {
          "name": "AssignmentKeysUnsafe",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<[U8; 32]>",
            "PlainTypeValue": 666
          },
          "fallback": "0x00",
          "docs": [
            " Assignment keys for the current session.",
            " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
            " When in doubt, use `Sessions` API instead."
          ]
        },
        {
          "name": "EarliestStoredSession",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The earliest session for which previous session info is stored."
          ]
        },
        {
          "name": "Sessions",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_primitivesv1SessionInfo",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Session information in a rolling window.",
            " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
            " Does not have any entries before the session index in the first session change notification."
          ]
        }
      ],
      "errors": null,
      "errors_value": null,
      "index": 61
    },
    {
      "name": "Registrar",
      "prefix": "Registrar",
      "storage": [
        {
          "name": "PendingSwap",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Pending swap operations."
          ]
        },
        {
          "name": "Paras",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_runtime_commonparas_registrarParaInfo",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Amount held on deposit for each para and the original depositor.",
            "",
            " The given account ID is responsible for registering the code and initial head data, but may only do",
            " so if it isn't yet registered. (After that, it's up to governance to do so.)"
          ]
        },
        {
          "name": "NextFreeParaId",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 88
          },
          "fallback": "0x00000000",
          "docs": [
            " The next free `ParaId`."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "4600",
          "name": "register",
          "docs": [
            "Register head data and validation code for a reserved Para Id.",
            "",
            "## Arguments",
            "- `origin`: Must be called by a `Signed` origin.",
            "- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
            "- `genesis_head`: The genesis head data of the parachain/thread.",
            "- `validation_code`: The initial validation code of the parachain/thread.",
            "",
            "## Deposits/Fees",
            "The origin signed account must reserve a corresponding deposit for the registration. Anything already",
            "reserved previously for this para ID is accounted for.",
            "",
            "## Events",
            "The `Registered` event is emitted in case of success."
          ],
          "args": [
            {
              "name": "id",
              "type": "U32"
            },
            {
              "name": "genesis_head",
              "type": "Vec<U8>"
            },
            {
              "name": "validation_code",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "4601",
          "name": "force_register",
          "docs": [
            "Force the registration of a Para Id on the relay chain.",
            "",
            "This function must be called by a Root origin.",
            "",
            "The deposit taken can be specified for this registration. Any `ParaId`",
            "can be registered, including sub-1000 IDs which are System Parachains."
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "deposit",
              "type": "U128"
            },
            {
              "name": "id",
              "type": "U32"
            },
            {
              "name": "genesis_head",
              "type": "Vec<U8>"
            },
            {
              "name": "validation_code",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "4602",
          "name": "deregister",
          "docs": [
            "Deregister a Para Id, freeing all data and returning any deposit.",
            "",
            "The caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread."
          ],
          "args": [
            {
              "name": "id",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "4603",
          "name": "swap",
          "docs": [
            "Swap a parachain with another parachain or parathread.",
            "",
            "The origin must be Root, the `para` owner, or the `para` itself.",
            "",
            "The swap will happen only if there is already an opposite swap pending. If there is not,",
            "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
            "",
            "The `ParaId`s remain mapped to the same head data and code so external code can rely on",
            "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
            "scheduling info (i.e. whether they're a parathread or parachain), auction information",
            "and the auction deposit are switched."
          ],
          "args": [
            {
              "name": "id",
              "type": "U32"
            },
            {
              "name": "other",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "4604",
          "name": "force_remove_lock",
          "docs": [
            "Remove a manager lock from a para. This will allow the manager of a",
            "previously locked para to deregister or swap a para without using governance.",
            "",
            "Can only be called by the Root origin."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "4605",
          "name": "reserve",
          "docs": [
            "Reserve a Para Id on the relay chain.",
            "",
            "This function will reserve a new Para Id to be owned/managed by the origin account.",
            "The origin account is able to register head data and validation code using `register` to create",
            "a parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot.",
            "",
            "## Arguments",
            "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID.",
            "",
            "## Deposits/Fees",
            "The origin must reserve a deposit of `ParaDeposit` for the registration.",
            "",
            "## Events",
            "The `Reserved` event is emitted in case of success, which provides the ID reserved for use."
          ],
          "args": null
        }
      ],
      "calls_value": {
        "type": 489
      },
      "events": [
        {
          "lookup": "4600",
          "name": "Registered",
          "docs": null,
          "args": [
            "U32",
            "[U8; 32]"
          ]
        },
        {
          "lookup": "4601",
          "name": "Deregistered",
          "docs": null,
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "4602",
          "name": "Reserved",
          "docs": null,
          "args": [
            "U32",
            "[U8; 32]"
          ]
        }
      ],
      "events_value": {
        "type": 103
      },
      "constants": [
        {
          "name": "ParaDeposit",
          "type": "U128",
          "type_value": 6,
          "constants_value": "0080ca39612400000000000000000000",
          "docs": [
            " The deposit to be paid to run a parathread.",
            " This should include the cost for storing the genesis head and validation code."
          ]
        },
        {
          "name": "DataDepositPerByte",
          "type": "U128",
          "type_value": 6,
          "constants_value": "55a0fc01000000000000000000000000",
          "docs": [
            " The deposit to be paid per byte stored on chain."
          ]
        }
      ],
      "errors": [
        {
          "name": "NotRegistered",
          "doc": [
            "The ID is not registered."
          ]
        },
        {
          "name": "AlreadyRegistered",
          "doc": [
            "The ID is already registered."
          ]
        },
        {
          "name": "NotOwner",
          "doc": [
            "The caller is not the owner of this Id."
          ]
        },
        {
          "name": "CodeTooLarge",
          "doc": [
            "Invalid para code size."
          ]
        },
        {
          "name": "HeadDataTooLarge",
          "doc": [
            "Invalid para head data size."
          ]
        },
        {
          "name": "NotParachain",
          "doc": [
            "Para is not a Parachain."
          ]
        },
        {
          "name": "NotParathread",
          "doc": [
            "Para is not a Parathread."
          ]
        },
        {
          "name": "CannotDeregister",
          "doc": [
            "Cannot deregister para"
          ]
        },
        {
          "name": "CannotDowngrade",
          "doc": [
            "Cannot schedule downgrade of parachain to parathread"
          ]
        },
        {
          "name": "CannotUpgrade",
          "doc": [
            "Cannot schedule upgrade of parathread to parachain"
          ]
        },
        {
          "name": "ParaLocked",
          "doc": [
            "Para is locked from manipulation by the manager. Must use parachain or relay chain governance."
          ]
        },
        {
          "name": "NotReserved",
          "doc": [
            "The ID given for registration has not been reserved."
          ]
        }
      ],
      "errors_value": {
        "type": 670
      },
      "index": 70
    },
    {
      "name": "Slots",
      "prefix": "Slots",
      "storage": [
        {
          "name": "Leases",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "Vec<option<Tuple[U8; 32]U128>>",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Amounts held on deposit for each (possibly future) leased parachain.",
            "",
            " The actual amount locked on its behalf by any account at any time is the maximum of the second values",
            " of the items in this list whose first value is the account.",
            "",
            " The first item in the list is the amount locked for the current Lease Period. Following",
            " items are for the subsequent lease periods.",
            "",
            " The default value (an empty list) implies that the parachain no longer exists (or never",
            " existed) as far as this pallet is concerned.",
            "",
            " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
            " will be left-padded with one or more `None`s to denote the fact that nothing is held on",
            " deposit for the non-existent chain currently, but is held at some point in the future.",
            "",
            " It is illegal for a `None` value to trail in the list."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "4700",
          "name": "force_lease",
          "docs": [
            "Just a connect into the `lease_out` call, in case Root wants to force some lease to happen",
            "independently of any other on-chain mechanism to use it.",
            "",
            "Can only be called by the Root origin."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            },
            {
              "name": "leaser",
              "type": "[U8; 32]"
            },
            {
              "name": "amount",
              "type": "U128"
            },
            {
              "name": "period_begin",
              "type": "U32"
            },
            {
              "name": "period_count",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "4701",
          "name": "clear_all_leases",
          "docs": [
            "Clear all leases for a Para Id, refunding any deposits back to the original owners.",
            "",
            "Can only be called by the Root origin."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "4702",
          "name": "trigger_onboard",
          "docs": [
            "Try to onboard a parachain that has a lease for the current lease period.",
            "",
            "This function can be useful if there was some state issue with a para that should",
            "have onboarded, but was unable to. As long as they have a lease period, we can",
            "let them onboard from here.",
            "",
            "Origin must be signed, but can be called by anyone."
          ],
          "args": [
            {
              "name": "para",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 490
      },
      "events": [
        {
          "lookup": "4700",
          "name": "NewLeasePeriod",
          "docs": [
            "A new `[lease_period]` is beginning."
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "4701",
          "name": "Leased",
          "docs": [
            "A para has won the right to a continuous set of lease periods as a parachain.",
            "First balance is any extra amount reserved on top of the para's existing deposit.",
            "Second balance is the total amount reserved.",
            "`[parachain_id, leaser, period_begin, period_count, extra_reserved, total_amount]`"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "U32",
            "U32",
            "U128",
            "U128"
          ]
        }
      ],
      "events_value": {
        "type": 104
      },
      "constants": [
        {
          "name": "LeasePeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "803a0900",
          "docs": [
            " The number of blocks over which a single period lasts."
          ]
        },
        {
          "name": "LeaseOffset",
          "type": "U32",
          "type_value": 4,
          "constants_value": "00000000",
          "docs": [
            " The number of blocks to offset each lease period by."
          ]
        }
      ],
      "errors": [
        {
          "name": "ParaNotOnboarding",
          "doc": [
            "The parachain ID is not onboarding."
          ]
        },
        {
          "name": "LeaseError",
          "doc": [
            "There was an error with the lease."
          ]
        }
      ],
      "errors_value": {
        "type": 673
      },
      "index": 71
    },
    {
      "name": "Auctions",
      "prefix": "Auctions",
      "storage": [
        {
          "name": "AuctionCounter",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Number of auctions started so far."
          ]
        },
        {
          "name": "AuctionInfo",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "TupleU32U32",
            "PlainTypeValue": 71
          },
          "fallback": "0x00",
          "docs": [
            " Information relating to the current auction, if there is one.",
            "",
            " The first item in the tuple is the lease period index that the first of the four",
            " contiguous lease periods on auction is for. The second is the block number when the",
            " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
          ]
        },
        {
          "name": "ReservedAmounts",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "Tuple[U8; 32]U32"
              ],
              "value": "U128",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Amounts currently reserved in the accounts of the bidders currently winning",
            " (sub-)ranges."
          ]
        },
        {
          "name": "Winning",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "[option<Tuple[U8; 32]U32U128>; 36]",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
            " the current auction. The map's key is the 0-based index into the Sample Size. The",
            " first sample of the ending period is 0; the last is `Sample Size - 1`."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "4800",
          "name": "new_auction",
          "docs": [
            "Create a new auction.",
            "",
            "This can only happen when there isn't already an auction in progress and may only be",
            "called by the root origin. Accepts the `duration` of this auction and the",
            "`lease_period_index` of the initial lease period of the four that are to be auctioned."
          ],
          "args": [
            {
              "name": "duration",
              "type": "compact<U32>"
            },
            {
              "name": "lease_period_index",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "4801",
          "name": "bid",
          "docs": [
            "Make a new bid from an account (including a parachain account) for deploying a new",
            "parachain.",
            "",
            "Multiple simultaneous bids from the same bidder are allowed only as long as all active",
            "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
            "",
            "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
            "funded by) the same account.",
            "- `auction_index` is the index of the auction to bid on. Should just be the present",
            "value of `AuctionCounter`.",
            "- `first_slot` is the first lease period index of the range to bid on. This is the",
            "absolute lease period index value, not an auction-specific offset.",
            "- `last_slot` is the last lease period index of the range to bid on. This is the",
            "absolute lease period index value, not an auction-specific offset.",
            "- `amount` is the amount to bid to be held as deposit for the parachain should the",
            "bid win. This amount is held throughout the range."
          ],
          "args": [
            {
              "name": "para",
              "type": "compact<U32>"
            },
            {
              "name": "auction_index",
              "type": "compact<U32>"
            },
            {
              "name": "first_slot",
              "type": "compact<U32>"
            },
            {
              "name": "last_slot",
              "type": "compact<U32>"
            },
            {
              "name": "amount",
              "type": "compact<U128>"
            }
          ]
        },
        {
          "lookup": "4802",
          "name": "cancel_auction",
          "docs": [
            "Cancel an in-progress auction.",
            "",
            "Can only be called by Root origin."
          ],
          "args": null
        }
      ],
      "calls_value": {
        "type": 491
      },
      "events": [
        {
          "lookup": "4800",
          "name": "AuctionStarted",
          "docs": [
            "An auction started. Provides its index and the block number where it will begin to",
            "close and the first lease period of the quadruplet that is auctioned.",
            "`[auction_index, lease_period, ending]`"
          ],
          "args": [
            "U32",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "4801",
          "name": "AuctionClosed",
          "docs": [
            "An auction ended. All funds become unreserved. `[auction_index]`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "4802",
          "name": "Reserved",
          "docs": [
            "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
            "Second is the total. `[bidder, extra_reserved, total_amount]`"
          ],
          "args": [
            "[U8; 32]",
            "U128",
            "U128"
          ]
        },
        {
          "lookup": "4803",
          "name": "Unreserved",
          "docs": [
            "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
          ],
          "args": [
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "4804",
          "name": "ReserveConfiscated",
          "docs": [
            "Someone attempted to lease the same slot twice for a parachain. The amount is held in reserve",
            "but no parachain slot has been leased.",
            "`[parachain_id, leaser, amount]`"
          ],
          "args": [
            "U32",
            "[U8; 32]",
            "U128"
          ]
        },
        {
          "lookup": "4805",
          "name": "BidAccepted",
          "docs": [
            "A new bid has been accepted as the current winner.",
            "`[who, para_id, amount, first_slot, last_slot]`"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "U128",
            "U32",
            "U32"
          ]
        },
        {
          "lookup": "4806",
          "name": "WinningOffset",
          "docs": [
            "The winning offset was chosen for an auction. This will map into the `Winning` storage map.",
            "`[auction_index, block_number]`"
          ],
          "args": [
            "U32",
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 105
      },
      "constants": [
        {
          "name": "EndingPeriod",
          "type": "U32",
          "type_value": 4,
          "constants_value": "40190100",
          "docs": [
            " The number of blocks over which an auction may be retroactively ended."
          ]
        },
        {
          "name": "SampleLength",
          "type": "U32",
          "type_value": 4,
          "constants_value": "14000000",
          "docs": [
            " The length of each sample to take during the ending period.",
            "",
            " `EndingPeriod` / `SampleLength` = Total # of Samples"
          ]
        },
        {
          "name": "SlotRangeCount",
          "type": "U32",
          "type_value": 4,
          "constants_value": "24000000",
          "docs": null
        },
        {
          "name": "LeasePeriodsPerSlot",
          "type": "U32",
          "type_value": 4,
          "constants_value": "08000000",
          "docs": null
        }
      ],
      "errors": [
        {
          "name": "AuctionInProgress",
          "doc": [
            "This auction is already in progress."
          ]
        },
        {
          "name": "LeasePeriodInPast",
          "doc": [
            "The lease period is in the past."
          ]
        },
        {
          "name": "ParaNotRegistered",
          "doc": [
            "Para is not registered"
          ]
        },
        {
          "name": "NotCurrentAuction",
          "doc": [
            "Not a current auction."
          ]
        },
        {
          "name": "NotAuction",
          "doc": [
            "Not an auction."
          ]
        },
        {
          "name": "AuctionEnded",
          "doc": [
            "Auction has already ended."
          ]
        },
        {
          "name": "AlreadyLeasedOut",
          "doc": [
            "The para is already leased out for part of this range."
          ]
        }
      ],
      "errors_value": {
        "type": 678
      },
      "index": 72
    },
    {
      "name": "Crowdloan",
      "prefix": "Crowdloan",
      "storage": [
        {
          "name": "Funds",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat"
              ],
              "key_vec": [
                "U32"
              ],
              "value": "polkadot_runtime_commoncrowdloanFundInfo",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " Info on all of the funds."
          ]
        },
        {
          "name": "NewRaise",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<U32>",
            "PlainTypeValue": 637
          },
          "fallback": "0x00",
          "docs": [
            " The funds that have had additional contributions during the last block. This is used",
            " in order to determine which funds should submit new or updated bids."
          ]
        },
        {
          "name": "EndingsCount",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " The number of auctions that have entered into their ending period so far."
          ]
        },
        {
          "name": "NextTrieIndex",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00000000",
          "docs": [
            " Tracker for the next available trie index"
          ]
        }
      ],
      "calls": [
        {
          "lookup": "4900",
          "name": "create",
          "docs": [
            "Create a new crowdloaning campaign for a parachain slot with the given lease period range.",
            "",
            "This applies a lock to your parachain configuration, ensuring that it cannot be changed",
            "by the parachain manager."
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "cap",
              "type": "compact<U128>"
            },
            {
              "name": "first_period",
              "type": "compact<U32>"
            },
            {
              "name": "last_period",
              "type": "compact<U32>"
            },
            {
              "name": "end",
              "type": "compact<U32>"
            },
            {
              "name": "verifier",
              "type": "option<sp_runtimeMultiSigner>"
            }
          ]
        },
        {
          "lookup": "4901",
          "name": "contribute",
          "docs": [
            "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
            "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "value",
              "type": "compact<U128>"
            },
            {
              "name": "signature",
              "type": "option<sp_runtimeMultiSignature>"
            }
          ]
        },
        {
          "lookup": "4902",
          "name": "withdraw",
          "docs": [
            "Withdraw full balance of a specific contributor.",
            "",
            "Origin must be signed, but can come from anyone.",
            "",
            "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement",
            "flag must be set. For a fund to be ready for retirement, then:",
            "- it must not already be in retirement;",
            "- the amount of raised funds must be bigger than the _free_ balance of the account;",
            "- and either:",
            "  - the block number must be at least `end`; or",
            "  - the current lease period must be greater than the fund's `last_period`.",
            "",
            "In this case, the fund's retirement flag is set and its `end` is reset to the current block",
            "number.",
            "",
            "- `who`: The account whose contribution should be withdrawn.",
            "- `index`: The parachain to whose crowdloan the contribution was made."
          ],
          "args": [
            {
              "name": "who",
              "type": "[U8; 32]"
            },
            {
              "name": "index",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "4903",
          "name": "refund",
          "docs": [
            "Automatically refund contributors of an ended crowdloan.",
            "Due to weight restrictions, this function may need to be called multiple",
            "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
            "",
            "Origin must be signed, but can come from anyone."
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "4904",
          "name": "dissolve",
          "docs": [
            "Remove a fund after the retirement period has ended and all funds have been returned."
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            }
          ]
        },
        {
          "lookup": "4905",
          "name": "edit",
          "docs": [
            "Edit the configuration for an in-progress crowdloan.",
            "",
            "Can only be called by Root origin."
          ],
          "args": [
            {
              "name": "index",
              "type": "compact<U32>"
            },
            {
              "name": "cap",
              "type": "compact<U128>"
            },
            {
              "name": "first_period",
              "type": "compact<U32>"
            },
            {
              "name": "last_period",
              "type": "compact<U32>"
            },
            {
              "name": "end",
              "type": "compact<U32>"
            },
            {
              "name": "verifier",
              "type": "option<sp_runtimeMultiSigner>"
            }
          ]
        },
        {
          "lookup": "4906",
          "name": "add_memo",
          "docs": [
            "Add an optional memo to an existing crowdloan contribution.",
            "",
            "Origin must be Signed, and the user must have contributed to the crowdloan."
          ],
          "args": [
            {
              "name": "index",
              "type": "U32"
            },
            {
              "name": "memo",
              "type": "Vec<U8>"
            }
          ]
        },
        {
          "lookup": "4907",
          "name": "poke",
          "docs": [
            "Poke the fund into `NewRaise`",
            "",
            "Origin must be Signed, and the fund has non-zero raise."
          ],
          "args": [
            {
              "name": "index",
              "type": "U32"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 493
      },
      "events": [
        {
          "lookup": "4900",
          "name": "Created",
          "docs": [
            "Create a new crowdloaning campaign. `[fund_index]`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "4901",
          "name": "Contributed",
          "docs": [
            "Contributed to a crowd sale. `[who, fund_index, amount]`"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "U128"
          ]
        },
        {
          "lookup": "4902",
          "name": "Withdrew",
          "docs": [
            "Withdrew full balance of a contributor. `[who, fund_index, amount]`"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "U128"
          ]
        },
        {
          "lookup": "4903",
          "name": "PartiallyRefunded",
          "docs": [
            "The loans in a fund have been partially dissolved, i.e. there are some left",
            "over child keys that still need to be killed. `[fund_index]`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "4904",
          "name": "AllRefunded",
          "docs": [
            "All loans in a fund have been refunded. `[fund_index]`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "4905",
          "name": "Dissolved",
          "docs": [
            "Fund is dissolved. `[fund_index]`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "4906",
          "name": "HandleBidResult",
          "docs": [
            "The result of trying to submit a new bid to the Slots pallet."
          ],
          "args": [
            "U32",
            "Results<NULL,sp_runtimeDispatchError>"
          ]
        },
        {
          "lookup": "4907",
          "name": "Edited",
          "docs": [
            "The configuration to a crowdloan has been edited. `[fund_index]`"
          ],
          "args": [
            "U32"
          ]
        },
        {
          "lookup": "4908",
          "name": "MemoUpdated",
          "docs": [
            "A memo has been updated. `[who, fund_index, memo]`"
          ],
          "args": [
            "[U8; 32]",
            "U32",
            "Vec<U8>"
          ]
        },
        {
          "lookup": "4909",
          "name": "AddedToNewRaise",
          "docs": [
            "A parachain has been moved to `NewRaise`"
          ],
          "args": [
            "U32"
          ]
        }
      ],
      "events_value": {
        "type": 106
      },
      "constants": [
        {
          "name": "PalletId",
          "type": "[U8; 8]",
          "type_value": 538,
          "constants_value": "py/cfund",
          "docs": [
            " `PalletId` for the crowdloan pallet. An appropriate value could be `PalletId(*b\"py/cfund\")`"
          ]
        },
        {
          "name": "MinContribution",
          "type": "U128",
          "type_value": 6,
          "constants_value": "18e47648170000000000000000000000",
          "docs": [
            " The minimum amount that may be contributed into a crowdloan. Should almost certainly be at",
            " least `ExistentialDeposit`."
          ]
        },
        {
          "name": "RemoveKeysLimit",
          "type": "U32",
          "type_value": 4,
          "constants_value": "e8030000",
          "docs": [
            " Max number of storage keys to remove per extrinsic call."
          ]
        }
      ],
      "errors": [
        {
          "name": "FirstPeriodInPast",
          "doc": [
            "The current lease period is more than the first lease period."
          ]
        },
        {
          "name": "FirstPeriodTooFarInFuture",
          "doc": [
            "The first lease period needs to at least be less than 3 `max_value`."
          ]
        },
        {
          "name": "LastPeriodBeforeFirstPeriod",
          "doc": [
            "Last lease period must be greater than first lease period."
          ]
        },
        {
          "name": "LastPeriodTooFarInFuture",
          "doc": [
            "The last lease period cannot be more than 3 periods after the first period."
          ]
        },
        {
          "name": "CannotEndInPast",
          "doc": [
            "The campaign ends before the current block number. The end must be in the future."
          ]
        },
        {
          "name": "EndTooFarInFuture",
          "doc": [
            "The end date for this crowdloan is not sensible."
          ]
        },
        {
          "name": "Overflow",
          "doc": [
            "There was an overflow."
          ]
        },
        {
          "name": "ContributionTooSmall",
          "doc": [
            "The contribution was below the minimum, `MinContribution`."
          ]
        },
        {
          "name": "InvalidParaId",
          "doc": [
            "Invalid fund index."
          ]
        },
        {
          "name": "CapExceeded",
          "doc": [
            "Contributions exceed maximum amount."
          ]
        },
        {
          "name": "ContributionPeriodOver",
          "doc": [
            "The contribution period has already ended."
          ]
        },
        {
          "name": "InvalidOrigin",
          "doc": [
            "The origin of this call is invalid."
          ]
        },
        {
          "name": "NotParachain",
          "doc": [
            "This crowdloan does not correspond to a parachain."
          ]
        },
        {
          "name": "LeaseActive",
          "doc": [
            "This parachain lease is still active and retirement cannot yet begin."
          ]
        },
        {
          "name": "BidOrLeaseActive",
          "doc": [
            "This parachain's bid or lease is still active and withdraw cannot yet begin."
          ]
        },
        {
          "name": "FundNotEnded",
          "doc": [
            "The crowdloan has not yet ended."
          ]
        },
        {
          "name": "NoContributions",
          "doc": [
            "There are no contributions stored in this crowdloan."
          ]
        },
        {
          "name": "NotReadyToDissolve",
          "doc": [
            "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement period."
          ]
        },
        {
          "name": "InvalidSignature",
          "doc": [
            "Invalid signature."
          ]
        },
        {
          "name": "MemoTooLarge",
          "doc": [
            "The provided memo is too large."
          ]
        },
        {
          "name": "AlreadyInNewRaise",
          "doc": [
            "The fund is already in `NewRaise`"
          ]
        },
        {
          "name": "VrfDelayInProgress",
          "doc": [
            "No contributions allowed during the VRF delay"
          ]
        },
        {
          "name": "NoLeasePeriod",
          "doc": [
            "A lease period has not started yet, due to an offset in the starting block."
          ]
        }
      ],
      "errors_value": {
        "type": 681
      },
      "index": 73
    },
    {
      "name": "XcmPallet",
      "prefix": "XcmPallet",
      "storage": [
        {
          "name": "QueryCounter",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "U64",
            "PlainTypeValue": 8
          },
          "fallback": "0x0000000000000000",
          "docs": [
            " The latest available query index."
          ]
        },
        {
          "name": "Queries",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Blake2_128Concat"
              ],
              "key_vec": [
                "U64"
              ],
              "value": "pallet_xcmpalletQueryStatus",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The ongoing queries."
          ]
        },
        {
          "name": "AssetTraps",
          "modifier": "Default",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Identity"
              ],
              "key_vec": [
                "[U8; 32]"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00000000",
          "docs": [
            " The existing asset traps.",
            "",
            " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
            " times this pair has been trapped (usually just 1 if it exists at all)."
          ]
        },
        {
          "name": "SafeXcmVersion",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "U32",
            "PlainTypeValue": 4
          },
          "fallback": "0x00",
          "docs": [
            " Default version to encode XCM when latest version of destination is unknown. If `None`,",
            " then the destinations whose XCM version is unknown are considered unreachable."
          ]
        },
        {
          "name": "SupportedVersion",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Blake2_128Concat"
              ],
              "key_vec": [
                "TupleU32xcmVersionedMultiLocation"
              ],
              "value": "U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The Latest versions that we know various locations support."
          ]
        },
        {
          "name": "VersionNotifiers",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Blake2_128Concat"
              ],
              "key_vec": [
                "TupleU32xcmVersionedMultiLocation"
              ],
              "value": "U64",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " All locations that we have requested version notifications from."
          ]
        },
        {
          "name": "VersionNotifyTargets",
          "modifier": "Optional",
          "type": {
            "origin": "Map",
            "n_map_type": {
              "hashers": [
                "Twox64Concat",
                "Blake2_128Concat"
              ],
              "key_vec": [
                "TupleU32xcmVersionedMultiLocation"
              ],
              "value": "TupleU64U64U32",
              "keys_id": 0,
              "value_id": 0
            }
          },
          "fallback": "0x00",
          "docs": [
            " The target locations that are subscribed to our version changes, as well as the most recent",
            " of our versions we informed them of."
          ]
        },
        {
          "name": "VersionDiscoveryQueue",
          "modifier": "Default",
          "type": {
            "origin": "PlainType",
            "plain_type": "Vec<TuplexcmVersionedMultiLocationU32>",
            "PlainTypeValue": 688
          },
          "fallback": "0x00",
          "docs": [
            " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
            " the `u32` counter is the number of times that a send to the destination has been attempted,",
            " which is used as a prioritization."
          ]
        },
        {
          "name": "CurrentMigration",
          "modifier": "Optional",
          "type": {
            "origin": "PlainType",
            "plain_type": "pallet_xcmpalletVersionMigrationStage",
            "PlainTypeValue": 691
          },
          "fallback": "0x00",
          "docs": [
            " The current migration's stage, if any."
          ]
        }
      ],
      "calls": [
        {
          "lookup": "6300",
          "name": "send",
          "docs": null,
          "args": [
            {
              "name": "dest",
              "type": "xcmVersionedMultiLocation"
            },
            {
              "name": "message",
              "type": "xcmVersionedXcm"
            }
          ]
        },
        {
          "lookup": "6301",
          "name": "teleport_assets",
          "docs": [
            "Teleport some assets from the local chain to some destination chain.",
            "",
            "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
            "",
            "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
            "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
            "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
            "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
            "  an `AccountId32` value.",
            "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
            "  `dest` side. May not be empty.",
            "- `dest_weight`: Equal to the total weight on `dest` of the XCM message",
            "  `Teleport { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`."
          ],
          "args": [
            {
              "name": "dest",
              "type": "xcmVersionedMultiLocation"
            },
            {
              "name": "beneficiary",
              "type": "xcmVersionedMultiLocation"
            },
            {
              "name": "assets",
              "type": "xcmVersionedMultiAssets"
            },
            {
              "name": "fee_asset_item",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "6302",
          "name": "reserve_transfer_assets",
          "docs": [
            "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
            "a notification XCM.",
            "",
            "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
            "",
            "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
            "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
            "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
            "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
            "  an `AccountId32` value.",
            "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
            "  `dest` side.",
            "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
            "  fees."
          ],
          "args": [
            {
              "name": "dest",
              "type": "xcmVersionedMultiLocation"
            },
            {
              "name": "beneficiary",
              "type": "xcmVersionedMultiLocation"
            },
            {
              "name": "assets",
              "type": "xcmVersionedMultiAssets"
            },
            {
              "name": "fee_asset_item",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "6303",
          "name": "execute",
          "docs": [
            "Execute an XCM message from a local, signed, origin.",
            "",
            "An event is deposited indicating whether `msg` could be executed completely or only",
            "partially.",
            "",
            "No more than `max_weight` will be used in its attempted execution. If this is less than the",
            "maximum amount of weight that the message could take to be executed, then no execution",
            "attempt will be made.",
            "",
            "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
            "to completion; only that *some* of it was executed."
          ],
          "args": [
            {
              "name": "message",
              "type": "xcmVersionedXcm"
            },
            {
              "name": "max_weight",
              "type": "U64"
            }
          ]
        },
        {
          "lookup": "6304",
          "name": "force_xcm_version",
          "docs": [
            "Extoll that a particular destination can be communicated with through a particular",
            "version of XCM.",
            "",
            "- `origin`: Must be Root.",
            "- `location`: The destination that is being described.",
            "- `xcm_version`: The latest version of XCM that `location` supports."
          ],
          "args": [
            {
              "name": "location",
              "type": "xcmv1multilocationMultiLocation"
            },
            {
              "name": "xcm_version",
              "type": "U32"
            }
          ]
        },
        {
          "lookup": "6305",
          "name": "force_default_xcm_version",
          "docs": [
            "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
            "version a destination can accept is unknown).",
            "",
            "- `origin`: Must be Root.",
            "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
          ],
          "args": [
            {
              "name": "maybe_xcm_version",
              "type": "option<U32>"
            }
          ]
        },
        {
          "lookup": "6306",
          "name": "force_subscribe_version_notify",
          "docs": [
            "Ask a location to notify us regarding their XCM version and any changes to it.",
            "",
            "- `origin`: Must be Root.",
            "- `location`: The location to which we should subscribe for XCM version notifications."
          ],
          "args": [
            {
              "name": "location",
              "type": "xcmVersionedMultiLocation"
            }
          ]
        },
        {
          "lookup": "6307",
          "name": "force_unsubscribe_version_notify",
          "docs": [
            "Require that a particular destination should no longer notify us regarding any XCM",
            "version changes.",
            "",
            "- `origin`: Must be Root.",
            "- `location`: The location to which we are currently subscribed for XCM version",
            "  notifications which we no longer desire."
          ],
          "args": [
            {
              "name": "location",
              "type": "xcmVersionedMultiLocation"
            }
          ]
        }
      ],
      "calls_value": {
        "type": 501
      },
      "events": [
        {
          "lookup": "6300",
          "name": "Attempted",
          "docs": [
            "Execution of an XCM message was attempted.",
            "",
            "\\[ outcome \\]"
          ],
          "args": [
            "xcmv2traitsOutcome"
          ]
        },
        {
          "lookup": "6301",
          "name": "Sent",
          "docs": [
            "A XCM message was sent.",
            "",
            "\\[ origin, destination, message \\]"
          ],
          "args": [
            "xcmv1multilocationMultiLocation",
            "xcmv1multilocationMultiLocation",
            "Vec<Call>"
          ]
        },
        {
          "lookup": "6302",
          "name": "UnexpectedResponse",
          "docs": [
            "Query response received which does not match a registered query. This may be because a",
            "matching query was never registered, it may be because it is a duplicate response, or",
            "because the query timed out.",
            "",
            "\\[ origin location, id \\]"
          ],
          "args": [
            "xcmv1multilocationMultiLocation",
            "U64"
          ]
        },
        {
          "lookup": "6303",
          "name": "ResponseReady",
          "docs": [
            "Query response has been received and is ready for taking with `take_response`. There is",
            "no registered notification call.",
            "",
            "\\[ id, response \\]"
          ],
          "args": [
            "U64",
            "xcmv2Response"
          ]
        },
        {
          "lookup": "6304",
          "name": "Notified",
          "docs": [
            "Query response has been received and query is removed. The registered notification has",
            "been dispatched and executed successfully.",
            "",
            "\\[ id, pallet index, call index \\]"
          ],
          "args": [
            "U64",
            "U8",
            "U8"
          ]
        },
        {
          "lookup": "6305",
          "name": "NotifyOverweight",
          "docs": [
            "Query response has been received and query is removed. The registered notification could",
            "not be dispatched because the dispatch weight is greater than the maximum weight",
            "originally budgeted by this runtime for the query result.",
            "",
            "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
          ],
          "args": [
            "U64",
            "U8",
            "U8",
            "U64",
            "U64"
          ]
        },
        {
          "lookup": "6306",
          "name": "NotifyDispatchError",
          "docs": [
            "Query response has been received and query is removed. There was a general error with",
            "dispatching the notification call.",
            "",
            "\\[ id, pallet index, call index \\]"
          ],
          "args": [
            "U64",
            "U8",
            "U8"
          ]
        },
        {
          "lookup": "6307",
          "name": "NotifyDecodeFailed",
          "docs": [
            "Query response has been received and query is removed. The dispatch was unable to be",
            "decoded into a `Call`; this might be due to dispatch function having a signature which",
            "is not `(origin, QueryId, Response)`.",
            "",
            "\\[ id, pallet index, call index \\]"
          ],
          "args": [
            "U64",
            "U8",
            "U8"
          ]
        },
        {
          "lookup": "6308",
          "name": "InvalidResponder",
          "docs": [
            "Expected query response has been received but the origin location of the response does",
            "not match that expected. The query remains registered for a later, valid, response to",
            "be received and acted upon.",
            "",
            "\\[ origin location, id, expected location \\]"
          ],
          "args": [
            "xcmv1multilocationMultiLocation",
            "U64",
            "option<xcmv1multilocationMultiLocation>"
          ]
        },
        {
          "lookup": "6309",
          "name": "InvalidResponderVersion",
          "docs": [
            "Expected query response has been received but the expected origin location placed in",
            "storate by this runtime previously cannot be decoded. The query remains registered.",
            "",
            "This is unexpected (since a location placed in storage in a previously executing",
            "runtime should be readable prior to query timeout) and dangerous since the possibly",
            "valid response will be dropped. Manual governance intervention is probably going to be",
            "needed.",
            "",
            "\\[ origin location, id \\]"
          ],
          "args": [
            "xcmv1multilocationMultiLocation",
            "U64"
          ]
        },
        {
          "lookup": "630a",
          "name": "ResponseTaken",
          "docs": [
            "Received query response has been read and removed.",
            "",
            "\\[ id \\]"
          ],
          "args": [
            "U64"
          ]
        },
        {
          "lookup": "630b",
          "name": "AssetsTrapped",
          "docs": [
            "Some assets have been placed in an asset trap.",
            "",
            "\\[ hash, origin, assets \\]"
          ],
          "args": [
            "[U8; 32]",
            "xcmv1multilocationMultiLocation",
            "xcmVersionedMultiAssets"
          ]
        },
        {
          "lookup": "630c",
          "name": "VersionChangeNotified",
          "docs": [
            "An XCM version change notification message has been attempted to be sent.",
            "",
            "\\[ destination, result \\]"
          ],
          "args": [
            "xcmv1multilocationMultiLocation",
            "U32"
          ]
        },
        {
          "lookup": "630d",
          "name": "SupportedVersionChanged",
          "docs": [
            "The supported version of a location has been changed. This might be through an",
            "automatic notification or a manual intervention.",
            "",
            "\\[ location, XCM version \\]"
          ],
          "args": [
            "xcmv1multilocationMultiLocation",
            "U32"
          ]
        },
        {
          "lookup": "630e",
          "name": "NotifyTargetSendFail",
          "docs": [
            "A given location which had a version change subscription was dropped owing to an error",
            "sending the notification to it.",
            "",
            "\\[ location, query ID, error \\]"
          ],
          "args": [
            "xcmv1multilocationMultiLocation",
            "U64",
            "xcmv2traitsError"
          ]
        },
        {
          "lookup": "630f",
          "name": "NotifyTargetMigrationFail",
          "docs": [
            "A given location which had a version change subscription was dropped owing to an error",
            "migrating the location to our new XCM format.",
            "",
            "\\[ location, query ID \\]"
          ],
          "args": [
            "xcmVersionedMultiLocation",
            "U64"
          ]
        }
      ],
      "events_value": {
        "type": 107
      },
      "errors": [
        {
          "name": "Unreachable",
          "doc": [
            "The desired destination was unreachable, generally because there is a no way of routing",
            "to it."
          ]
        },
        {
          "name": "SendFailure",
          "doc": [
            "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
            "a lack of space for buffering the message."
          ]
        },
        {
          "name": "Filtered",
          "doc": [
            "The message execution fails the filter."
          ]
        },
        {
          "name": "UnweighableMessage",
          "doc": [
            "The message's weight could not be determined."
          ]
        },
        {
          "name": "DestinationNotInvertible",
          "doc": [
            "The destination `MultiLocation` provided cannot be inverted."
          ]
        },
        {
          "name": "Empty",
          "doc": [
            "The assets to be sent are empty."
          ]
        },
        {
          "name": "CannotReanchor",
          "doc": [
            "Could not re-anchor the assets to declare the fees for the destination chain."
          ]
        },
        {
          "name": "TooManyAssets",
          "doc": [
            "Too many assets have been attempted for transfer."
          ]
        },
        {
          "name": "InvalidOrigin",
          "doc": [
            "Origin is invalid for sending."
          ]
        },
        {
          "name": "BadVersion",
          "doc": [
            "The version of the `Versioned` value used is not able to be interpreted."
          ]
        },
        {
          "name": "BadLocation",
          "doc": [
            "The given location could not be used (e.g. because it cannot be expressed in the",
            "desired version of XCM)."
          ]
        },
        {
          "name": "NoSubscription",
          "doc": [
            "The referenced subscription could not be found."
          ]
        },
        {
          "name": "AlreadySubscribed",
          "doc": [
            "The location is invalid since it already has a subscription from us."
          ]
        }
      ],
      "errors_value": {
        "type": 692
      },
      "index": 99
    }
  ]
}