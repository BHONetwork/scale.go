[
  {
    "id": 0,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]"
            }
          ]
        }
      },
      "docs": [
        "An opaque 32-byte cryptographic identifier."
      ],
      "params": null,
      "path": [
        "sp_core",
        "crypto",
        "AccountId32"
      ]
    }
  },
  {
    "id": 1,
    "type": {
      "def": {
        "Array": {
          "len": 32,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 2,
    "type": {
      "def": {
        "Primitive": "U8"
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 3,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The number of transactions this account has sent."
              ],
              "name": "nonce",
              "type": 4,
              "typeName": "Index"
            },
            {
              "docs": [
                "The number of other modules that currently depend on this account\\'s existence. The account",
                "cannot be reaped until this is zero."
              ],
              "name": "consumers",
              "type": 4,
              "typeName": "RefCount"
            },
            {
              "docs": [
                "The number of other modules that allow this account to exist. The account may not be reaped",
                "until this and `sufficients` are both zero."
              ],
              "name": "providers",
              "type": 4,
              "typeName": "RefCount"
            },
            {
              "docs": [
                "The number of modules that allow this account to exist for their own purposes only. The",
                "account may not be reaped until this and `providers` are both zero."
              ],
              "name": "sufficients",
              "type": 4,
              "typeName": "RefCount"
            },
            {
              "docs": [
                "The additional data that belongs to this account. Used to store the balance(s) in a lot of",
                "chains."
              ],
              "name": "data",
              "type": 5,
              "typeName": "AccountData"
            }
          ]
        }
      },
      "docs": [
        "Information of an account."
      ],
      "params": [
        {
          "name": "Index",
          "type": 4
        },
        {
          "name": "AccountData",
          "type": 5
        }
      ],
      "path": [
        "frame_system",
        "AccountInfo"
      ]
    }
  },
  {
    "id": 4,
    "type": {
      "def": {
        "Primitive": "U32"
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 5,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Non-reserved part of the balance. There may still be restrictions on this, but it is the",
                "total pool what may in principle be transferred, reserved and used for tipping.",
                "",
                "This is the only balance that matters in terms of most operations on tokens. It",
                "alone is used to determine the balance when in the contract execution environment."
              ],
              "name": "free",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Balance which is reserved and may not be used at all.",
                "",
                "This can still get slashed, but gets slashed last of all.",
                "",
                "This balance is a \\'reserve\\' balance that other subsystems use in order to set aside tokens",
                "that are still \\'owned\\' by the account holder, but which are suspendable.",
                "This includes named reserve and unnamed reserve."
              ],
              "name": "reserved",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount that `free` may not drop below when withdrawing for *anything except transaction",
                "fee payment*."
              ],
              "name": "misc_frozen",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount that `free` may not drop below when withdrawing specifically for transaction",
                "fee payment."
              ],
              "name": "fee_frozen",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "All balance information for an account."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_balances",
        "AccountData"
      ]
    }
  },
  {
    "id": 6,
    "type": {
      "def": {
        "Primitive": "U128"
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 7,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Value for `Normal` extrinsics."
              ],
              "name": "normal",
              "type": 8,
              "typeName": "T"
            },
            {
              "docs": [
                "Value for `Operational` extrinsics."
              ],
              "name": "operational",
              "type": 8,
              "typeName": "T"
            },
            {
              "docs": [
                "Value for `Mandatory` extrinsics."
              ],
              "name": "mandatory",
              "type": 8,
              "typeName": "T"
            }
          ]
        }
      },
      "docs": [
        "A struct holding value for each `DispatchClass`."
      ],
      "params": [
        {
          "name": "T",
          "type": 8
        }
      ],
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ]
    }
  },
  {
    "id": 8,
    "type": {
      "def": {
        "Primitive": "U64"
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 9,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]"
            }
          ]
        }
      },
      "docs": [
        "r\" Fixed-size uninterpreted hash type with 32 bytes (256 bits) size."
      ],
      "params": null,
      "path": [
        "primitive_types",
        "H256"
      ]
    }
  },
  {
    "id": 10,
    "type": {
      "def": {
        "Sequence": {
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 11,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "A list of logs in the digest."
              ],
              "name": "logs",
              "type": 12,
              "typeName": "Vec\u003cDigestItem\u003cHash\u003e\u003e"
            }
          ]
        }
      },
      "docs": [
        "Generic header digest."
      ],
      "params": [
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "Digest"
      ]
    }
  },
  {
    "id": 12,
    "type": {
      "def": {
        "Sequence": {
          "type": 13
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 13,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                }
              ],
              "index": 2,
              "name": "ChangesTrieRoot"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 6,
              "name": "PreRuntime"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 4,
              "name": "Consensus"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 5,
              "name": "Seal"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 15,
                  "typeName": "ChangesTrieSignal"
                }
              ],
              "index": 7,
              "name": "ChangesTrieSignal"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 0,
              "name": "Other"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "DigestItem"
      ]
    }
  },
  {
    "id": 14,
    "type": {
      "def": {
        "Array": {
          "len": 4,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 15,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "New changes trie configuration is enacted, starting from **next block**.",
                "",
                "The block that emits this signal will contain changes trie (CT) that covers",
                "blocks range [BEGIN; current block], where BEGIN is (order matters):",
                "- LAST_TOP_LEVEL_DIGEST_BLOCK+1 if top level digest CT has ever been created",
                "  using current configuration AND the last top level digest CT has been created",
                "  at block LAST_TOP_LEVEL_DIGEST_BLOCK;",
                "- LAST_CONFIGURATION_CHANGE_BLOCK+1 if there has been CT configuration change",
                "  before and the last configuration change happened at block",
                "  LAST_CONFIGURATION_CHANGE_BLOCK;",
                "- 1 otherwise."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 16,
                  "typeName": "Option\u003cChangesTrieConfiguration\u003e"
                }
              ],
              "index": 0,
              "name": "NewConfiguration"
            }
          ]
        }
      },
      "docs": [
        "Available changes trie signals."
      ],
      "params": null,
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "ChangesTrieSignal"
      ]
    }
  },
  {
    "id": 16,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 17,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 17
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 17,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Interval (in blocks) at which level1-digests are created. Digests are not",
                "created when this is less or equal to 1."
              ],
              "name": "digest_interval",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Maximal number of digest levels in hierarchy. 0 means that digests are not",
                "created at all (even level1 digests). 1 means only level1-digests are created.",
                "2 means that every digest_interval^2 there will be a level2-digest, and so on.",
                "Please ensure that maximum digest interval (i.e. digest_interval^digest_levels)",
                "is within `u32` limits. Otherwise you\\'ll never see digests covering such intervals",
                "\u0026\u0026 maximal digests interval will be truncated to the last interval that fits",
                "`u32` limits."
              ],
              "name": "digest_levels",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "Substrate changes trie configuration."
      ],
      "params": null,
      "path": [
        "sp_core",
        "changes_trie",
        "ChangesTrieConfiguration"
      ]
    }
  },
  {
    "id": 18,
    "type": {
      "def": {
        "Sequence": {
          "type": 19
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 19,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The phase of the block it happened in."
              ],
              "name": "phase",
              "type": 97,
              "typeName": "Phase"
            },
            {
              "docs": [
                "The event itself."
              ],
              "name": "event",
              "type": 20,
              "typeName": "E"
            },
            {
              "docs": [
                "The list of the topics this event has."
              ],
              "name": "topics",
              "type": 98,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "Record of an event happening."
      ],
      "params": [
        {
          "name": "E",
          "type": 20
        },
        {
          "name": "T",
          "type": 9
        }
      ],
      "path": [
        "frame_system",
        "EventRecord"
      ]
    }
  },
  {
    "id": 20,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 21,
                  "typeName": "frame_system::Event\u003cRuntime\u003e"
                }
              ],
              "index": 0,
              "name": "System"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 28,
                  "typeName": "pallet_utility::Event"
                }
              ],
              "index": 1,
              "name": "Utility"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 29,
                  "typeName": "pallet_indices::Event\u003cRuntime\u003e"
                }
              ],
              "index": 5,
              "name": "Indices"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 30,
                  "typeName": "pallet_balances::Event\u003cRuntime\u003e"
                }
              ],
              "index": 6,
              "name": "Balances"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 32,
                  "typeName": "pallet_election_provider_multi_phase::Event\u003cRuntime\u003e"
                }
              ],
              "index": 8,
              "name": "ElectionProviderMultiPhase"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 36,
                  "typeName": "pallet_staking::Event\u003cRuntime\u003e"
                }
              ],
              "index": 9,
              "name": "Staking"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 37,
                  "typeName": "pallet_session::Event"
                }
              ],
              "index": 10,
              "name": "Session"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 38,
                  "typeName": "pallet_democracy::Event\u003cRuntime\u003e"
                }
              ],
              "index": 11,
              "name": "Democracy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 41,
                  "typeName": "pallet_collective::Event\u003cRuntime, pallet_collective::Instance1\u003e"
                }
              ],
              "index": 12,
              "name": "Council"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 45,
                  "typeName": "pallet_collective::Event\u003cRuntime, pallet_collective::Instance2\u003e"
                }
              ],
              "index": 13,
              "name": "TechnicalCommittee"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 47,
                  "typeName": "pallet_elections_phragmen::Event\u003cRuntime\u003e"
                }
              ],
              "index": 14,
              "name": "Elections"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 50,
                  "typeName": "pallet_membership::Event\u003cRuntime, pallet_membership::Instance1\u003e"
                }
              ],
              "index": 15,
              "name": "TechnicalMembership"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 52,
                  "typeName": "pallet_grandpa::Event"
                }
              ],
              "index": 16,
              "name": "Grandpa"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 57,
                  "typeName": "pallet_treasury::Event\u003cRuntime\u003e"
                }
              ],
              "index": 17,
              "name": "Treasury"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 58,
                  "typeName": "pallet_contracts::Event\u003cRuntime\u003e"
                }
              ],
              "index": 18,
              "name": "Contracts"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 59,
                  "typeName": "pallet_sudo::Event\u003cRuntime\u003e"
                }
              ],
              "index": 19,
              "name": "Sudo"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 60,
                  "typeName": "pallet_im_online::Event\u003cRuntime\u003e"
                }
              ],
              "index": 20,
              "name": "ImOnline"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 69,
                  "typeName": "pallet_offences::Event"
                }
              ],
              "index": 22,
              "name": "Offences"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 71,
                  "typeName": "pallet_identity::Event\u003cRuntime\u003e"
                }
              ],
              "index": 25,
              "name": "Identity"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 72,
                  "typeName": "pallet_society::Event\u003cRuntime\u003e"
                }
              ],
              "index": 26,
              "name": "Society"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 74,
                  "typeName": "pallet_recovery::Event\u003cRuntime\u003e"
                }
              ],
              "index": 27,
              "name": "Recovery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 75,
                  "typeName": "pallet_vesting::Event\u003cRuntime\u003e"
                }
              ],
              "index": 28,
              "name": "Vesting"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 76,
                  "typeName": "pallet_scheduler::Event\u003cRuntime\u003e"
                }
              ],
              "index": 29,
              "name": "Scheduler"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 79,
                  "typeName": "pallet_proxy::Event\u003cRuntime\u003e"
                }
              ],
              "index": 30,
              "name": "Proxy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 82,
                  "typeName": "pallet_multisig::Event\u003cRuntime\u003e"
                }
              ],
              "index": 31,
              "name": "Multisig"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 84,
                  "typeName": "pallet_bounties::Event\u003cRuntime\u003e"
                }
              ],
              "index": 32,
              "name": "Bounties"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 85,
                  "typeName": "pallet_tips::Event\u003cRuntime\u003e"
                }
              ],
              "index": 33,
              "name": "Tips"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 86,
                  "typeName": "pallet_assets::Event\u003cRuntime\u003e"
                }
              ],
              "index": 34,
              "name": "Assets"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 87,
                  "typeName": "pallet_lottery::Event\u003cRuntime\u003e"
                }
              ],
              "index": 36,
              "name": "Lottery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 89,
                  "typeName": "pallet_gilt::Event\u003cRuntime\u003e"
                }
              ],
              "index": 37,
              "name": "Gilt"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 90,
                  "typeName": "pallet_uniques::Event\u003cRuntime\u003e"
                }
              ],
              "index": 38,
              "name": "Uniques"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 96,
                  "typeName": "pallet_transaction_storage::Event\u003cRuntime\u003e"
                }
              ],
              "index": 39,
              "name": "TransactionStorage"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "node_runtime",
        "Event"
      ]
    }
  },
  {
    "id": 21,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "An extrinsic completed successfully. \\\\[info\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 22,
                  "typeName": "DispatchInfo"
                }
              ],
              "index": 0,
              "name": "ExtrinsicSuccess"
            },
            {
              "docs": [
                "An extrinsic failed. \\\\[error, info\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 25,
                  "typeName": "DispatchError"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 22,
                  "typeName": "DispatchInfo"
                }
              ],
              "index": 1,
              "name": "ExtrinsicFailed"
            },
            {
              "docs": [
                "`:code` was updated."
              ],
              "fields": null,
              "index": 2,
              "name": "CodeUpdated"
            },
            {
              "docs": [
                "A new \\\\[account\\\\] was created."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 3,
              "name": "NewAccount"
            },
            {
              "docs": [
                "An \\\\[account\\\\] was reaped."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 4,
              "name": "KilledAccount"
            },
            {
              "docs": [
                "On on-chain remark happened. \\\\[origin, remark_hash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 5,
              "name": "Remarked"
            }
          ]
        }
      },
      "docs": [
        "Event for the System pallet.",
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 22,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Weight of this transaction."
              ],
              "name": "weight",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Class of this transaction."
              ],
              "name": "class",
              "type": 23,
              "typeName": "DispatchClass"
            },
            {
              "docs": [
                "Does this transaction pay fees."
              ],
              "name": "pays_fee",
              "type": 24,
              "typeName": "Pays"
            }
          ]
        }
      },
      "docs": [
        "A bundle of static information collected from the `#[weight = $x]` attributes."
      ],
      "params": null,
      "path": [
        "frame_support",
        "weights",
        "DispatchInfo"
      ]
    }
  },
  {
    "id": 23,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A normal dispatch."
              ],
              "fields": null,
              "index": 0,
              "name": "Normal"
            },
            {
              "docs": [
                "An operational dispatch."
              ],
              "fields": null,
              "index": 1,
              "name": "Operational"
            },
            {
              "docs": [
                "A mandatory dispatch. These kinds of dispatch are always included regardless of their",
                "weight, therefore it is critical that they are separately validated to ensure that a",
                "malicious validator cannot craft a valid but impossibly heavy block. Usually this just means",
                "ensuring that the extrinsic can only be included once and that it is always very light.",
                "",
                "Do *NOT* use it for extrinsics that can be heavy.",
                "",
                "The only real use case for this is inherent extrinsics that are required to execute in a",
                "block for the block to be valid, and it solves the issue in the case that the block",
                "initialization is sufficiently heavy to mean that those inherents do not fit into the",
                "block. Essentially, we assume that in these exceptional circumstances, it is better to",
                "allow an overweight block to be created than to not allow any block at all to be created."
              ],
              "fields": null,
              "index": 2,
              "name": "Mandatory"
            }
          ]
        }
      },
      "docs": [
        "A generalized group of dispatch types.",
        "",
        "NOTE whenever upgrading the enum make sure to also update",
        "[DispatchClass::all] and [DispatchClass::non_mandatory] helper functions."
      ],
      "params": null,
      "path": [
        "frame_support",
        "weights",
        "DispatchClass"
      ]
    }
  },
  {
    "id": 24,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Transactor will pay related fees."
              ],
              "fields": null,
              "index": 0,
              "name": "Yes"
            },
            {
              "docs": [
                "Transactor will NOT pay related fees."
              ],
              "fields": null,
              "index": 1,
              "name": "No"
            }
          ]
        }
      },
      "docs": [
        "Explicit enum to denote if a transaction pays fee or not."
      ],
      "params": null,
      "path": [
        "frame_support",
        "weights",
        "Pays"
      ]
    }
  },
  {
    "id": 25,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Some error occurred."
              ],
              "fields": null,
              "index": 0,
              "name": "Other"
            },
            {
              "docs": [
                "Failed to lookup some data."
              ],
              "fields": null,
              "index": 1,
              "name": "CannotLookup"
            },
            {
              "docs": [
                "A bad origin."
              ],
              "fields": null,
              "index": 2,
              "name": "BadOrigin"
            },
            {
              "docs": [
                "A custom error in a module."
              ],
              "fields": [
                {
                  "docs": [
                    "Module index, matching the metadata module index."
                  ],
                  "name": "index",
                  "type": 2,
                  "typeName": "u8"
                },
                {
                  "docs": [
                    "Module specific error value."
                  ],
                  "name": "error",
                  "type": 2,
                  "typeName": "u8"
                }
              ],
              "index": 3,
              "name": "Module"
            },
            {
              "docs": [
                "At least one consumer is remaining so the account cannot be destroyed."
              ],
              "fields": null,
              "index": 4,
              "name": "ConsumerRemaining"
            },
            {
              "docs": [
                "There are no providers so the account cannot be created."
              ],
              "fields": null,
              "index": 5,
              "name": "NoProviders"
            },
            {
              "docs": [
                "An error to do with tokens."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 26,
                  "typeName": "TokenError"
                }
              ],
              "index": 6,
              "name": "Token"
            },
            {
              "docs": [
                "An arithmetic error."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 27,
                  "typeName": "ArithmeticError"
                }
              ],
              "index": 7,
              "name": "Arithmetic"
            }
          ]
        }
      },
      "docs": [
        "Reason why a dispatch call failed."
      ],
      "params": null,
      "path": [
        "sp_runtime",
        "DispatchError"
      ]
    }
  },
  {
    "id": 26,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Funds are unavailable."
              ],
              "fields": null,
              "index": 0,
              "name": "NoFunds"
            },
            {
              "docs": [
                "Account that must exist would die."
              ],
              "fields": null,
              "index": 1,
              "name": "WouldDie"
            },
            {
              "docs": [
                "Account cannot exist with the funds that would be given."
              ],
              "fields": null,
              "index": 2,
              "name": "BelowMinimum"
            },
            {
              "docs": [
                "Account cannot be created."
              ],
              "fields": null,
              "index": 3,
              "name": "CannotCreate"
            },
            {
              "docs": [
                "The asset in question is unknown."
              ],
              "fields": null,
              "index": 4,
              "name": "UnknownAsset"
            },
            {
              "docs": [
                "Funds exist but are frozen."
              ],
              "fields": null,
              "index": 5,
              "name": "Frozen"
            },
            {
              "docs": [
                "Operation is not supported by the asset."
              ],
              "fields": null,
              "index": 6,
              "name": "Unsupported"
            }
          ]
        }
      },
      "docs": [
        "Description of what went wrong when trying to complete an operation on a token."
      ],
      "params": null,
      "path": [
        "sp_runtime",
        "TokenError"
      ]
    }
  },
  {
    "id": 27,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Underflow."
              ],
              "fields": null,
              "index": 0,
              "name": "Underflow"
            },
            {
              "docs": [
                "Overflow."
              ],
              "fields": null,
              "index": 1,
              "name": "Overflow"
            },
            {
              "docs": [
                "Division by zero."
              ],
              "fields": null,
              "index": 2,
              "name": "DivisionByZero"
            }
          ]
        }
      },
      "docs": [
        "Arithmetic errors."
      ],
      "params": null,
      "path": [
        "sp_runtime",
        "ArithmeticError"
      ]
    }
  },
  {
    "id": 28,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                "well as the error. \\\\[index, error\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 25,
                  "typeName": "DispatchError"
                }
              ],
              "index": 0,
              "name": "BatchInterrupted"
            },
            {
              "docs": [
                "Batch of dispatches completed fully with no error."
              ],
              "fields": null,
              "index": 1,
              "name": "BatchCompleted"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": null,
      "path": [
        "pallet_utility",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 29,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A account index was assigned. \\\\[index, who\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex"
                }
              ],
              "index": 0,
              "name": "IndexAssigned"
            },
            {
              "docs": [
                "A account index has been freed up (unassigned). \\\\[index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex"
                }
              ],
              "index": 1,
              "name": "IndexFreed"
            },
            {
              "docs": [
                "A account index has been frozen to its current account ID. \\\\[index, who\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 2,
              "name": "IndexFrozen"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_indices",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 30,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "An account was created with some free balance. \\\\[account, free_balance\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                }
              ],
              "index": 0,
              "name": "Endowed"
            },
            {
              "docs": [
                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                "resulting in an outright loss. \\\\[account, balance\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                }
              ],
              "index": 1,
              "name": "DustLost"
            },
            {
              "docs": [
                "Transfer succeeded. \\\\[from, to, value\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                }
              ],
              "index": 2,
              "name": "Transfer"
            },
            {
              "docs": [
                "A balance was set by root. \\\\[who, free, reserved\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                }
              ],
              "index": 3,
              "name": "BalanceSet"
            },
            {
              "docs": [
                "Some amount was deposited (e.g. for transaction fees). \\\\[who, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                }
              ],
              "index": 4,
              "name": "Deposit"
            },
            {
              "docs": [
                "Some balance was reserved (moved from free to reserved). \\\\[who, value\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                }
              ],
              "index": 5,
              "name": "Reserved"
            },
            {
              "docs": [
                "Some balance was unreserved (moved from reserved to free). \\\\[who, value\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                }
              ],
              "index": 6,
              "name": "Unreserved"
            },
            {
              "docs": [
                "Some balance was moved from the reserve of the first account to the second account.",
                "Final argument indicates the destination balance type.",
                "\\\\[from, to, balance, destination_status\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 31,
                  "typeName": "Status"
                }
              ],
              "index": 7,
              "name": "ReserveRepatriated"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_balances",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 31,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Funds are free, as corresponding to `free` item in Balances."
              ],
              "fields": null,
              "index": 0,
              "name": "Free"
            },
            {
              "docs": [
                "Funds are reserved, as corresponding to `reserved` item in Balances."
              ],
              "fields": null,
              "index": 1,
              "name": "Reserved"
            }
          ]
        }
      },
      "docs": [
        "Status of funds."
      ],
      "params": null,
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "BalanceStatus"
      ]
    }
  },
  {
    "id": 32,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A solution was stored with the given compute.",
                "",
                "If the solution is signed, this means that it hasn\\'t yet been processed. If the",
                "solution is unsigned, this means that it has also been processed.",
                "",
                "The `bool` is `true` when a previous solution was ejected to make room for this one."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 33,
                  "typeName": "ElectionCompute"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 0,
              "name": "SolutionStored"
            },
            {
              "docs": [
                "The election has been finalized, with `Some` of the given computation, or else if the",
                "election failed, `None`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 35,
                  "typeName": "Option\u003cElectionCompute\u003e"
                }
              ],
              "index": 1,
              "name": "ElectionFinalized"
            },
            {
              "docs": [
                "An account has been rewarded for their signed submission being finalized."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "\u003cT as frame_system::Config\u003e::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "Rewarded"
            },
            {
              "docs": [
                "An account has been slashed for submitting an invalid signed submission."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "\u003cT as frame_system::Config\u003e::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 3,
              "name": "Slashed"
            },
            {
              "docs": [
                "The signed phase of the given round has started."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 4,
              "name": "SignedPhaseStarted"
            },
            {
              "docs": [
                "The unsigned phase of the given round has started."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 5,
              "name": "UnsignedPhaseStarted"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 33,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Election was computed on-chain."
              ],
              "fields": null,
              "index": 0,
              "name": "OnChain"
            },
            {
              "docs": [
                "Election was computed with a signed submission."
              ],
              "fields": null,
              "index": 1,
              "name": "Signed"
            },
            {
              "docs": [
                "Election was computed with an unsigned submission."
              ],
              "fields": null,
              "index": 2,
              "name": "Unsigned"
            },
            {
              "docs": [
                "Election was computed with emergency status."
              ],
              "fields": null,
              "index": 3,
              "name": "Emergency"
            }
          ]
        }
      },
      "docs": [
        "The type of `Computation` that provided this election data."
      ],
      "params": null,
      "path": [
        "pallet_election_provider_multi_phase",
        "ElectionCompute"
      ]
    }
  },
  {
    "id": 34,
    "type": {
      "def": {
        "Primitive": "Bool"
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 35,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 33,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 33
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 36,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The era payout has been set; the first balance is the validator-payout; the second is",
                "the remainder from the maximum amount of reward.",
                "\\\\[era_index, validator_payout, remainder\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "EraIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 0,
              "name": "EraPayout"
            },
            {
              "docs": [
                "The staker has been rewarded by this amount. \\\\[stash, amount\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 1,
              "name": "Reward"
            },
            {
              "docs": [
                "One validator (and its nominators) has been slashed by the given amount.",
                "\\\\[validator, amount\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "Slash"
            },
            {
              "docs": [
                "An old slashing report from a prior era was discarded because it could",
                "not be processed. \\\\[session_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "SessionIndex"
                }
              ],
              "index": 3,
              "name": "OldSlashingReportDiscarded"
            },
            {
              "docs": [
                "A new set of stakers was elected."
              ],
              "fields": null,
              "index": 4,
              "name": "StakingElection"
            },
            {
              "docs": [
                "An account has bonded this amount. \\\\[stash, amount\\\\]",
                "",
                "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                "it will not be emitted for staking rewards when they are added to stake."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 5,
              "name": "Bonded"
            },
            {
              "docs": [
                "An account has unbonded this amount. \\\\[stash, amount\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 6,
              "name": "Unbonded"
            },
            {
              "docs": [
                "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                "from the unlocking queue. \\\\[stash, amount\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 7,
              "name": "Withdrawn"
            },
            {
              "docs": [
                "A nominator has been kicked from a validator. \\\\[nominator, stash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 8,
              "name": "Kicked"
            },
            {
              "docs": [
                "The election failed. No new era is planned."
              ],
              "fields": null,
              "index": 9,
              "name": "StakingElectionFailed"
            },
            {
              "docs": [
                "An account has stopped participating as either a validator or nominator.",
                "\\\\[stash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 10,
              "name": "Chilled"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_staking",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 37,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" New session has happened. Note that the argument is the \\[session_index\\], not the block",
                "r\" number as the type might suggest."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "SessionIndex"
                }
              ],
              "index": 0,
              "name": "NewSession"
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ],
      "params": null,
      "path": [
        "pallet_session",
        "Event"
      ]
    }
  },
  {
    "id": 38,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A motion has been proposed by a public account. \\\\[proposal_index, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "PropIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 0,
              "name": "Proposed"
            },
            {
              "docs": [
                "A public proposal has been tabled for referendum vote. \\\\[proposal_index, deposit, depositors\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "PropIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                }
              ],
              "index": 1,
              "name": "Tabled"
            },
            {
              "docs": [
                "An external proposal has been tabled."
              ],
              "fields": null,
              "index": 2,
              "name": "ExternalTabled"
            },
            {
              "docs": [
                "A referendum has begun. \\\\[ref_index, threshold\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 40,
                  "typeName": "VoteThreshold"
                }
              ],
              "index": 3,
              "name": "Started"
            },
            {
              "docs": [
                "A proposal has been approved by referendum. \\\\[ref_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 4,
              "name": "Passed"
            },
            {
              "docs": [
                "A proposal has been rejected by referendum. \\\\[ref_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 5,
              "name": "NotPassed"
            },
            {
              "docs": [
                "A referendum has been cancelled. \\\\[ref_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 6,
              "name": "Cancelled"
            },
            {
              "docs": [
                "A proposal has been enacted. \\\\[ref_index, is_ok\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 7,
              "name": "Executed"
            },
            {
              "docs": [
                "An account has delegated their vote to another account. \\\\[who, target\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 8,
              "name": "Delegated"
            },
            {
              "docs": [
                "An \\\\[account\\\\] has cancelled a previous delegation operation."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 9,
              "name": "Undelegated"
            },
            {
              "docs": [
                "An external proposal has been vetoed. \\\\[who, proposal_hash, until\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                }
              ],
              "index": 10,
              "name": "Vetoed"
            },
            {
              "docs": [
                "A proposal\\'s preimage was noted, and the deposit taken. \\\\[proposal_hash, who, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 11,
              "name": "PreimageNoted"
            },
            {
              "docs": [
                "A proposal preimage was removed and used (the deposit was returned).",
                "\\\\[proposal_hash, provider, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 12,
              "name": "PreimageUsed"
            },
            {
              "docs": [
                "A proposal could not be executed because its preimage was invalid.",
                "\\\\[proposal_hash, ref_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 13,
              "name": "PreimageInvalid"
            },
            {
              "docs": [
                "A proposal could not be executed because its preimage was missing.",
                "\\\\[proposal_hash, ref_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 14,
              "name": "PreimageMissing"
            },
            {
              "docs": [
                "A registered preimage was removed and the deposit collected by the reaper.",
                "\\\\[proposal_hash, provider, deposit, reaper\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 15,
              "name": "PreimageReaped"
            },
            {
              "docs": [
                "An \\\\[account\\\\] has been unlocked successfully."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 16,
              "name": "Unlocked"
            },
            {
              "docs": [
                "A proposal \\\\[hash\\\\] has been blacklisted permanently."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 17,
              "name": "Blacklisted"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_democracy",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 39,
    "type": {
      "def": {
        "Sequence": {
          "type": 0
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 40,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A supermajority of approvals is needed to pass this vote."
              ],
              "fields": null,
              "index": 0,
              "name": "SuperMajorityApprove"
            },
            {
              "docs": [
                "A supermajority of rejects is needed to fail this vote."
              ],
              "fields": null,
              "index": 1,
              "name": "SuperMajorityAgainst"
            },
            {
              "docs": [
                "A simple majority of approvals is needed to pass this vote."
              ],
              "fields": null,
              "index": 2,
              "name": "SimpleMajority"
            }
          ]
        }
      },
      "docs": [
        "A means of determining if a vote is past pass threshold."
      ],
      "params": null,
      "path": [
        "pallet_democracy",
        "vote_threshold",
        "VoteThreshold"
      ]
    }
  },
  {
    "id": 41,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" A motion (given hash) has been proposed (by given account) with a threshold (given",
                "r\" `MemberCount`).",
                "r\" \\[account, proposal_index, proposal_hash, threshold\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 0,
              "name": "Proposed"
            },
            {
              "docs": [
                "r\" A motion (given hash) has been voted on by given account, leaving",
                "r\" a tally (yes votes and no votes given respectively as `MemberCount`).",
                "r\" \\[account, proposal_hash, voted, yes, no\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 1,
              "name": "Voted"
            },
            {
              "docs": [
                "r\" A motion was approved by the required threshold.",
                "r\" \\[proposal_hash\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                }
              ],
              "index": 2,
              "name": "Approved"
            },
            {
              "docs": [
                "r\" A motion was not approved by the required threshold.",
                "r\" \\[proposal_hash\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                }
              ],
              "index": 3,
              "name": "Disapproved"
            },
            {
              "docs": [
                "r\" A motion was executed; result will be `Ok` if it returned without error.",
                "r\" \\[proposal_hash, result\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 4,
              "name": "Executed"
            },
            {
              "docs": [
                "r\" A single member did some action; result will be `Ok` if it returned without error.",
                "r\" \\[proposal_hash, result\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 5,
              "name": "MemberExecuted"
            },
            {
              "docs": [
                "r\" A proposal was closed because its threshold was reached or after its duration was up.",
                "r\" \\[proposal_hash, yes, no\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 6,
              "name": "Closed"
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ],
      "params": [
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": 42
        }
      ],
      "path": [
        "pallet_collective",
        "RawEvent"
      ]
    }
  },
  {
    "id": 42,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "r\"Module instance"
      ],
      "params": null,
      "path": [
        "pallet_collective",
        "Instance1"
      ]
    }
  },
  {
    "id": 43,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 44,
                  "typeName": null
                }
              ],
              "index": 0,
              "name": "Ok"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 25,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Err"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 44
        },
        {
          "name": "E",
          "type": 25
        }
      ],
      "path": [
        "Result"
      ]
    }
  },
  {
    "id": 44,
    "type": {
      "def": {
        "Tuple": null
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 45,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" A motion (given hash) has been proposed (by given account) with a threshold (given",
                "r\" `MemberCount`).",
                "r\" \\[account, proposal_index, proposal_hash, threshold\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 0,
              "name": "Proposed"
            },
            {
              "docs": [
                "r\" A motion (given hash) has been voted on by given account, leaving",
                "r\" a tally (yes votes and no votes given respectively as `MemberCount`).",
                "r\" \\[account, proposal_hash, voted, yes, no\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 1,
              "name": "Voted"
            },
            {
              "docs": [
                "r\" A motion was approved by the required threshold.",
                "r\" \\[proposal_hash\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                }
              ],
              "index": 2,
              "name": "Approved"
            },
            {
              "docs": [
                "r\" A motion was not approved by the required threshold.",
                "r\" \\[proposal_hash\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                }
              ],
              "index": 3,
              "name": "Disapproved"
            },
            {
              "docs": [
                "r\" A motion was executed; result will be `Ok` if it returned without error.",
                "r\" \\[proposal_hash, result\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 4,
              "name": "Executed"
            },
            {
              "docs": [
                "r\" A single member did some action; result will be `Ok` if it returned without error.",
                "r\" \\[proposal_hash, result\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 5,
              "name": "MemberExecuted"
            },
            {
              "docs": [
                "r\" A proposal was closed because its threshold was reached or after its duration was up.",
                "r\" \\[proposal_hash, yes, no\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 6,
              "name": "Closed"
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ],
      "params": [
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": 46
        }
      ],
      "path": [
        "pallet_collective",
        "RawEvent"
      ]
    }
  },
  {
    "id": 46,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "r\"Module instance"
      ],
      "params": null,
      "path": [
        "pallet_collective",
        "Instance2"
      ]
    }
  },
  {
    "id": 47,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A new term with \\\\[new_members\\\\]. This indicates that enough candidates existed to run",
                "the election, not that enough have has been elected. The inner value must be examined",
                "for this purpose. A `NewTerm(\\\\[\\\\])` indicates that some candidates got their bond",
                "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                "begin with."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 48,
                  "typeName": "Vec\u003c(\u003cT as frame_system::Config\u003e::AccountId, BalanceOf\u003cT\u003e)\u003e"
                }
              ],
              "index": 0,
              "name": "NewTerm"
            },
            {
              "docs": [
                "No (or not enough) candidates existed for this round. This is different from",
                "`NewTerm(\\\\[\\\\])`. See the description of `NewTerm`."
              ],
              "fields": null,
              "index": 1,
              "name": "EmptyTerm"
            },
            {
              "docs": [
                "Internal error happened while trying to perform election."
              ],
              "fields": null,
              "index": 2,
              "name": "ElectionError"
            },
            {
              "docs": [
                "A \\\\[member\\\\] has been removed. This should always be followed by either `NewTerm` or",
                "`EmptyTerm`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "\u003cT as frame_system::Config\u003e::AccountId"
                }
              ],
              "index": 3,
              "name": "MemberKicked"
            },
            {
              "docs": [
                "Someone has renounced their candidacy."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "\u003cT as frame_system::Config\u003e::AccountId"
                }
              ],
              "index": 4,
              "name": "Renounced"
            },
            {
              "docs": [
                "A \\\\[candidate\\\\] was slashed by \\\\[amount\\\\] due to failing to obtain a seat as member or",
                "runner-up.",
                "",
                "Note that old members and runners-up are also candidates."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "\u003cT as frame_system::Config\u003e::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 5,
              "name": "CandidateSlashed"
            },
            {
              "docs": [
                "A \\\\[seat holder\\\\] was slashed by \\\\[amount\\\\] by being forcefully removed from the set."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "\u003cT as frame_system::Config\u003e::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 6,
              "name": "SeatHolderSlashed"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 48,
    "type": {
      "def": {
        "Sequence": {
          "type": 49
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 49,
    "type": {
      "def": {
        "Tuple": [
          0,
          6
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 50,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" The given member was added; see the transaction for who."
              ],
              "fields": null,
              "index": 0,
              "name": "MemberAdded"
            },
            {
              "docs": [
                "r\" The given member was removed; see the transaction for who."
              ],
              "fields": null,
              "index": 1,
              "name": "MemberRemoved"
            },
            {
              "docs": [
                "r\" Two members were swapped; see the transaction for who."
              ],
              "fields": null,
              "index": 2,
              "name": "MembersSwapped"
            },
            {
              "docs": [
                "r\" The membership was reset; see the transaction for who the new set is."
              ],
              "fields": null,
              "index": 3,
              "name": "MembersReset"
            },
            {
              "docs": [
                "r\" One of the members' keys changed."
              ],
              "fields": null,
              "index": 4,
              "name": "KeyChanged"
            },
            {
              "docs": [
                "r\" Phantom member, never used."
              ],
              "fields": null,
              "index": 5,
              "name": "Dummy"
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Event",
          "type": 20
        },
        {
          "name": "I",
          "type": 51
        }
      ],
      "path": [
        "pallet_membership",
        "RawEvent"
      ]
    }
  },
  {
    "id": 51,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "r\"Module instance"
      ],
      "params": null,
      "path": [
        "pallet_membership",
        "Instance1"
      ]
    }
  },
  {
    "id": 52,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "New authority set has been applied. \\\\[authority_set\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 53,
                  "typeName": "AuthorityList"
                }
              ],
              "index": 0,
              "name": "NewAuthorities"
            },
            {
              "docs": [
                "Current authority set has been paused."
              ],
              "fields": null,
              "index": 1,
              "name": "Paused"
            },
            {
              "docs": [
                "Current authority set has been resumed."
              ],
              "fields": null,
              "index": 2,
              "name": "Resumed"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": null,
      "path": [
        "pallet_grandpa",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 53,
    "type": {
      "def": {
        "Sequence": {
          "type": 54
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 54,
    "type": {
      "def": {
        "Tuple": [
          55,
          8
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 55,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 56,
              "typeName": "ed25519::Public"
            }
          ]
        }
      },
      "docs": [
        "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
      ],
      "params": null,
      "path": [
        "sp_finality_grandpa",
        "app",
        "Public"
      ]
    }
  },
  {
    "id": 56,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]"
            }
          ]
        }
      },
      "docs": [
        "A public key."
      ],
      "params": null,
      "path": [
        "sp_core",
        "ed25519",
        "Public"
      ]
    }
  },
  {
    "id": 57,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "New proposal. \\\\[proposal_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex"
                }
              ],
              "index": 0,
              "name": "Proposed"
            },
            {
              "docs": [
                "We have ended a spend period and will now allocate funds. \\\\[budget_remaining\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                }
              ],
              "index": 1,
              "name": "Spending"
            },
            {
              "docs": [
                "Some funds have been allocated. \\\\[proposal_index, award, beneficiary\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 2,
              "name": "Awarded"
            },
            {
              "docs": [
                "A proposal was rejected; funds were slashed. \\\\[proposal_index, slashed\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                }
              ],
              "index": 3,
              "name": "Rejected"
            },
            {
              "docs": [
                "Some of our funds have been burnt. \\\\[burn\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                }
              ],
              "index": 4,
              "name": "Burnt"
            },
            {
              "docs": [
                "Spending has finished; this is the amount that rolls over until next spend.",
                "\\\\[budget_remaining\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                }
              ],
              "index": 5,
              "name": "Rollover"
            },
            {
              "docs": [
                "Some funds have been deposited. \\\\[deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                }
              ],
              "index": 6,
              "name": "Deposit"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_treasury",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 58,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Contract deployed by address at the specified address. \\\\[deployer, contract\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 0,
              "name": "Instantiated"
            },
            {
              "docs": [
                "Contract has been evicted and is now in tombstone state. \\\\[contract\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 1,
              "name": "Evicted"
            },
            {
              "docs": [
                "Contract has been terminated without leaving a tombstone.",
                "\\\\[contract, beneficiary\\\\]",
                "",
                "# Params",
                "",
                "- `contract`: The contract that was terminated.",
                "- `beneficiary`: The account that received the contracts remaining balance.",
                "",
                "# Note",
                "",
                "The only way for a contract to be removed without a tombstone and emitting",
                "this event is by calling `seal_terminate`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 2,
              "name": "Terminated"
            },
            {
              "docs": [
                "Restoration of a contract has been successful.",
                "\\\\[restorer, dest, code_hash, rent_allowance\\\\]",
                "",
                "# Params",
                "",
                "- `restorer`: Account ID of the restoring contract.",
                "- `dest`: Account ID of the restored contract.",
                "- `code_hash`: Code hash of the restored contract.",
                "- `rent_allowance`: Rent allowance of the restored contract."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 3,
              "name": "Restored"
            },
            {
              "docs": [
                "Code with the specified hash has been stored. \\\\[code_hash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 4,
              "name": "CodeStored"
            },
            {
              "docs": [
                "Triggered when the current schedule is updated.",
                "\\\\[version\\\\]",
                "",
                "# Params",
                "",
                "- `version`: The version of the newly set schedule."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 5,
              "name": "ScheduleUpdated"
            },
            {
              "docs": [
                "A custom event emitted by the contract.",
                "\\\\[contract, data\\\\]",
                "",
                "# Params",
                "",
                "- `contract`: The contract that emitted the event.",
                "- `data`: Data supplied by the contract. Metadata generated during contract",
                "          compilation is needed to decode it."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 6,
              "name": "ContractEmitted"
            },
            {
              "docs": [
                "A code with the specified hash was removed.",
                "\\\\[code_hash\\\\]",
                "",
                "This happens when the last contract that uses this code hash was removed or evicted."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 7,
              "name": "CodeRemoved"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_contracts",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 59,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A sudo just took place. \\\\[result\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 0,
              "name": "Sudid"
            },
            {
              "docs": [
                "The \\\\[sudoer\\\\] just switched identity; the old key is supplied."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 1,
              "name": "KeyChanged"
            },
            {
              "docs": [
                "A sudo just took place. \\\\[result\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 2,
              "name": "SudoAsDone"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_sudo",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 60,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A new heartbeat was received from `AuthorityId` \\\\[authority_id\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 61,
                  "typeName": "T::AuthorityId"
                }
              ],
              "index": 0,
              "name": "HeartbeatReceived"
            },
            {
              "docs": [
                "At the end of the session, no offence was committed."
              ],
              "fields": null,
              "index": 1,
              "name": "AllGood"
            },
            {
              "docs": [
                "At the end of the session, at least one validator was found to be \\\\[offline\\\\]."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 63,
                  "typeName": "Vec\u003cIdentificationTuple\u003cT\u003e\u003e"
                }
              ],
              "index": 2,
              "name": "SomeOffline"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_im_online",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 61,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 62,
              "typeName": "sr25519::Public"
            }
          ]
        }
      },
      "docs": [
        "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
      ],
      "params": null,
      "path": [
        "pallet_im_online",
        "sr25519",
        "app_sr25519",
        "Public"
      ]
    }
  },
  {
    "id": 62,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]"
            }
          ]
        }
      },
      "docs": [
        "An Schnorrkel/Ristretto x25519 (\\\"sr25519\\\") public key."
      ],
      "params": null,
      "path": [
        "sp_core",
        "sr25519",
        "Public"
      ]
    }
  },
  {
    "id": 63,
    "type": {
      "def": {
        "Sequence": {
          "type": 64
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 64,
    "type": {
      "def": {
        "Tuple": [
          0,
          65
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 65,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The total balance backing this validator."
              ],
              "name": "total",
              "type": 66,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The validator\\'s own stash that is exposed."
              ],
              "name": "own",
              "type": 66,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The portions of nominators stashes that are exposed."
              ],
              "name": "others",
              "type": 67,
              "typeName": "Vec\u003cIndividualExposure\u003cAccountId, Balance\u003e\u003e"
            }
          ]
        }
      },
      "docs": [
        "A snapshot of the stake backing a single validator in the system."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_staking",
        "Exposure"
      ]
    }
  },
  {
    "id": 66,
    "type": {
      "def": {
        "Compact": {
          "type": 6
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 67,
    "type": {
      "def": {
        "Sequence": {
          "type": 68
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 68,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The stash account of the nominator in question."
              ],
              "name": "who",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "Amount of funds exposed."
              ],
              "name": "value",
              "type": 66,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "The amount of exposure (to slashing) than an individual nominator has."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_staking",
        "IndividualExposure"
      ]
    }
  },
  {
    "id": 69,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "There is an offence reported of the given `kind` happened at the `session_index` and",
                "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                "\\\\[kind, timeslot\\\\]."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 70,
                  "typeName": "Kind"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "OpaqueTimeSlot"
                }
              ],
              "index": 0,
              "name": "Offence"
            }
          ]
        }
      },
      "docs": [
        "Events type.",
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": null,
      "path": [
        "pallet_offences",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 70,
    "type": {
      "def": {
        "Array": {
          "len": 16,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 71,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A name was set or reset (which will remove all judgements). \\\\[who\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 0,
              "name": "IdentitySet"
            },
            {
              "docs": [
                "A name was cleared, and the given balance returned. \\\\[who, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 1,
              "name": "IdentityCleared"
            },
            {
              "docs": [
                "A name was removed and the given balance slashed. \\\\[who, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "IdentityKilled"
            },
            {
              "docs": [
                "A judgement was asked from a registrar. \\\\[who, registrar_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex"
                }
              ],
              "index": 3,
              "name": "JudgementRequested"
            },
            {
              "docs": [
                "A judgement request was retracted. \\\\[who, registrar_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex"
                }
              ],
              "index": 4,
              "name": "JudgementUnrequested"
            },
            {
              "docs": [
                "A judgement was given by a registrar. \\\\[target, registrar_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex"
                }
              ],
              "index": 5,
              "name": "JudgementGiven"
            },
            {
              "docs": [
                "A registrar was added. \\\\[registrar_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex"
                }
              ],
              "index": 6,
              "name": "RegistrarAdded"
            },
            {
              "docs": [
                "A sub-identity was added to an identity and the deposit paid. \\\\[sub, main, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 7,
              "name": "SubIdentityAdded"
            },
            {
              "docs": [
                "A sub-identity was removed from an identity and the deposit freed.",
                "\\\\[sub, main, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 8,
              "name": "SubIdentityRemoved"
            },
            {
              "docs": [
                "A sub-identity was cleared, and the given deposit repatriated from the",
                "main identity account to the sub-identity account. \\\\[sub, main, deposit\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 9,
              "name": "SubIdentityRevoked"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_identity",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 72,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" The society is founded by the given identity. \\[founder\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 0,
              "name": "Founded"
            },
            {
              "docs": [
                "r\" A membership bid just happened. The given account is the candidate's ID and their offer",
                "r\" is the second. \\[candidate_id, offer\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 1,
              "name": "Bid"
            },
            {
              "docs": [
                "r\" A membership bid just happened by vouching. The given account is the candidate's ID and",
                "r\" their offer is the second. The vouching party is the third. \\[candidate_id, offer, vouching\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 2,
              "name": "Vouch"
            },
            {
              "docs": [
                "r\" A \\[candidate\\] was dropped (due to an excess of bids in the system)."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 3,
              "name": "AutoUnbid"
            },
            {
              "docs": [
                "r\" A \\[candidate\\] was dropped (by their request)."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 4,
              "name": "Unbid"
            },
            {
              "docs": [
                "r\" A \\[candidate\\] was dropped (by request of who vouched for them)."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 5,
              "name": "Unvouch"
            },
            {
              "docs": [
                "r\" A group of candidates have been inducted. The batch's primary is the first value, the",
                "r\" batch in full is the second. \\[primary, candidates\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cAccountId\u003e"
                }
              ],
              "index": 6,
              "name": "Inducted"
            },
            {
              "docs": [
                "r\" A suspended member has been judged. \\[who, judged\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 7,
              "name": "SuspendedMemberJudgement"
            },
            {
              "docs": [
                "r\" A \\[candidate\\] has been suspended"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 8,
              "name": "CandidateSuspended"
            },
            {
              "docs": [
                "r\" A \\[member\\] has been suspended"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 9,
              "name": "MemberSuspended"
            },
            {
              "docs": [
                "r\" A \\[member\\] has been challenged"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 10,
              "name": "Challenged"
            },
            {
              "docs": [
                "r\" A vote has been placed \\[candidate, voter, vote\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 11,
              "name": "Vote"
            },
            {
              "docs": [
                "r\" A vote has been placed for a defending member \\[voter, vote\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 12,
              "name": "DefenderVote"
            },
            {
              "docs": [
                "r\" A new \\[max\\] member count has been set"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 13,
              "name": "NewMaxMembers"
            },
            {
              "docs": [
                "r\" Society is unfounded. \\[founder\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 14,
              "name": "Unfounded"
            },
            {
              "docs": [
                "r\" Some funds were deposited into the society account. \\[value\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 15,
              "name": "Deposit"
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        "",
        "r\" Events for this module."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "I",
          "type": 73
        }
      ],
      "path": [
        "pallet_society",
        "RawEvent"
      ]
    }
  },
  {
    "id": 73,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "r\"Default module instance"
      ],
      "params": null,
      "path": [
        "pallet_society",
        "DefaultInstance"
      ]
    }
  },
  {
    "id": 74,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A recovery process has been set up for an \\\\[account\\\\]."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 0,
              "name": "RecoveryCreated"
            },
            {
              "docs": [
                "A recovery process has been initiated for lost account by rescuer account.",
                "\\\\[lost, rescuer\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 1,
              "name": "RecoveryInitiated"
            },
            {
              "docs": [
                "A recovery process for lost account by rescuer account has been vouched for by sender.",
                "\\\\[lost, rescuer, sender\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 2,
              "name": "RecoveryVouched"
            },
            {
              "docs": [
                "A recovery process for lost account by rescuer account has been closed.",
                "\\\\[lost, rescuer\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 3,
              "name": "RecoveryClosed"
            },
            {
              "docs": [
                "Lost account has been successfully recovered by rescuer account.",
                "\\\\[lost, rescuer\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 4,
              "name": "AccountRecovered"
            },
            {
              "docs": [
                "A recovery process has been removed for an \\\\[account\\\\]."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 5,
              "name": "RecoveryRemoved"
            }
          ]
        }
      },
      "docs": [
        "Events type.",
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_recovery",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 75,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The amount vested has been updated. This could indicate more funds are available. The",
                "balance given is the amount which is left unvested (and thus locked).",
                "\\\\[account, unvested\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 0,
              "name": "VestingUpdated"
            },
            {
              "docs": [
                "An \\\\[account\\\\] has become fully vested. No further vesting can happen."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 1,
              "name": "VestingCompleted"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_vesting",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 76,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Scheduled some task. \\\\[when, index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 0,
              "name": "Scheduled"
            },
            {
              "docs": [
                "Canceled some task. \\\\[when, index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "Canceled"
            },
            {
              "docs": [
                "Dispatched some task. \\\\[task, id, result\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 77,
                  "typeName": "TaskAddress\u003cT::BlockNumber\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 78,
                  "typeName": "Option\u003cVec\u003cu8\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 2,
              "name": "Dispatched"
            }
          ]
        }
      },
      "docs": [
        "Events type.",
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_scheduler",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 77,
    "type": {
      "def": {
        "Tuple": [
          4,
          4
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 78,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 10
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 79,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A proxy was executed correctly, with the given \\\\[result\\\\]."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 0,
              "name": "ProxyExecuted"
            },
            {
              "docs": [
                "Anonymous account has been created by new proxy with given",
                "disambiguation index and proxy type. \\\\[anonymous, who, proxy_type, disambiguation_index\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 80,
                  "typeName": "T::ProxyType"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 81,
                  "typeName": "u16"
                }
              ],
              "index": 1,
              "name": "AnonymousCreated"
            },
            {
              "docs": [
                "An announcement was placed to make a call in the future. \\\\[real, proxy, call_hash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "CallHashOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "Announced"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_proxy",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 80,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "Any"
            },
            {
              "docs": null,
              "fields": null,
              "index": 1,
              "name": "NonTransfer"
            },
            {
              "docs": null,
              "fields": null,
              "index": 2,
              "name": "Governance"
            },
            {
              "docs": null,
              "fields": null,
              "index": 3,
              "name": "Staking"
            }
          ]
        }
      },
      "docs": [
        "The type used to represent the kinds of proxying allowed."
      ],
      "params": null,
      "path": [
        "node_runtime",
        "ProxyType"
      ]
    }
  },
  {
    "id": 81,
    "type": {
      "def": {
        "Primitive": "U16"
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 82,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A new multisig operation has begun. \\\\[approving, multisig, call_hash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": "CallHash"
                }
              ],
              "index": 0,
              "name": "NewMultisig"
            },
            {
              "docs": [
                "A multisig operation has been approved by someone.",
                "\\\\[approving, timepoint, multisig, call_hash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 83,
                  "typeName": "Timepoint\u003cT::BlockNumber\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": "CallHash"
                }
              ],
              "index": 1,
              "name": "MultisigApproval"
            },
            {
              "docs": [
                "A multisig operation has been executed. \\\\[approving, timepoint, multisig, call_hash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 83,
                  "typeName": "Timepoint\u003cT::BlockNumber\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": "CallHash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 43,
                  "typeName": "DispatchResult"
                }
              ],
              "index": 2,
              "name": "MultisigExecuted"
            },
            {
              "docs": [
                "A multisig operation has been cancelled. \\\\[cancelling, timepoint, multisig, call_hash\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 83,
                  "typeName": "Timepoint\u003cT::BlockNumber\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": "CallHash"
                }
              ],
              "index": 3,
              "name": "MultisigCancelled"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_multisig",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 83,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The height of the chain at the point in time."
              ],
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "The index of the extrinsic at the point in time."
              ],
              "name": "index",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "A global extrinsic index, formed as the extrinsic index within a block, together with that",
        "block\\'s height. This allows a transaction in which a multisig operation of a particular",
        "composite was created to be uniquely identified."
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_multisig",
        "Timepoint"
      ]
    }
  },
  {
    "id": 84,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" New bounty proposal. \\[index\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 0,
              "name": "BountyProposed"
            },
            {
              "docs": [
                "r\" A bounty proposal was rejected; funds were slashed. \\[index, bond\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 1,
              "name": "BountyRejected"
            },
            {
              "docs": [
                "r\" A bounty proposal is funded and became active. \\[index\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 2,
              "name": "BountyBecameActive"
            },
            {
              "docs": [
                "r\" A bounty is awarded to a beneficiary. \\[index, beneficiary\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 3,
              "name": "BountyAwarded"
            },
            {
              "docs": [
                "r\" A bounty is claimed by beneficiary. \\[index, payout, beneficiary\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 4,
              "name": "BountyClaimed"
            },
            {
              "docs": [
                "r\" A bounty is cancelled. \\[index\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 5,
              "name": "BountyCanceled"
            },
            {
              "docs": [
                "r\" A bounty expiry is extended. \\[index\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 6,
              "name": "BountyExtended"
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_bounties",
        "RawEvent"
      ]
    }
  },
  {
    "id": 85,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" A new tip suggestion has been opened. \\[tip_hash\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                }
              ],
              "index": 0,
              "name": "NewTip"
            },
            {
              "docs": [
                "r\" A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                }
              ],
              "index": 1,
              "name": "TipClosing"
            },
            {
              "docs": [
                "r\" A tip suggestion has been closed. \\[tip_hash, who, payout\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 2,
              "name": "TipClosed"
            },
            {
              "docs": [
                "r\" A tip suggestion has been retracted. \\[tip_hash\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                }
              ],
              "index": 3,
              "name": "TipRetracted"
            },
            {
              "docs": [
                "r\" A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 4,
              "name": "TipSlashed"
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "path": [
        "pallet_tips",
        "RawEvent"
      ]
    }
  },
  {
    "id": 86,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Some asset class was created. \\\\[asset_id, creator, owner\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 0,
              "name": "Created"
            },
            {
              "docs": [
                "Some assets were issued. \\\\[asset_id, owner, total_supply\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "T::Balance"
                }
              ],
              "index": 1,
              "name": "Issued"
            },
            {
              "docs": [
                "Some assets were transferred. \\\\[asset_id, from, to, amount\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "T::Balance"
                }
              ],
              "index": 2,
              "name": "Transferred"
            },
            {
              "docs": [
                "Some assets were destroyed. \\\\[asset_id, owner, balance\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "T::Balance"
                }
              ],
              "index": 3,
              "name": "Burned"
            },
            {
              "docs": [
                "The management team changed \\\\[asset_id, issuer, admin, freezer\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 4,
              "name": "TeamChanged"
            },
            {
              "docs": [
                "The owner changed \\\\[asset_id, owner\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 5,
              "name": "OwnerChanged"
            },
            {
              "docs": [
                "Some account `who` was frozen. \\\\[asset_id, who\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 6,
              "name": "Frozen"
            },
            {
              "docs": [
                "Some account `who` was thawed. \\\\[asset_id, who\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 7,
              "name": "Thawed"
            },
            {
              "docs": [
                "Some asset `asset_id` was frozen. \\\\[asset_id\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 8,
              "name": "AssetFrozen"
            },
            {
              "docs": [
                "Some asset `asset_id` was thawed. \\\\[asset_id\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 9,
              "name": "AssetThawed"
            },
            {
              "docs": [
                "An asset class was destroyed."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 10,
              "name": "Destroyed"
            },
            {
              "docs": [
                "Some asset class was force-created. \\\\[asset_id, owner\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 11,
              "name": "ForceCreated"
            },
            {
              "docs": [
                "New metadata has been set for an asset. \\\\[asset_id, name, symbol, decimals, is_frozen\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": "u8"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 12,
              "name": "MetadataSet"
            },
            {
              "docs": [
                "Metadata has been cleared for an asset. \\\\[asset_id\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 13,
              "name": "MetadataCleared"
            },
            {
              "docs": [
                "(Additional) funds have been approved for transfer to a destination account.",
                "\\\\[asset_id, source, delegate, amount\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "T::Balance"
                }
              ],
              "index": 14,
              "name": "ApprovedTransfer"
            },
            {
              "docs": [
                "An approval for account `delegate` was cancelled by `owner`.",
                "\\\\[id, owner, delegate\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 15,
              "name": "ApprovalCancelled"
            },
            {
              "docs": [
                "An `amount` was transferred in its entirety from `owner` to `destination` by",
                "the approved `delegate`.",
                "\\\\[id, owner, delegate, destination\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "T::Balance"
                }
              ],
              "index": 16,
              "name": "TransferredApproved"
            },
            {
              "docs": [
                "An asset has had its attributes changed by the `Force` origin.",
                "\\\\[id\\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 17,
              "name": "AssetStatusChanged"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_assets",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 87,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A lottery has been started!"
              ],
              "fields": null,
              "index": 0,
              "name": "LotteryStarted"
            },
            {
              "docs": [
                "A new set of calls have been set!"
              ],
              "fields": null,
              "index": 1,
              "name": "CallsUpdated"
            },
            {
              "docs": [
                "A winner has been chosen!"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "Winner"
            },
            {
              "docs": [
                "A ticket has been bought!"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 88,
                  "typeName": "CallIndex"
                }
              ],
              "index": 3,
              "name": "TicketBought"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_lottery",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 88,
    "type": {
      "def": {
        "Tuple": [
          2,
          2
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 89,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A bid was successfully placed.",
                "\\\\[ who, amount, duration \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 0,
              "name": "BidPlaced"
            },
            {
              "docs": [
                "A bid was successfully removed (before being accepted as a gilt).",
                "\\\\[ who, amount, duration \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "BidRetracted"
            },
            {
              "docs": [
                "A bid was accepted as a gilt. The balance may not be released until expiry.",
                "\\\\[ index, expiry, who, amount \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ActiveIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "GiltIssued"
            },
            {
              "docs": [
                "An expired gilt has been thawed.",
                "\\\\[ index, who, original_amount, additional_amount \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ActiveIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 3,
              "name": "GiltThawed"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_gilt",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 90,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "An asset class was created. \\\\[ class, creator, owner \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 0,
              "name": "Created"
            },
            {
              "docs": [
                "An asset class was force-created. \\\\[ class, owner \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 1,
              "name": "ForceCreated"
            },
            {
              "docs": [
                "An asset `class` was destroyed. \\\\[ class \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                }
              ],
              "index": 2,
              "name": "Destroyed"
            },
            {
              "docs": [
                "An asset `instace` was issued. \\\\[ class, instance, owner \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 3,
              "name": "Issued"
            },
            {
              "docs": [
                "An asset `instace` was transferred. \\\\[ class, instance, from, to \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 4,
              "name": "Transferred"
            },
            {
              "docs": [
                "An asset `instance` was destroyed. \\\\[ class, instance, owner \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 5,
              "name": "Burned"
            },
            {
              "docs": [
                "Some asset `instance` was frozen. \\\\[ class, instance \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                }
              ],
              "index": 6,
              "name": "Frozen"
            },
            {
              "docs": [
                "Some asset `instance` was thawed. \\\\[ class, instance \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                }
              ],
              "index": 7,
              "name": "Thawed"
            },
            {
              "docs": [
                "Some asset `class` was frozen. \\\\[ class \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                }
              ],
              "index": 8,
              "name": "ClassFrozen"
            },
            {
              "docs": [
                "Some asset `class` was thawed. \\\\[ class \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                }
              ],
              "index": 9,
              "name": "ClassThawed"
            },
            {
              "docs": [
                "The owner changed \\\\[ class, new_owner \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 10,
              "name": "OwnerChanged"
            },
            {
              "docs": [
                "The management team changed \\\\[ class, issuer, admin, freezer \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 11,
              "name": "TeamChanged"
            },
            {
              "docs": [
                "An `instance` of an asset `class` has been approved by the `owner` for transfer by a",
                "`delegate`.",
                "\\\\[ class, instance, owner, delegate \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 12,
              "name": "ApprovedTransfer"
            },
            {
              "docs": [
                "An approval for a `delegate` account to transfer the `instance` of an asset `class` was",
                "cancelled by its `owner`.",
                "\\\\[ class, instance, owner, delegate \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 13,
              "name": "ApprovalCancelled"
            },
            {
              "docs": [
                "An asset `class` has had its attributes changed by the `Force` origin.",
                "\\\\[ class \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                }
              ],
              "index": 14,
              "name": "AssetStatusChanged"
            },
            {
              "docs": [
                "New metadata has been set for an asset class. \\\\[ class, data, is_frozen \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 91,
                  "typeName": "BoundedVec\u003cu8, T::StringLimit\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 15,
              "name": "ClassMetadataSet"
            },
            {
              "docs": [
                "Metadata has been cleared for an asset class. \\\\[ class \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                }
              ],
              "index": 16,
              "name": "ClassMetadataCleared"
            },
            {
              "docs": [
                "New metadata has been set for an asset instance.",
                "\\\\[ class, instance, data, is_frozen \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 91,
                  "typeName": "BoundedVec\u003cu8, T::StringLimit\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 17,
              "name": "MetadataSet"
            },
            {
              "docs": [
                "Metadata has been cleared for an asset instance. \\\\[ class, instance \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::InstanceId"
                }
              ],
              "index": 18,
              "name": "MetadataCleared"
            },
            {
              "docs": [
                "Metadata has been cleared for an asset instance. \\\\[ class, successful_instances \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 92,
                  "typeName": "Vec\u003cT::InstanceId\u003e"
                }
              ],
              "index": 19,
              "name": "Redeposited"
            },
            {
              "docs": [
                "New attribute metadata has been set for an asset class or instance.",
                "\\\\[ class, maybe_instance, key, value \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 93,
                  "typeName": "Option\u003cT::InstanceId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 94,
                  "typeName": "BoundedVec\u003cu8, T::KeyLimit\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 95,
                  "typeName": "BoundedVec\u003cu8, T::ValueLimit\u003e"
                }
              ],
              "index": 20,
              "name": "AttributeSet"
            },
            {
              "docs": [
                "Attribute metadata has been cleared for an asset class or instance.",
                "\\\\[ class, maybe_instance, key, maybe_value \\\\]"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 93,
                  "typeName": "Option\u003cT::InstanceId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 94,
                  "typeName": "BoundedVec\u003cu8, T::KeyLimit\u003e"
                }
              ],
              "index": 21,
              "name": "AttributeCleared"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_uniques",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 91,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 10,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 92,
    "type": {
      "def": {
        "Sequence": {
          "type": 4
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 93,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 94,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 10,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 95,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 10,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 96,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Stored data under specified index."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 0,
              "name": "Stored"
            },
            {
              "docs": [
                "Renewed data under specified index."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "Renewed"
            },
            {
              "docs": [
                "Storage proof was successfully checked."
              ],
              "fields": null,
              "index": 2,
              "name": "ProofChecked"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_transaction_storage",
        "pallet",
        "Event"
      ]
    }
  },
  {
    "id": 97,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Applying an extrinsic."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 0,
              "name": "ApplyExtrinsic"
            },
            {
              "docs": [
                "Finalizing the block."
              ],
              "fields": null,
              "index": 1,
              "name": "Finalization"
            },
            {
              "docs": [
                "Initializing the block."
              ],
              "fields": null,
              "index": 2,
              "name": "Initialization"
            }
          ]
        }
      },
      "docs": [
        "A phase of a block\\'s execution."
      ],
      "params": null,
      "path": [
        "frame_system",
        "Phase"
      ]
    }
  },
  {
    "id": 98,
    "type": {
      "def": {
        "Sequence": {
          "type": 9
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 99,
    "type": {
      "def": {
        "Sequence": {
          "type": 77
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 100,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "spec_version",
              "type": 101,
              "typeName": "codec::Compact\u003cu32\u003e"
            },
            {
              "docs": null,
              "name": "spec_name",
              "type": 102,
              "typeName": "sp_runtime::RuntimeString"
            }
          ]
        }
      },
      "docs": [
        "Stores the `spec_version` and `spec_name` of when the last runtime upgrade",
        "happened."
      ],
      "params": null,
      "path": [
        "frame_system",
        "LastRuntimeUpgradeInfo"
      ]
    }
  },
  {
    "id": 101,
    "type": {
      "def": {
        "Compact": {
          "type": 4
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 102,
    "type": {
      "def": {
        "Primitive": "Str"
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 103,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 104,
                  "typeName": "Perbill"
                }
              ],
              "index": 0,
              "name": "fill_block"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 1,
              "name": "remark"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "u64"
                }
              ],
              "index": 2,
              "name": "set_heap_pages"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 3,
              "name": "set_code"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 4,
              "name": "set_code_without_checks"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 16,
                  "typeName": "Option\u003cChangesTrieConfiguration\u003e"
                }
              ],
              "index": 5,
              "name": "set_changes_trie_config"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 105,
                  "typeName": "Vec\u003cKeyValue\u003e"
                }
              ],
              "index": 6,
              "name": "set_storage"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 107,
                  "typeName": "Vec\u003cKey\u003e"
                }
              ],
              "index": 7,
              "name": "kill_storage"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Key"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 8,
              "name": "kill_prefix"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 9,
              "name": "remark_with_event"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 104,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "A fixed point representation of a number in the range [0, 1].",
        "",
        "\"_Parts per Billion_"
      ],
      "params": null,
      "path": [
        "sp_arithmetic",
        "per_things",
        "Perbill"
      ]
    }
  },
  {
    "id": 105,
    "type": {
      "def": {
        "Sequence": {
          "type": 106
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 106,
    "type": {
      "def": {
        "Tuple": [
          10,
          10
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 107,
    "type": {
      "def": {
        "Sequence": {
          "type": 10
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 108,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Base weight of block execution."
              ],
              "name": "base_block",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Maximal total weight consumed by all kinds of extrinsics (without `reserved` space)."
              ],
              "name": "max_block",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight limits for extrinsics of given dispatch class."
              ],
              "name": "per_class",
              "type": 109,
              "typeName": "PerDispatchClass\u003cWeightsPerClass\u003e"
            }
          ]
        }
      },
      "docs": [
        "Block weight limits \u0026 base values configuration.",
        "",
        "This object is responsible for defining weight limits and base weight values tracked",
        "during extrinsic execution.",
        "",
        "Each block starts with `base_block` weight being consumed right away. Next up the",
        "`on_initialize` pallet callbacks are invoked and their cost is added before any extrinsic",
        "is executed. This cost is tracked as `Mandatory` dispatch class.",
        "",
        "```text,ignore",
        "|   | `max_block`    |   |",
        "|   |                |   |",
        "|   |                |   |",
        "|   |                |   |",
        "|   |                |  #| `on_initialize`",
        "|  #| `base_block`   |  #|",
        "|NOM|                |NOM|",
        " ||\\\\_ Mandatory",
        " |\\\\__ Operational",
        " \\\\___ Normal",
        "```",
        "",
        "The remaining capacity can be used to dispatch extrinsics. Note that each dispatch class",
        "is being tracked separately, but the sum can\\'t exceed `max_block` (except for `reserved`).",
        "Below you can see a picture representing full block with 3 extrinsics (two `Operational` and",
        "one `Normal`). Each class has it\\'s own limit `max_total`, but also the sum cannot exceed",
        "`max_block` value.",
        "",
        "```text,ignore",
        "                         -- `Mandatory` limit (unlimited)",
        "| # |                 |   |",
        "| # | `Ext3`          | - - `Operational` limit",
        "|#  | `Ext2`          |-  - `Normal` limit",
        "| # | `Ext1`          | # |",
        "|  #| `on_initialize` | ##|",
        "|  #| `base_block`    |###|",
        "|NOM|                 |NOM|",
        "```",
        "",
        "It should be obvious now that it\\'s possible for one class to reach it\\'s limit (say `Normal`),",
        "while the block has still capacity to process more transactions (`max_block` not reached,",
        "`Operational` transactions can still go in). Setting `max_total` to `None` disables the",
        "per-class limit. This is generally highly recommended for `Mandatory` dispatch class, while it",
        "can be dangerous for `Normal` class and should only be done with extra care and consideration.",
        "",
        "Often it\\'s desirable for some class of transactions to be added to the block despite it being",
        "full. For instance one might want to prevent high-priority `Normal` transactions from pushing",
        "out lower-priority `Operational` transactions. In such cases you might add a `reserved` capacity",
        "for given class.",
        "",
        "```test,ignore",
        "             _",
        "  #           \\\\",
        "  #   `Ext8`   - `reserved`",
        "  #          _/",
        "| # | `Ext7                 | - - `Operational` limit",
        "|#  | `Ext6`                |   |",
        "|#  | `Ext5`                |-# - `Normal` limit",
        "|#  | `Ext4`                |## |",
        "|  #| `on_initialize`       |###|",
        "|  #| `base_block`          |###|",
        "|NOM|                       |NOM|",
        "```",
        "",
        "In the above example, `Ext4-6` fill up the block almost up to `max_block`. `Ext7` would not fit",
        "if there wasn\\'t the extra `reserved` space for `Operational` transactions. Note that `max_total`",
        "limit applies to `reserved` space as well (i.e. the sum of weights of `Ext7` \u0026 `Ext8` mustn\\'t",
        "exceed it). Setting `reserved` to `None` allows the extrinsics to always get into the block up",
        "to their `max_total` limit. If `max_total` is set to `None` as well, all extrinsics witch",
        "dispatchables of given class will always end up in the block (recommended for `Mandatory`",
        "dispatch class).",
        "",
        "As a consequence of `reserved` space, total consumed block weight might exceed `max_block`",
        "value, so this parameter should rather be thought of as \\\"target block weight\\\" than a hard limit."
      ],
      "params": null,
      "path": [
        "frame_system",
        "limits",
        "BlockWeights"
      ]
    }
  },
  {
    "id": 109,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Value for `Normal` extrinsics."
              ],
              "name": "normal",
              "type": 110,
              "typeName": "T"
            },
            {
              "docs": [
                "Value for `Operational` extrinsics."
              ],
              "name": "operational",
              "type": 110,
              "typeName": "T"
            },
            {
              "docs": [
                "Value for `Mandatory` extrinsics."
              ],
              "name": "mandatory",
              "type": 110,
              "typeName": "T"
            }
          ]
        }
      },
      "docs": [
        "A struct holding value for each `DispatchClass`."
      ],
      "params": [
        {
          "name": "T",
          "type": 110
        }
      ],
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ]
    }
  },
  {
    "id": 110,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Base weight of single extrinsic of given class."
              ],
              "name": "base_extrinsic",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Maximal weight of single extrinsic. Should NOT include `base_extrinsic` cost.",
                "",
                "`None` indicates that this class of extrinsics doesn\\'t have a limit."
              ],
              "name": "max_extrinsic",
              "type": 111,
              "typeName": "Option\u003cWeight\u003e"
            },
            {
              "docs": [
                "Block maximal total weight for all extrinsics of given class.",
                "",
                "`None` indicates that weight sum of this class of extrinsics is not",
                "restricted. Use this value carefully, since it might produce heavily oversized",
                "blocks.",
                "",
                "In the worst case, the total weight consumed by the class is going to be:",
                "`MAX(max_total) + MAX(reserved)`."
              ],
              "name": "max_total",
              "type": 111,
              "typeName": "Option\u003cWeight\u003e"
            },
            {
              "docs": [
                "Block reserved allowance for all extrinsics of a particular class.",
                "",
                "Setting to `None` indicates that extrinsics of that class are allowed",
                "to go over total block weight (but at most `max_total` for that class).",
                "Setting to `Some(x)` guarantees that at least `x` weight of particular class",
                "is processed in every block."
              ],
              "name": "reserved",
              "type": 111,
              "typeName": "Option\u003cWeight\u003e"
            }
          ]
        }
      },
      "docs": [
        "`DispatchClass`-specific weight configuration."
      ],
      "params": null,
      "path": [
        "frame_system",
        "limits",
        "WeightsPerClass"
      ]
    }
  },
  {
    "id": 111,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 8
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 112,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Maximal total length in bytes for each extrinsic class.",
                "",
                "In the worst case, the total block length is going to be:",
                "`MAX(max)`"
              ],
              "name": "max",
              "type": 113,
              "typeName": "PerDispatchClass\u003cu32\u003e"
            }
          ]
        }
      },
      "docs": [
        "Block length limit configuration."
      ],
      "params": null,
      "path": [
        "frame_system",
        "limits",
        "BlockLength"
      ]
    }
  },
  {
    "id": 113,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Value for `Normal` extrinsics."
              ],
              "name": "normal",
              "type": 4,
              "typeName": "T"
            },
            {
              "docs": [
                "Value for `Operational` extrinsics."
              ],
              "name": "operational",
              "type": 4,
              "typeName": "T"
            },
            {
              "docs": [
                "Value for `Mandatory` extrinsics."
              ],
              "name": "mandatory",
              "type": 4,
              "typeName": "T"
            }
          ]
        }
      },
      "docs": [
        "A struct holding value for each `DispatchClass`."
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ]
    }
  },
  {
    "id": 114,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "read",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": null,
              "name": "write",
              "type": 8,
              "typeName": "Weight"
            }
          ]
        }
      },
      "docs": [
        "The weight of database operations that the runtime can invoke."
      ],
      "params": null,
      "path": [
        "frame_support",
        "weights",
        "RuntimeDbWeight"
      ]
    }
  },
  {
    "id": 115,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Identifies the different Substrate runtimes. There\\'ll be at least polkadot and node.",
                "A different on-chain spec_name to that of the native runtime would normally result",
                "in node not attempting to sync or author blocks."
              ],
              "name": "spec_name",
              "type": 102,
              "typeName": "RuntimeString"
            },
            {
              "docs": [
                "Name of the implementation of the spec. This is of little consequence for the node",
                "and serves only to differentiate code of different implementation teams. For this",
                "codebase, it will be parity-polkadot. If there were a non-Rust implementation of the",
                "Polkadot runtime (e.g. C++), then it would identify itself with an accordingly different",
                "`impl_name`."
              ],
              "name": "impl_name",
              "type": 102,
              "typeName": "RuntimeString"
            },
            {
              "docs": [
                "`authoring_version` is the version of the authorship interface. An authoring node",
                "will not attempt to author blocks unless this is equal to its native runtime."
              ],
              "name": "authoring_version",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Version of the runtime specification. A full-node will not attempt to use its native",
                "runtime in substitute for the on-chain Wasm runtime unless all of `spec_name`,",
                "`spec_version` and `authoring_version` are the same between Wasm and native."
              ],
              "name": "spec_version",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Version of the implementation of the specification. Nodes are free to ignore this; it",
                "serves only as an indication that the code is different; as long as the other two versions",
                "are the same then while the actual code may be different, it is nonetheless required to",
                "do the same thing.",
                "Non-consensus-breaking optimizations are about the only changes that could be made which",
                "would result in only the `impl_version` changing."
              ],
              "name": "impl_version",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "List of supported API \\\"features\\\" along with their versions."
              ],
              "name": "apis",
              "type": 116,
              "typeName": "ApisVec"
            },
            {
              "docs": [
                "All existing dispatches are fully compatible when this number doesn\\'t change. If this",
                "number changes, then `spec_version` must change, also.",
                "",
                "This number must change when an existing dispatchable (module ID, dispatch ID) is changed,",
                "either through an alteration in its user-level semantics, a parameter added/removed/changed,",
                "a dispatchable being removed, a module being removed, or a dispatchable/module changing its",
                "index.",
                "",
                "It need *not* change when a new module is added or when a dispatchable is added."
              ],
              "name": "transaction_version",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "Runtime version.",
        "This should not be thought of as classic Semver (major/minor/tiny).",
        "This triplet have different semantics and mis-interpretation could cause problems.",
        "In particular: bug fixes should result in an increment of `spec_version` and possibly `authoring_version`,",
        "absolutely not `impl_version` since they change the semantics of the runtime."
      ],
      "params": null,
      "path": [
        "sp_version",
        "RuntimeVersion"
      ]
    }
  },
  {
    "id": 116,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 117,
              "typeName": null
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 117
        }
      ],
      "path": [
        "Cow"
      ]
    }
  },
  {
    "id": 117,
    "type": {
      "def": {
        "Sequence": {
          "type": 118
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 118,
    "type": {
      "def": {
        "Tuple": [
          119,
          4
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 119,
    "type": {
      "def": {
        "Array": {
          "len": 8,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 120,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "The name of specification does not match between the current runtime",
                "and the new runtime."
              ],
              "fields": null,
              "index": 1,
              "name": "InvalidSpecName"
            },
            {
              "docs": [
                "The specification version is not allowed to decrease between the current runtime",
                "and the new runtime."
              ],
              "fields": null,
              "index": 2,
              "name": "SpecVersionNeedsToIncrease"
            },
            {
              "docs": [
                "Failed to extract the runtime version from the new runtime.",
                "",
                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ],
              "fields": null,
              "index": 3,
              "name": "FailedToExtractRuntimeVersion"
            },
            {
              "docs": [
                "Suicide called when the account has non-default composite data."
              ],
              "fields": null,
              "index": 4,
              "name": "NonDefaultComposite"
            },
            {
              "docs": [
                "There is a non-zero reference count preventing the account from being purged."
              ],
              "fields": null,
              "index": 5,
              "name": "NonZeroRefCount"
            }
          ]
        }
      },
      "docs": [
        "Error for the System pallet",
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 121,
    "type": {
      "def": {
        "Variant": {
          "variants": null
        }
      },
      "docs": [
        "A type that cannot be instantiated."
      ],
      "params": null,
      "path": [
        "frame_support",
        "Never"
      ]
    }
  },
  {
    "id": 122,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 123,
                  "typeName": "Vec\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 0,
              "name": "batch"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 81,
                  "typeName": "u16"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 1,
              "name": "as_derivative"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 123,
                  "typeName": "Vec\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 2,
              "name": "batch_all"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_utility",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 123,
    "type": {
      "def": {
        "Sequence": {
          "type": 124
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 124,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 103,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cSystem, Runtime\u003e"
                }
              ],
              "index": 0,
              "name": "System"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 122,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cUtility, Runtime\u003e"
                }
              ],
              "index": 1,
              "name": "Utility"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 125,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cBabe, Runtime\u003e"
                }
              ],
              "index": 2,
              "name": "Babe"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 134,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cTimestamp, Runtime\u003e"
                }
              ],
              "index": 3,
              "name": "Timestamp"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 136,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cAuthorship, Runtime\u003e"
                }
              ],
              "index": 4,
              "name": "Authorship"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 138,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cIndices, Runtime\u003e"
                }
              ],
              "index": 5,
              "name": "Indices"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 139,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cBalances, Runtime\u003e"
                }
              ],
              "index": 6,
              "name": "Balances"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 142,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cElectionProviderMultiPhase, Runtime\u003e"
                }
              ],
              "index": 8,
              "name": "ElectionProviderMultiPhase"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 201,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cStaking, Runtime\u003e"
                }
              ],
              "index": 9,
              "name": "Staking"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 208,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cSession, Runtime\u003e"
                }
              ],
              "index": 10,
              "name": "Session"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 211,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cDemocracy, Runtime\u003e"
                }
              ],
              "index": 11,
              "name": "Democracy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 215,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cCouncil, Runtime\u003e"
                }
              ],
              "index": 12,
              "name": "Council"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 217,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cTechnicalCommittee, Runtime\u003e"
                }
              ],
              "index": 13,
              "name": "TechnicalCommittee"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 218,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cElections, Runtime\u003e"
                }
              ],
              "index": 14,
              "name": "Elections"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 220,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cTechnicalMembership, Runtime\u003e"
                }
              ],
              "index": 15,
              "name": "TechnicalMembership"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 221,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cGrandpa, Runtime\u003e"
                }
              ],
              "index": 16,
              "name": "Grandpa"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 233,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cTreasury, Runtime\u003e"
                }
              ],
              "index": 17,
              "name": "Treasury"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 234,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cContracts, Runtime\u003e"
                }
              ],
              "index": 18,
              "name": "Contracts"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 235,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cSudo, Runtime\u003e"
                }
              ],
              "index": 19,
              "name": "Sudo"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 236,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cImOnline, Runtime\u003e"
                }
              ],
              "index": 20,
              "name": "ImOnline"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 244,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cIdentity, Runtime\u003e"
                }
              ],
              "index": 25,
              "name": "Identity"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 284,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cSociety, Runtime\u003e"
                }
              ],
              "index": 26,
              "name": "Society"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 286,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cRecovery, Runtime\u003e"
                }
              ],
              "index": 27,
              "name": "Recovery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 287,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cVesting, Runtime\u003e"
                }
              ],
              "index": 28,
              "name": "Vesting"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 289,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cScheduler, Runtime\u003e"
                }
              ],
              "index": 29,
              "name": "Scheduler"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 291,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cProxy, Runtime\u003e"
                }
              ],
              "index": 30,
              "name": "Proxy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 293,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cMultisig, Runtime\u003e"
                }
              ],
              "index": 31,
              "name": "Multisig"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 295,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cBounties, Runtime\u003e"
                }
              ],
              "index": 32,
              "name": "Bounties"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 296,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cTips, Runtime\u003e"
                }
              ],
              "index": 33,
              "name": "Tips"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 297,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cAssets, Runtime\u003e"
                }
              ],
              "index": 34,
              "name": "Assets"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 299,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cLottery, Runtime\u003e"
                }
              ],
              "index": 36,
              "name": "Lottery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 300,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cGilt, Runtime\u003e"
                }
              ],
              "index": 37,
              "name": "Gilt"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 303,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cUniques, Runtime\u003e"
                }
              ],
              "index": 38,
              "name": "Uniques"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 306,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor\u003cTransactionStorage, Runtime\u003e"
                }
              ],
              "index": 39,
              "name": "TransactionStorage"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "node_runtime",
        "Call"
      ]
    }
  },
  {
    "id": 125,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 126,
                  "typeName": "EquivocationProof\u003cT::Header\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 130,
                  "typeName": "T::KeyOwnerProof"
                }
              ],
              "index": 0,
              "name": "report_equivocation"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 126,
                  "typeName": "EquivocationProof\u003cT::Header\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 130,
                  "typeName": "T::KeyOwnerProof"
                }
              ],
              "index": 1,
              "name": "report_equivocation_unsigned"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 131,
                  "typeName": "NextConfigDescriptor"
                }
              ],
              "index": 2,
              "name": "plan_config_change"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_babe",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 126,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Returns the authority id of the equivocator."
              ],
              "name": "offender",
              "type": 128,
              "typeName": "Id"
            },
            {
              "docs": [
                "The slot at which the equivocation happened."
              ],
              "name": "slot",
              "type": 129,
              "typeName": "Slot"
            },
            {
              "docs": [
                "The first header involved in the equivocation."
              ],
              "name": "first_header",
              "type": 127,
              "typeName": "Header"
            },
            {
              "docs": [
                "The second header involved in the equivocation."
              ],
              "name": "second_header",
              "type": 127,
              "typeName": "Header"
            }
          ]
        }
      },
      "docs": [
        "Represents an equivocation proof. An equivocation happens when a validator",
        "produces more than one block on the same slot. The proof of equivocation",
        "are the given distinct headers that were signed by the validator and which",
        "include the slot number."
      ],
      "params": [
        {
          "name": "Header",
          "type": 127
        },
        {
          "name": "Id",
          "type": 128
        }
      ],
      "path": [
        "sp_consensus_slots",
        "EquivocationProof"
      ]
    }
  },
  {
    "id": 127,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "parent_hash",
              "type": 9,
              "typeName": "Hash::Output"
            },
            {
              "docs": null,
              "name": "number",
              "type": 101,
              "typeName": "Number"
            },
            {
              "docs": null,
              "name": "state_root",
              "type": 9,
              "typeName": "Hash::Output"
            },
            {
              "docs": null,
              "name": "extrinsics_root",
              "type": 9,
              "typeName": "Hash::Output"
            },
            {
              "docs": null,
              "name": "digest",
              "type": 11,
              "typeName": "Digest\u003cHash::Output\u003e"
            }
          ]
        }
      },
      "docs": [
        "Abstraction over a block header for a substrate chain."
      ],
      "params": null,
      "path": [
        "sp_runtime",
        "generic",
        "header",
        "Header"
      ]
    }
  },
  {
    "id": 128,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 62,
              "typeName": "sr25519::Public"
            }
          ]
        }
      },
      "docs": [
        "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
      ],
      "params": null,
      "path": [
        "sp_consensus_babe",
        "app",
        "Public"
      ]
    }
  },
  {
    "id": 129,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 8,
              "typeName": "u64"
            }
          ]
        }
      },
      "docs": [
        "Unit type wrapper that represents a slot."
      ],
      "params": null,
      "path": [
        "sp_consensus_slots",
        "Slot"
      ]
    }
  },
  {
    "id": 130,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The session index on which the specific key is a member."
              ],
              "name": "session",
              "type": 4,
              "typeName": "SessionIndex"
            },
            {
              "docs": [
                "Trie nodes of a merkle proof of session membership."
              ],
              "name": "trie_nodes",
              "type": 107,
              "typeName": "Vec\u003cVec\u003cu8\u003e\u003e"
            },
            {
              "docs": [
                "The validator count of the session on which the specific key is a member."
              ],
              "name": "validator_count",
              "type": 4,
              "typeName": "ValidatorCount"
            }
          ]
        }
      },
      "docs": [
        "Proof of membership of a specific key in a given session."
      ],
      "params": null,
      "path": [
        "sp_session",
        "MembershipProof"
      ]
    }
  },
  {
    "id": 131,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Version 1."
              ],
              "fields": [
                {
                  "docs": [
                    "Value of `c` in `BabeEpochConfiguration`."
                  ],
                  "name": "c",
                  "type": 132,
                  "typeName": "(u64, u64)"
                },
                {
                  "docs": [
                    "Value of `allowed_slots` in `BabeEpochConfiguration`."
                  ],
                  "name": "allowed_slots",
                  "type": 133,
                  "typeName": "AllowedSlots"
                }
              ],
              "index": 1,
              "name": "V1"
            }
          ]
        }
      },
      "docs": [
        "Information about the next epoch config, if changed. This is broadcast in the first",
        "block of the epoch, and applies using the same rules as `NextEpochDescriptor`."
      ],
      "params": null,
      "path": [
        "sp_consensus_babe",
        "digests",
        "NextConfigDescriptor"
      ]
    }
  },
  {
    "id": 132,
    "type": {
      "def": {
        "Tuple": [
          8,
          8
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 133,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Only allow primary slots."
              ],
              "fields": null,
              "index": 0,
              "name": "PrimarySlots"
            },
            {
              "docs": [
                "Allow primary and secondary plain slots."
              ],
              "fields": null,
              "index": 1,
              "name": "PrimaryAndSecondaryPlainSlots"
            },
            {
              "docs": [
                "Allow primary and secondary VRF slots."
              ],
              "fields": null,
              "index": 2,
              "name": "PrimaryAndSecondaryVRFSlots"
            }
          ]
        }
      },
      "docs": [
        "Types of allowed slots."
      ],
      "params": null,
      "path": [
        "sp_consensus_babe",
        "AllowedSlots"
      ]
    }
  },
  {
    "id": 134,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Moment"
                }
              ],
              "index": 0,
              "name": "set"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_timestamp",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 135,
    "type": {
      "def": {
        "Compact": {
          "type": 8
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 136,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 137,
                  "typeName": "Vec\u003cT::Header\u003e"
                }
              ],
              "index": 0,
              "name": "set_uncles"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_authorship",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 137,
    "type": {
      "def": {
        "Sequence": {
          "type": 127
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 138,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex"
                }
              ],
              "index": 0,
              "name": "claim"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex"
                }
              ],
              "index": 1,
              "name": "transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex"
                }
              ],
              "index": 2,
              "name": "free"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 3,
              "name": "force_transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex"
                }
              ],
              "index": 4,
              "name": "freeze"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_indices",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 139,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "T::Balance"
                }
              ],
              "index": 0,
              "name": "transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "T::Balance"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "T::Balance"
                }
              ],
              "index": 1,
              "name": "set_balance"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "T::Balance"
                }
              ],
              "index": 2,
              "name": "force_transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "T::Balance"
                }
              ],
              "index": 3,
              "name": "transfer_keep_alive"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 4,
              "name": "transfer_all"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_balances",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 140,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "It\\'s an account ID (pubkey)."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 0,
              "name": "Id"
            },
            {
              "docs": [
                "It\\'s an account index."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "AccountIndex"
                }
              ],
              "index": 1,
              "name": "Index"
            },
            {
              "docs": [
                "It\\'s some arbitrary raw bytes."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 2,
              "name": "Raw"
            },
            {
              "docs": [
                "It\\'s a 32 byte representation."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]"
                }
              ],
              "index": 3,
              "name": "Address32"
            },
            {
              "docs": [
                "Its a 20 byte representation."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 141,
                  "typeName": "[u8; 20]"
                }
              ],
              "index": 4,
              "name": "Address20"
            }
          ]
        }
      },
      "docs": [
        "A multi-format address wrapper for on-chain accounts."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "AccountIndex",
          "type": 4
        }
      ],
      "path": [
        "sp_runtime",
        "multiaddress",
        "MultiAddress"
      ]
    }
  },
  {
    "id": 141,
    "type": {
      "def": {
        "Array": {
          "len": 20,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 142,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 143,
                  "typeName": "RawSolution\u003cCompactOf\u003cT\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 196,
                  "typeName": "SolutionOrSnapshotSize"
                }
              ],
              "index": 0,
              "name": "submit_unsigned"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 197,
                  "typeName": "Option\u003cElectionScore\u003e"
                }
              ],
              "index": 1,
              "name": "set_minimum_untrusted_score"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 198,
                  "typeName": "Supports\u003cT::AccountId\u003e"
                }
              ],
              "index": 2,
              "name": "set_emergency_election_result"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 143,
                  "typeName": "RawSolution\u003cCompactOf\u003cT\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 3,
              "name": "submit"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 143,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Compact election edges."
              ],
              "name": "compact",
              "type": 144,
              "typeName": "C"
            },
            {
              "docs": [
                "The _claimed_ score of the solution."
              ],
              "name": "score",
              "type": 195,
              "typeName": "ElectionScore"
            },
            {
              "docs": [
                "The round at which this solution should be submitted."
              ],
              "name": "round",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "A raw, unchecked solution.",
        "",
        "This is what will get submitted to the chain.",
        "",
        "Such a solution should never become effective in anyway before being checked by the",
        "`Pallet::feasibility_check`"
      ],
      "params": [
        {
          "name": "C",
          "type": 144
        }
      ],
      "path": [
        "pallet_election_provider_multi_phase",
        "RawSolution"
      ]
    }
  },
  {
    "id": 144,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "votes1",
              "type": 145,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes2",
              "type": 148,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes3",
              "type": 153,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes4",
              "type": 156,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes5",
              "type": 159,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes6",
              "type": 162,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes7",
              "type": 165,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes8",
              "type": 168,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes9",
              "type": 171,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes10",
              "type": 174,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes11",
              "type": 177,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes12",
              "type": 180,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes13",
              "type": 183,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes14",
              "type": 186,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes15",
              "type": 189,
              "typeName": null
            },
            {
              "docs": null,
              "name": "votes16",
              "type": 192,
              "typeName": null
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "node_runtime",
        "NposCompactSolution16"
      ]
    }
  },
  {
    "id": 145,
    "type": {
      "def": {
        "Sequence": {
          "type": 146
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 146,
    "type": {
      "def": {
        "Tuple": [
          101,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 147,
    "type": {
      "def": {
        "Compact": {
          "type": 81
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 148,
    "type": {
      "def": {
        "Sequence": {
          "type": 149
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 149,
    "type": {
      "def": {
        "Tuple": [
          101,
          150,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 150,
    "type": {
      "def": {
        "Tuple": [
          147,
          151
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 151,
    "type": {
      "def": {
        "Compact": {
          "type": 152
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 152,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 81,
              "typeName": "u16"
            }
          ]
        }
      },
      "docs": [
        "A fixed point representation of a number in the range [0, 1].",
        "",
        "\"_Parts per 65535_"
      ],
      "params": null,
      "path": [
        "sp_arithmetic",
        "per_things",
        "PerU16"
      ]
    }
  },
  {
    "id": 153,
    "type": {
      "def": {
        "Sequence": {
          "type": 154
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 154,
    "type": {
      "def": {
        "Tuple": [
          101,
          155,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 155,
    "type": {
      "def": {
        "Array": {
          "len": 2,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 156,
    "type": {
      "def": {
        "Sequence": {
          "type": 157
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 157,
    "type": {
      "def": {
        "Tuple": [
          101,
          158,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 158,
    "type": {
      "def": {
        "Array": {
          "len": 3,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 159,
    "type": {
      "def": {
        "Sequence": {
          "type": 160
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 160,
    "type": {
      "def": {
        "Tuple": [
          101,
          161,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 161,
    "type": {
      "def": {
        "Array": {
          "len": 4,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 162,
    "type": {
      "def": {
        "Sequence": {
          "type": 163
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 163,
    "type": {
      "def": {
        "Tuple": [
          101,
          164,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 164,
    "type": {
      "def": {
        "Array": {
          "len": 5,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 165,
    "type": {
      "def": {
        "Sequence": {
          "type": 166
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 166,
    "type": {
      "def": {
        "Tuple": [
          101,
          167,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 167,
    "type": {
      "def": {
        "Array": {
          "len": 6,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 168,
    "type": {
      "def": {
        "Sequence": {
          "type": 169
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 169,
    "type": {
      "def": {
        "Tuple": [
          101,
          170,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 170,
    "type": {
      "def": {
        "Array": {
          "len": 7,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 171,
    "type": {
      "def": {
        "Sequence": {
          "type": 172
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 172,
    "type": {
      "def": {
        "Tuple": [
          101,
          173,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 173,
    "type": {
      "def": {
        "Array": {
          "len": 8,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 174,
    "type": {
      "def": {
        "Sequence": {
          "type": 175
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 175,
    "type": {
      "def": {
        "Tuple": [
          101,
          176,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 176,
    "type": {
      "def": {
        "Array": {
          "len": 9,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 177,
    "type": {
      "def": {
        "Sequence": {
          "type": 178
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 178,
    "type": {
      "def": {
        "Tuple": [
          101,
          179,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 179,
    "type": {
      "def": {
        "Array": {
          "len": 10,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 180,
    "type": {
      "def": {
        "Sequence": {
          "type": 181
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 181,
    "type": {
      "def": {
        "Tuple": [
          101,
          182,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 182,
    "type": {
      "def": {
        "Array": {
          "len": 11,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 183,
    "type": {
      "def": {
        "Sequence": {
          "type": 184
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 184,
    "type": {
      "def": {
        "Tuple": [
          101,
          185,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 185,
    "type": {
      "def": {
        "Array": {
          "len": 12,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 186,
    "type": {
      "def": {
        "Sequence": {
          "type": 187
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 187,
    "type": {
      "def": {
        "Tuple": [
          101,
          188,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 188,
    "type": {
      "def": {
        "Array": {
          "len": 13,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 189,
    "type": {
      "def": {
        "Sequence": {
          "type": 190
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 190,
    "type": {
      "def": {
        "Tuple": [
          101,
          191,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 191,
    "type": {
      "def": {
        "Array": {
          "len": 14,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 192,
    "type": {
      "def": {
        "Sequence": {
          "type": 193
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 193,
    "type": {
      "def": {
        "Tuple": [
          101,
          194,
          147
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 194,
    "type": {
      "def": {
        "Array": {
          "len": 15,
          "type": 150
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 195,
    "type": {
      "def": {
        "Array": {
          "len": 3,
          "type": 6
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 196,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The length of voters."
              ],
              "name": "voters",
              "type": 101,
              "typeName": "u32"
            },
            {
              "docs": [
                "The length of targets."
              ],
              "name": "targets",
              "type": 101,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "Encodes the length of a solution or a snapshot.",
        "",
        "This is stored automatically on-chain, and it contains the **size of the entire snapshot**.",
        "This is also used in dispatchables as weight witness data and should **only contain the size of",
        "the presented solution**, not the entire snapshot."
      ],
      "params": null,
      "path": [
        "pallet_election_provider_multi_phase",
        "SolutionOrSnapshotSize"
      ]
    }
  },
  {
    "id": 197,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 195,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 195
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 198,
    "type": {
      "def": {
        "Sequence": {
          "type": 199
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 199,
    "type": {
      "def": {
        "Tuple": [
          0,
          200
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 200,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Total support."
              ],
              "name": "total",
              "type": 6,
              "typeName": "ExtendedBalance"
            },
            {
              "docs": [
                "Support from voters."
              ],
              "name": "voters",
              "type": 48,
              "typeName": "Vec\u003c(AccountId, ExtendedBalance)\u003e"
            }
          ]
        }
      },
      "docs": [
        "A structure to demonstrate the election result from the perspective of the candidate, i.e. how",
        "much support each candidate is receiving.",
        "",
        "This complements the [`ElectionResult`] and is needed to run the balancing post-processing.",
        "",
        "This, at the current version, resembles the `Exposure` defined in the Staking pallet, yet they",
        "do not necessarily have to be the same."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "sp_npos_elections",
        "Support"
      ]
    }
  },
  {
    "id": 201,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 202,
                  "typeName": "RewardDestination\u003cT::AccountId\u003e"
                }
              ],
              "index": 0,
              "name": "bond"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 1,
              "name": "bond_extra"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "unbond"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 3,
              "name": "withdraw_unbonded"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 203,
                  "typeName": "ValidatorPrefs"
                }
              ],
              "index": 4,
              "name": "validate"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 205,
                  "typeName": "Vec\u003c\u003cT::Lookup as StaticLookup\u003e::Source\u003e"
                }
              ],
              "index": 5,
              "name": "nominate"
            },
            {
              "docs": null,
              "fields": null,
              "index": 6,
              "name": "chill"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 202,
                  "typeName": "RewardDestination\u003cT::AccountId\u003e"
                }
              ],
              "index": 7,
              "name": "set_payee"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 8,
              "name": "set_controller"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 9,
              "name": "set_validator_count"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 10,
              "name": "increase_validator_count"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 206,
                  "typeName": "Percent"
                }
              ],
              "index": 11,
              "name": "scale_validator_count"
            },
            {
              "docs": null,
              "fields": null,
              "index": 12,
              "name": "force_no_eras"
            },
            {
              "docs": null,
              "fields": null,
              "index": 13,
              "name": "force_new_era"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                }
              ],
              "index": 14,
              "name": "set_invulnerables"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 15,
              "name": "force_unstake"
            },
            {
              "docs": null,
              "fields": null,
              "index": 16,
              "name": "force_new_era_always"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "EraIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 92,
                  "typeName": "Vec\u003cu32\u003e"
                }
              ],
              "index": 17,
              "name": "cancel_deferred_slash"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "EraIndex"
                }
              ],
              "index": 18,
              "name": "payout_stakers"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 19,
              "name": "rebond"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "EraIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 20,
              "name": "set_history_depth"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 21,
              "name": "reap_stash"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 205,
                  "typeName": "Vec\u003c\u003cT::Lookup as StaticLookup\u003e::Source\u003e"
                }
              ],
              "index": 22,
              "name": "kick"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 93,
                  "typeName": "Option\u003cu32\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 93,
                  "typeName": "Option\u003cu32\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 207,
                  "typeName": "Option\u003cPercent\u003e"
                }
              ],
              "index": 23,
              "name": "set_staking_limits"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 24,
              "name": "chill_other"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_staking",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 202,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Pay into the stash account, increasing the amount at stake accordingly."
              ],
              "fields": null,
              "index": 0,
              "name": "Staked"
            },
            {
              "docs": [
                "Pay into the stash account, not increasing the amount at stake."
              ],
              "fields": null,
              "index": 1,
              "name": "Stash"
            },
            {
              "docs": [
                "Pay into the controller account."
              ],
              "fields": null,
              "index": 2,
              "name": "Controller"
            },
            {
              "docs": [
                "Pay into a specified account."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 3,
              "name": "Account"
            },
            {
              "docs": [
                "Receive no reward."
              ],
              "fields": null,
              "index": 4,
              "name": "None"
            }
          ]
        }
      },
      "docs": [
        "A destination account for payment."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_staking",
        "RewardDestination"
      ]
    }
  },
  {
    "id": 203,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Reward that validator takes up-front; only the rest is split between themselves and",
                "nominators."
              ],
              "name": "commission",
              "type": 204,
              "typeName": "Perbill"
            },
            {
              "docs": [
                "Whether or not this validator is accepting more nominations. If `true`, then no nominator",
                "who is not already nominating this validator may nominate them. By default, validators",
                "are accepting nominations."
              ],
              "name": "blocked",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": [
        "Preference of what happens regarding validation."
      ],
      "params": null,
      "path": [
        "pallet_staking",
        "ValidatorPrefs"
      ]
    }
  },
  {
    "id": 204,
    "type": {
      "def": {
        "Compact": {
          "type": 104
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 205,
    "type": {
      "def": {
        "Sequence": {
          "type": 140
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 206,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 2,
              "typeName": "u8"
            }
          ]
        }
      },
      "docs": [
        "A fixed point representation of a number in the range [0, 1].",
        "",
        "\"_Percent_"
      ],
      "params": null,
      "path": [
        "sp_arithmetic",
        "per_things",
        "Percent"
      ]
    }
  },
  {
    "id": 207,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 206,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 206
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 208,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" Sets the session key(s) of the function caller to `keys`.",
                "r\" Allows an account to set its session key prior to becoming a validator.",
                "r\" This doesn't take effect until the next session.",
                "r",
                "r\" The dispatch origin of this function must be signed.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Complexity: `O(1)`",
                "r\"   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                "r\" - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                "r\" - DbWrites: `origin account`, `NextKeys`",
                "r\" - DbReads per key id: `KeyOwner`",
                "r\" - DbWrites per key id: `KeyOwner`",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 209,
                  "typeName": "T::Keys"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 0,
              "name": "set_keys"
            },
            {
              "docs": [
                "r\" Removes any session key(s) of the function caller.",
                "r\" This doesn't take effect until the next session.",
                "r",
                "r\" The dispatch origin of this function must be signed.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Complexity: `O(1)` in number of key types.",
                "r\"   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                "r\" - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                "r\" - DbWrites: `NextKeys`, `origin account`",
                "r\" - DbWrites per key id: `KeyOwner`",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": null,
              "index": 1,
              "name": "purge_keys"
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_session",
        "Call"
      ]
    }
  },
  {
    "id": 209,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "grandpa",
              "type": 55,
              "typeName": "\u003cGrandpa as $crate::BoundToRuntimeAppPublic\u003e::Public"
            },
            {
              "docs": null,
              "name": "babe",
              "type": 128,
              "typeName": "\u003cBabe as $crate::BoundToRuntimeAppPublic\u003e::Public"
            },
            {
              "docs": null,
              "name": "im_online",
              "type": 61,
              "typeName": "\u003cImOnline as $crate::BoundToRuntimeAppPublic\u003e::Public"
            },
            {
              "docs": null,
              "name": "authority_discovery",
              "type": 210,
              "typeName": "\u003cAuthorityDiscovery as $crate::BoundToRuntimeAppPublic\u003e::Public"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "node_runtime",
        "SessionKeys"
      ]
    }
  },
  {
    "id": 210,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 62,
              "typeName": "sr25519::Public"
            }
          ]
        }
      },
      "docs": [
        "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
      ],
      "params": null,
      "path": [
        "sp_authority_discovery",
        "app",
        "Public"
      ]
    }
  },
  {
    "id": 211,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 0,
              "name": "propose"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "PropIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "second"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ReferendumIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 212,
                  "typeName": "AccountVote\u003cBalanceOf\u003cT\u003e\u003e"
                }
              ],
              "index": 2,
              "name": "vote"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 3,
              "name": "emergency_cancel"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 4,
              "name": "external_propose"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 5,
              "name": "external_propose_majority"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 6,
              "name": "external_propose_default"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                }
              ],
              "index": 7,
              "name": "fast_track"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 8,
              "name": "veto_external"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 9,
              "name": "cancel_referendum"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 10,
              "name": "cancel_queued"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 214,
                  "typeName": "Conviction"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 11,
              "name": "delegate"
            },
            {
              "docs": null,
              "fields": null,
              "index": 12,
              "name": "undelegate"
            },
            {
              "docs": null,
              "fields": null,
              "index": 13,
              "name": "clear_public_proposals"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 14,
              "name": "note_preimage"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 15,
              "name": "note_preimage_operational"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 16,
              "name": "note_imminent_preimage"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 17,
              "name": "note_imminent_preimage_operational"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 18,
              "name": "reap_preimage"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 19,
              "name": "unlock"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 20,
              "name": "remove_vote"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 21,
              "name": "remove_other_vote"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex"
                }
              ],
              "index": 22,
              "name": "enact_proposal"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 93,
                  "typeName": "Option\u003cReferendumIndex\u003e"
                }
              ],
              "index": 23,
              "name": "blacklist"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "PropIndex"
                }
              ],
              "index": 24,
              "name": "cancel_proposal"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_democracy",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 212,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A standard vote, one-way (approve or reject) with a given amount of conviction."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": "vote",
                  "type": 213,
                  "typeName": "Vote"
                },
                {
                  "docs": null,
                  "name": "balance",
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 0,
              "name": "Standard"
            },
            {
              "docs": [
                "A split vote with balances given for both ways, and with no conviction, useful for",
                "parachains when voting."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": "aye",
                  "type": 6,
                  "typeName": "Balance"
                },
                {
                  "docs": null,
                  "name": "nay",
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 1,
              "name": "Split"
            }
          ]
        }
      },
      "docs": [
        "A vote for a referendum of a particular account."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_democracy",
        "vote",
        "AccountVote"
      ]
    }
  },
  {
    "id": 213,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Raw vote byte, encodes aye + conviction"
              ],
              "name": null,
              "type": 2,
              "typeName": null
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "pallet_democracy",
        "vote",
        "Vote"
      ]
    }
  },
  {
    "id": 214,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "0.1x votes, unlocked."
              ],
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": [
                "1x votes, locked for an enactment period following a successful vote."
              ],
              "fields": null,
              "index": 1,
              "name": "Locked1x"
            },
            {
              "docs": [
                "2x votes, locked for 2x enactment periods following a successful vote."
              ],
              "fields": null,
              "index": 2,
              "name": "Locked2x"
            },
            {
              "docs": [
                "3x votes, locked for 4x..."
              ],
              "fields": null,
              "index": 3,
              "name": "Locked3x"
            },
            {
              "docs": [
                "4x votes, locked for 8x..."
              ],
              "fields": null,
              "index": 4,
              "name": "Locked4x"
            },
            {
              "docs": [
                "5x votes, locked for 16x..."
              ],
              "fields": null,
              "index": 5,
              "name": "Locked5x"
            },
            {
              "docs": [
                "6x votes, locked for 32x..."
              ],
              "fields": null,
              "index": 6,
              "name": "Locked6x"
            }
          ]
        }
      },
      "docs": [
        "A value denoting the strength of conviction of a vote."
      ],
      "params": null,
      "path": [
        "pallet_democracy",
        "conviction",
        "Conviction"
      ]
    }
  },
  {
    "id": 215,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" Set the collective's membership.",
                "r",
                "r\" - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                "r\" - `prime`: The prime member whose vote sets the default.",
                "r\" - `old_count`: The upper bound for the previous number of members in storage.",
                "r\"                Used for weight estimation.",
                "r",
                "r\" Requires root origin.",
                "r",
                "r\" NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                "r\"       the weight estimations rely on it to estimate dispatchable weight.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(MP + N)` where:",
                "r\"   - `M` old-members-count (code- and governance-bounded)",
                "r\"   - `N` new-members-count (code- and governance-bounded)",
                "r\"   - `P` proposals-count (code-bounded)",
                "r\" - DB:",
                "r\"   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                "r\"   - 1 storage read (codec `O(P)`) for reading the proposals",
                "r\"   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                "r\"   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 216,
                  "typeName": "Option\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 0,
              "name": "set_members"
            },
            {
              "docs": [
                "r\" Dispatch a proposal from a member using the `Member` origin.",
                "r",
                "r\" Origin must be a member of the collective.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                "r\" - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                "r\" - 1 event",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "execute"
            },
            {
              "docs": [
                "r\" Add a new proposal to either be voted on or executed directly.",
                "r",
                "r\" Requires the sender to be member.",
                "r",
                "r\" `threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)",
                "r\" or put up for voting.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(B + M + P1)` or `O(B + M + P2)` where:",
                "r\"   - `B` is `proposal` size in bytes (length-fee-bounded)",
                "r\"   - `M` is members-count (code- and governance-bounded)",
                "r\"   - branching is influenced by `threshold` where:",
                "r\"     - `P1` is proposal execution complexity (`threshold \u003c 2`)",
                "r\"     - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)",
                "r\" - DB:",
                "r\"   - 1 storage read `is_member` (codec `O(M)`)",
                "r\"   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                "r\"   - DB accesses influenced by `threshold`:",
                "r\"     - EITHER storage accesses done by `proposal` (`threshold \u003c 2`)",
                "r\"     - OR proposal insertion (`threshold \u003c= 2`)",
                "r\"       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                "r\"       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                "r\"       - 1 storage write `ProposalOf` (codec `O(B)`)",
                "r\"       - 1 storage write `Voting` (codec `O(M)`)",
                "r\"   - 1 event",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "MemberCount"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 2,
              "name": "propose"
            },
            {
              "docs": [
                "r\" Add an aye or nay vote for the sender to the given proposal.",
                "r",
                "r\" Requires the sender to be a member.",
                "r",
                "r\" Transaction fees will be waived if the member is voting on any particular proposal",
                "r\" for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(M)` where `M` is members-count (code- and governance-bounded)",
                "r\" - DB:",
                "r\"   - 1 storage read `Members` (codec `O(M)`)",
                "r\"   - 1 storage mutation `Voting` (codec `O(M)`)",
                "r\" - 1 event",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ProposalIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 3,
              "name": "vote"
            },
            {
              "docs": [
                "r\" Close a vote that is either approved, disapproved or whose voting period has ended.",
                "r",
                "r\" May be called by any signed account in order to finish voting and close the proposal.",
                "r",
                "r\" If called before the end of the voting period it will only close the vote if it is",
                "r\" has enough votes to be approved or disapproved.",
                "r",
                "r\" If called after the end of the voting period abstentions are counted as rejections",
                "r\" unless there is a prime member set and the prime member cast an approval.",
                "r",
                "r\" If the close operation completes successfully with disapproval, the transaction fee will",
                "r\" be waived. Otherwise execution of the approved operation will be charged to the caller.",
                "r",
                "r\" + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                "r\" + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                "r\"                   `storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(B + M + P1 + P2)` where:",
                "r\"   - `B` is `proposal` size in bytes (length-fee-bounded)",
                "r\"   - `M` is members-count (code- and governance-bounded)",
                "r\"   - `P1` is the complexity of `proposal` preimage.",
                "r\"   - `P2` is proposal-count (code-bounded)",
                "r\" - DB:",
                "r\"  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                "r\"  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                "r\"  - any mutations done while executing `proposal` (`P1`)",
                "r\" - up to 3 events",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ProposalIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "Weight"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 4,
              "name": "close"
            },
            {
              "docs": [
                "r\" Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                "r",
                "r\" Must be called by the Root origin.",
                "r",
                "r\" Parameters:",
                "r\" * `proposal_hash`: The hash of the proposal that should be disapproved.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Complexity: O(P) where P is the number of max proposals",
                "r\" DB Weight:",
                "r\" * Reads: Proposals",
                "r\" * Writes: Voting, Proposals, ProposalOf",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 5,
              "name": "disapprove_proposal"
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_collective",
        "Call"
      ]
    }
  },
  {
    "id": 216,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 0
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 217,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" Set the collective's membership.",
                "r",
                "r\" - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                "r\" - `prime`: The prime member whose vote sets the default.",
                "r\" - `old_count`: The upper bound for the previous number of members in storage.",
                "r\"                Used for weight estimation.",
                "r",
                "r\" Requires root origin.",
                "r",
                "r\" NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                "r\"       the weight estimations rely on it to estimate dispatchable weight.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(MP + N)` where:",
                "r\"   - `M` old-members-count (code- and governance-bounded)",
                "r\"   - `N` new-members-count (code- and governance-bounded)",
                "r\"   - `P` proposals-count (code-bounded)",
                "r\" - DB:",
                "r\"   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                "r\"   - 1 storage read (codec `O(P)`) for reading the proposals",
                "r\"   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                "r\"   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 216,
                  "typeName": "Option\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 0,
              "name": "set_members"
            },
            {
              "docs": [
                "r\" Dispatch a proposal from a member using the `Member` origin.",
                "r",
                "r\" Origin must be a member of the collective.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                "r\" - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                "r\" - 1 event",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "execute"
            },
            {
              "docs": [
                "r\" Add a new proposal to either be voted on or executed directly.",
                "r",
                "r\" Requires the sender to be member.",
                "r",
                "r\" `threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)",
                "r\" or put up for voting.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(B + M + P1)` or `O(B + M + P2)` where:",
                "r\"   - `B` is `proposal` size in bytes (length-fee-bounded)",
                "r\"   - `M` is members-count (code- and governance-bounded)",
                "r\"   - branching is influenced by `threshold` where:",
                "r\"     - `P1` is proposal execution complexity (`threshold \u003c 2`)",
                "r\"     - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)",
                "r\" - DB:",
                "r\"   - 1 storage read `is_member` (codec `O(M)`)",
                "r\"   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                "r\"   - DB accesses influenced by `threshold`:",
                "r\"     - EITHER storage accesses done by `proposal` (`threshold \u003c 2`)",
                "r\"     - OR proposal insertion (`threshold \u003c= 2`)",
                "r\"       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                "r\"       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                "r\"       - 1 storage write `ProposalOf` (codec `O(B)`)",
                "r\"       - 1 storage write `Voting` (codec `O(M)`)",
                "r\"   - 1 event",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "MemberCount"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 2,
              "name": "propose"
            },
            {
              "docs": [
                "r\" Add an aye or nay vote for the sender to the given proposal.",
                "r",
                "r\" Requires the sender to be a member.",
                "r",
                "r\" Transaction fees will be waived if the member is voting on any particular proposal",
                "r\" for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(M)` where `M` is members-count (code- and governance-bounded)",
                "r\" - DB:",
                "r\"   - 1 storage read `Members` (codec `O(M)`)",
                "r\"   - 1 storage mutation `Voting` (codec `O(M)`)",
                "r\" - 1 event",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ProposalIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 3,
              "name": "vote"
            },
            {
              "docs": [
                "r\" Close a vote that is either approved, disapproved or whose voting period has ended.",
                "r",
                "r\" May be called by any signed account in order to finish voting and close the proposal.",
                "r",
                "r\" If called before the end of the voting period it will only close the vote if it is",
                "r\" has enough votes to be approved or disapproved.",
                "r",
                "r\" If called after the end of the voting period abstentions are counted as rejections",
                "r\" unless there is a prime member set and the prime member cast an approval.",
                "r",
                "r\" If the close operation completes successfully with disapproval, the transaction fee will",
                "r\" be waived. Otherwise execution of the approved operation will be charged to the caller.",
                "r",
                "r\" + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                "r\" + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                "r\"                   `storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" ## Weight",
                "r\" - `O(B + M + P1 + P2)` where:",
                "r\"   - `B` is `proposal` size in bytes (length-fee-bounded)",
                "r\"   - `M` is members-count (code- and governance-bounded)",
                "r\"   - `P1` is the complexity of `proposal` preimage.",
                "r\"   - `P2` is proposal-count (code-bounded)",
                "r\" - DB:",
                "r\"  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                "r\"  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                "r\"  - any mutations done while executing `proposal` (`P1`)",
                "r\" - up to 3 events",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ProposalIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "Weight"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 4,
              "name": "close"
            },
            {
              "docs": [
                "r\" Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                "r",
                "r\" Must be called by the Root origin.",
                "r",
                "r\" Parameters:",
                "r\" * `proposal_hash`: The hash of the proposal that should be disapproved.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Complexity: O(P) where P is the number of max proposals",
                "r\" DB Weight:",
                "r\" * Reads: Proposals",
                "r\" * Writes: Voting, Proposals, ProposalOf",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 5,
              "name": "disapprove_proposal"
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_collective",
        "Call"
      ]
    }
  },
  {
    "id": 218,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 0,
              "name": "vote"
            },
            {
              "docs": null,
              "fields": null,
              "index": 1,
              "name": "remove_voter"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 2,
              "name": "submit_candidacy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 219,
                  "typeName": "Renouncing"
                }
              ],
              "index": 3,
              "name": "renounce_candidacy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 4,
              "name": "remove_member"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 5,
              "name": "clean_defunct_voters"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 219,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "A member is renouncing."
              ],
              "fields": null,
              "index": 0,
              "name": "Member"
            },
            {
              "docs": [
                "A runner-up is renouncing."
              ],
              "fields": null,
              "index": 1,
              "name": "RunnerUp"
            },
            {
              "docs": [
                "A candidate is renouncing, while the given total number of candidates exists."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 2,
              "name": "Candidate"
            }
          ]
        }
      },
      "docs": [
        "An indication that the renouncing account currently has which of the below roles."
      ],
      "params": null,
      "path": [
        "pallet_elections_phragmen",
        "Renouncing"
      ]
    }
  },
  {
    "id": 220,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" Add a member `who` to the set.",
                "r",
                "r\" May only be called from `T::AddOrigin`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 0,
              "name": "add_member"
            },
            {
              "docs": [
                "r\" Remove a member `who` from the set.",
                "r",
                "r\" May only be called from `T::RemoveOrigin`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 1,
              "name": "remove_member"
            },
            {
              "docs": [
                "r\" Swap out one member `remove` for another `add`.",
                "r",
                "r\" May only be called from `T::SwapOrigin`.",
                "r",
                "r\" Prime membership is *not* passed from `remove` to `add`, if extant."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 2,
              "name": "swap_member"
            },
            {
              "docs": [
                "r\" Change the membership to a new set, disregarding the existing membership. Be nice and",
                "r\" pass `members` pre-sorted.",
                "r",
                "r\" May only be called from `T::ResetOrigin`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                }
              ],
              "index": 3,
              "name": "reset_members"
            },
            {
              "docs": [
                "r\" Swap out the sending member for some other key `new`.",
                "r",
                "r\" May only be called from `Signed` origin of a current member.",
                "r",
                "r\" Prime membership is passed from the origin account to `new`, if extant."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 4,
              "name": "change_key"
            },
            {
              "docs": [
                "r\" Set the prime member. Must be a current member.",
                "r",
                "r\" May only be called from `T::PrimeOrigin`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 5,
              "name": "set_prime"
            },
            {
              "docs": [
                "r\" Remove the prime member if it exists.",
                "r",
                "r\" May only be called from `T::PrimeOrigin`."
              ],
              "fields": null,
              "index": 6,
              "name": "clear_prime"
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_membership",
        "Call"
      ]
    }
  },
  {
    "id": 221,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 222,
                  "typeName": "EquivocationProof\u003cT::Hash, T::BlockNumber\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 130,
                  "typeName": "T::KeyOwnerProof"
                }
              ],
              "index": 0,
              "name": "report_equivocation"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 222,
                  "typeName": "EquivocationProof\u003cT::Hash, T::BlockNumber\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 130,
                  "typeName": "T::KeyOwnerProof"
                }
              ],
              "index": 1,
              "name": "report_equivocation_unsigned"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                }
              ],
              "index": 2,
              "name": "note_stalled"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_grandpa",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 222,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "set_id",
              "type": 8,
              "typeName": "SetId"
            },
            {
              "docs": null,
              "name": "equivocation",
              "type": 223,
              "typeName": "Equivocation\u003cH, N\u003e"
            }
          ]
        }
      },
      "docs": [
        "Proof of voter misbehavior on a given set id. Misbehavior/equivocation in",
        "GRANDPA happens when a voter votes on the same round (either at prevote or",
        "precommit stage) for different blocks. Proving is achieved by collecting the",
        "signed messages of conflicting votes."
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "path": [
        "sp_finality_grandpa",
        "EquivocationProof"
      ]
    }
  },
  {
    "id": 223,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Proof of equivocation at prevote stage."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 224,
                  "typeName": "grandpa::Equivocation\u003cAuthorityId, grandpa::Prevote\u003cH, N\u003e,\nAuthoritySignature\u003e"
                }
              ],
              "index": 0,
              "name": "Prevote"
            },
            {
              "docs": [
                "Proof of equivocation at precommit stage."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 230,
                  "typeName": "grandpa::Equivocation\u003cAuthorityId, grandpa::Precommit\u003cH, N\u003e,\nAuthoritySignature\u003e"
                }
              ],
              "index": 1,
              "name": "Precommit"
            }
          ]
        }
      },
      "docs": [
        "Wrapper object for GRANDPA equivocation proofs, useful for unifying prevote",
        "and precommit equivocations under a common type."
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "path": [
        "sp_finality_grandpa",
        "Equivocation"
      ]
    }
  },
  {
    "id": 224,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The round number equivocated in."
              ],
              "name": "round_number",
              "type": 8,
              "typeName": "u64"
            },
            {
              "docs": [
                "The identity of the equivocator."
              ],
              "name": "identity",
              "type": 55,
              "typeName": "Id"
            },
            {
              "docs": [
                "The first vote in the equivocation."
              ],
              "name": "first",
              "type": 229,
              "typeName": "(V, S)"
            },
            {
              "docs": [
                "The second vote in the equivocation."
              ],
              "name": "second",
              "type": 229,
              "typeName": "(V, S)"
            }
          ]
        }
      },
      "docs": [
        "An equivocation (double-vote) in a given round."
      ],
      "params": [
        {
          "name": "Id",
          "type": 55
        },
        {
          "name": "V",
          "type": 225
        },
        {
          "name": "S",
          "type": 226
        }
      ],
      "path": [
        "finality_grandpa",
        "Equivocation"
      ]
    }
  },
  {
    "id": 225,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The target block\\'s hash."
              ],
              "name": "target_hash",
              "type": 9,
              "typeName": "H"
            },
            {
              "docs": [
                "The target block\\'s number."
              ],
              "name": "target_number",
              "type": 4,
              "typeName": "N"
            }
          ]
        }
      },
      "docs": [
        "A prevote for a block and its ancestors."
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "path": [
        "finality_grandpa",
        "Prevote"
      ]
    }
  },
  {
    "id": 226,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 227,
              "typeName": "ed25519::Signature"
            }
          ]
        }
      },
      "docs": [
        "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
      ],
      "params": null,
      "path": [
        "sp_finality_grandpa",
        "app",
        "Signature"
      ]
    }
  },
  {
    "id": 227,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 228,
              "typeName": "[u8; 64]"
            }
          ]
        }
      },
      "docs": [
        "A signature (a 512-bit value)."
      ],
      "params": null,
      "path": [
        "sp_core",
        "ed25519",
        "Signature"
      ]
    }
  },
  {
    "id": 228,
    "type": {
      "def": {
        "Array": {
          "len": 64,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 229,
    "type": {
      "def": {
        "Tuple": [
          225,
          226
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 230,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The round number equivocated in."
              ],
              "name": "round_number",
              "type": 8,
              "typeName": "u64"
            },
            {
              "docs": [
                "The identity of the equivocator."
              ],
              "name": "identity",
              "type": 55,
              "typeName": "Id"
            },
            {
              "docs": [
                "The first vote in the equivocation."
              ],
              "name": "first",
              "type": 232,
              "typeName": "(V, S)"
            },
            {
              "docs": [
                "The second vote in the equivocation."
              ],
              "name": "second",
              "type": 232,
              "typeName": "(V, S)"
            }
          ]
        }
      },
      "docs": [
        "An equivocation (double-vote) in a given round."
      ],
      "params": [
        {
          "name": "Id",
          "type": 55
        },
        {
          "name": "V",
          "type": 231
        },
        {
          "name": "S",
          "type": 226
        }
      ],
      "path": [
        "finality_grandpa",
        "Equivocation"
      ]
    }
  },
  {
    "id": 231,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The target block\\'s hash."
              ],
              "name": "target_hash",
              "type": 9,
              "typeName": "H"
            },
            {
              "docs": [
                "The target block\\'s number"
              ],
              "name": "target_number",
              "type": 4,
              "typeName": "N"
            }
          ]
        }
      },
      "docs": [
        "A precommit for a block and its ancestors."
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "path": [
        "finality_grandpa",
        "Precommit"
      ]
    }
  },
  {
    "id": 232,
    "type": {
      "def": {
        "Tuple": [
          231,
          226
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 233,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 0,
              "name": "propose_spend"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ProposalIndex"
                }
              ],
              "index": 1,
              "name": "reject_proposal"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ProposalIndex"
                }
              ],
              "index": 2,
              "name": "approve_proposal"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_treasury",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 234,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "Weight"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 0,
              "name": "call"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "Weight"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 1,
              "name": "instantiate_with_code"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "Weight"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "CodeHash\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 2,
              "name": "instantiate"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 216,
                  "typeName": "Option\u003cT::AccountId\u003e"
                }
              ],
              "index": 3,
              "name": "claim_surcharge"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_contracts",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 235,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 0,
              "name": "sudo"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "Weight"
                }
              ],
              "index": 1,
              "name": "sudo_unchecked_weight"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 2,
              "name": "set_key"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 3,
              "name": "sudo_as"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_sudo",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 236,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 237,
                  "typeName": "Heartbeat\u003cT::BlockNumber\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 242,
                  "typeName": "\u003cT::AuthorityId as RuntimeAppPublic\u003e::Signature"
                }
              ],
              "index": 0,
              "name": "heartbeat"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_im_online",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 237,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Block number at the time heartbeat is created.."
              ],
              "name": "block_number",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "A state of local network (peer id and external addresses)"
              ],
              "name": "network_state",
              "type": 238,
              "typeName": "OpaqueNetworkState"
            },
            {
              "docs": [
                "Index of the current session."
              ],
              "name": "session_index",
              "type": 4,
              "typeName": "SessionIndex"
            },
            {
              "docs": [
                "An index of the authority on the list of validators."
              ],
              "name": "authority_index",
              "type": 4,
              "typeName": "AuthIndex"
            },
            {
              "docs": [
                "The length of session validator set"
              ],
              "name": "validators_len",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "Heartbeat which is sent/received."
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_im_online",
        "Heartbeat"
      ]
    }
  },
  {
    "id": 238,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "PeerId of the local node in SCALE encoded."
              ],
              "name": "peer_id",
              "type": 239,
              "typeName": "OpaquePeerId"
            },
            {
              "docs": [
                "List of addresses the node knows it can be reached as."
              ],
              "name": "external_addresses",
              "type": 240,
              "typeName": "Vec\u003cOpaqueMultiaddr\u003e"
            }
          ]
        }
      },
      "docs": [
        "A blob to hold information about the local node\\'s network state",
        "without committing to its format."
      ],
      "params": null,
      "path": [
        "sp_core",
        "offchain",
        "OpaqueNetworkState"
      ]
    }
  },
  {
    "id": 239,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 10,
              "typeName": "Vec\u003cu8\u003e"
            }
          ]
        }
      },
      "docs": [
        "Simple blob to hold a `PeerId` without committing to its format."
      ],
      "params": null,
      "path": [
        "sp_core",
        "OpaquePeerId"
      ]
    }
  },
  {
    "id": 240,
    "type": {
      "def": {
        "Sequence": {
          "type": 241
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 241,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 10,
              "typeName": "Vec\u003cu8\u003e"
            }
          ]
        }
      },
      "docs": [
        "Simple blob to hold a `Multiaddr` without committing to its format."
      ],
      "params": null,
      "path": [
        "sp_core",
        "offchain",
        "OpaqueMultiaddr"
      ]
    }
  },
  {
    "id": 242,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 243,
              "typeName": "sr25519::Signature"
            }
          ]
        }
      },
      "docs": [
        "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
      ],
      "params": null,
      "path": [
        "pallet_im_online",
        "sr25519",
        "app_sr25519",
        "Signature"
      ]
    }
  },
  {
    "id": 243,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 228,
              "typeName": "[u8; 64]"
            }
          ]
        }
      },
      "docs": [
        "An Schnorrkel/Ristretto x25519 (\\\"sr25519\\\") signature.",
        "",
        "Instead of importing it for the local module, alias it to be available as a public type"
      ],
      "params": null,
      "path": [
        "sp_core",
        "sr25519",
        "Signature"
      ]
    }
  },
  {
    "id": 244,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 0,
              "name": "add_registrar"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 245,
                  "typeName": "IdentityInfo\u003cT::MaxAdditionalFields\u003e"
                }
              ],
              "index": 1,
              "name": "set_identity"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 279,
                  "typeName": "Vec\u003c(T::AccountId, Data)\u003e"
                }
              ],
              "index": 2,
              "name": "set_subs"
            },
            {
              "docs": null,
              "fields": null,
              "index": 3,
              "name": "clear_identity"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "RegistrarIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 4,
              "name": "request_judgement"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex"
                }
              ],
              "index": 5,
              "name": "cancel_request"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "RegistrarIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 6,
              "name": "set_fee"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "RegistrarIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 7,
              "name": "set_account_id"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "RegistrarIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 281,
                  "typeName": "IdentityFields"
                }
              ],
              "index": 8,
              "name": "set_fields"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "RegistrarIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 283,
                  "typeName": "Judgement\u003cBalanceOf\u003cT\u003e\u003e"
                }
              ],
              "index": 9,
              "name": "provide_judgement"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 10,
              "name": "kill_identity"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 248,
                  "typeName": "Data"
                }
              ],
              "index": 11,
              "name": "add_sub"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 248,
                  "typeName": "Data"
                }
              ],
              "index": 12,
              "name": "rename_sub"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 13,
              "name": "remove_sub"
            },
            {
              "docs": null,
              "fields": null,
              "index": 14,
              "name": "quit_sub"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_identity",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 245,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Additional fields of the identity that are not catered for with the struct\\'s explicit",
                "fields."
              ],
              "name": "additional",
              "type": 246,
              "typeName": "BoundedVec\u003c(Data, Data), FieldLimit\u003e"
            },
            {
              "docs": [
                "A reasonable display name for the controller of the account. This should be whatever it is",
                "that it is typically known as and should not be confusable with other entities, given",
                "reasonable context.",
                "",
                "Stored as UTF-8."
              ],
              "name": "display",
              "type": 248,
              "typeName": "Data"
            },
            {
              "docs": [
                "The full legal name in the local jurisdiction of the entity. This might be a bit",
                "long-winded.",
                "",
                "Stored as UTF-8."
              ],
              "name": "legal",
              "type": 248,
              "typeName": "Data"
            },
            {
              "docs": [
                "A representative website held by the controller of the account.",
                "",
                "NOTE: `https://` is automatically prepended.",
                "",
                "Stored as UTF-8."
              ],
              "name": "web",
              "type": 248,
              "typeName": "Data"
            },
            {
              "docs": [
                "The Riot/Matrix handle held by the controller of the account.",
                "",
                "Stored as UTF-8."
              ],
              "name": "riot",
              "type": 248,
              "typeName": "Data"
            },
            {
              "docs": [
                "The email address of the controller of the account.",
                "",
                "Stored as UTF-8."
              ],
              "name": "email",
              "type": 248,
              "typeName": "Data"
            },
            {
              "docs": [
                "The PGP/GPG public key of the controller of the account."
              ],
              "name": "pgp_fingerprint",
              "type": 278,
              "typeName": "Option\u003c[u8; 20]\u003e"
            },
            {
              "docs": [
                "A graphic image representing the controller of the account. Should be a company,",
                "organization or project logo or a headshot in the case of a human."
              ],
              "name": "image",
              "type": 248,
              "typeName": "Data"
            },
            {
              "docs": [
                "The Twitter identity. The leading `@` character may be elided."
              ],
              "name": "twitter",
              "type": 248,
              "typeName": "Data"
            }
          ]
        }
      },
      "docs": [
        "Information concerning the identity of the controller of an account.",
        "",
        "NOTE: This should be stored at the end of the storage item to facilitate the addition of extra",
        "fields in a backwards compatible way through a specialized `Decode` impl."
      ],
      "params": [
        {
          "name": "FieldLimit",
          "type": null
        }
      ],
      "path": [
        "pallet_identity",
        "types",
        "IdentityInfo"
      ]
    }
  },
  {
    "id": 246,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 277,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 247
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 247,
    "type": {
      "def": {
        "Tuple": [
          248,
          248
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 248,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 249,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Raw0"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 250,
                  "typeName": null
                }
              ],
              "index": 2,
              "name": "Raw1"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 251,
                  "typeName": null
                }
              ],
              "index": 3,
              "name": "Raw2"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 252,
                  "typeName": null
                }
              ],
              "index": 4,
              "name": "Raw3"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 14,
                  "typeName": null
                }
              ],
              "index": 5,
              "name": "Raw4"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 253,
                  "typeName": null
                }
              ],
              "index": 6,
              "name": "Raw5"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 254,
                  "typeName": null
                }
              ],
              "index": 7,
              "name": "Raw6"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 255,
                  "typeName": null
                }
              ],
              "index": 8,
              "name": "Raw7"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 119,
                  "typeName": null
                }
              ],
              "index": 9,
              "name": "Raw8"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 256,
                  "typeName": null
                }
              ],
              "index": 10,
              "name": "Raw9"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 257,
                  "typeName": null
                }
              ],
              "index": 11,
              "name": "Raw10"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 258,
                  "typeName": null
                }
              ],
              "index": 12,
              "name": "Raw11"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 259,
                  "typeName": null
                }
              ],
              "index": 13,
              "name": "Raw12"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 260,
                  "typeName": null
                }
              ],
              "index": 14,
              "name": "Raw13"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 261,
                  "typeName": null
                }
              ],
              "index": 15,
              "name": "Raw14"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 262,
                  "typeName": null
                }
              ],
              "index": 16,
              "name": "Raw15"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 70,
                  "typeName": null
                }
              ],
              "index": 17,
              "name": "Raw16"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 263,
                  "typeName": null
                }
              ],
              "index": 18,
              "name": "Raw17"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 264,
                  "typeName": null
                }
              ],
              "index": 19,
              "name": "Raw18"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 265,
                  "typeName": null
                }
              ],
              "index": 20,
              "name": "Raw19"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 141,
                  "typeName": null
                }
              ],
              "index": 21,
              "name": "Raw20"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 266,
                  "typeName": null
                }
              ],
              "index": 22,
              "name": "Raw21"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 267,
                  "typeName": null
                }
              ],
              "index": 23,
              "name": "Raw22"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 268,
                  "typeName": null
                }
              ],
              "index": 24,
              "name": "Raw23"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 269,
                  "typeName": null
                }
              ],
              "index": 25,
              "name": "Raw24"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 270,
                  "typeName": null
                }
              ],
              "index": 26,
              "name": "Raw25"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 271,
                  "typeName": null
                }
              ],
              "index": 27,
              "name": "Raw26"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 272,
                  "typeName": null
                }
              ],
              "index": 28,
              "name": "Raw27"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 273,
                  "typeName": null
                }
              ],
              "index": 29,
              "name": "Raw28"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 274,
                  "typeName": null
                }
              ],
              "index": 30,
              "name": "Raw29"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 275,
                  "typeName": null
                }
              ],
              "index": 31,
              "name": "Raw30"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 276,
                  "typeName": null
                }
              ],
              "index": 32,
              "name": "Raw31"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": null
                }
              ],
              "index": 33,
              "name": "Raw32"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": null
                }
              ],
              "index": 34,
              "name": "BlakeTwo256"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": null
                }
              ],
              "index": 35,
              "name": "Sha256"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": null
                }
              ],
              "index": 36,
              "name": "Keccak256"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": null
                }
              ],
              "index": 37,
              "name": "ShaThree256"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "pallet_identity",
        "types",
        "Data"
      ]
    }
  },
  {
    "id": 249,
    "type": {
      "def": {
        "Array": {
          "len": 0,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 250,
    "type": {
      "def": {
        "Array": {
          "len": 1,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 251,
    "type": {
      "def": {
        "Array": {
          "len": 2,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 252,
    "type": {
      "def": {
        "Array": {
          "len": 3,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 253,
    "type": {
      "def": {
        "Array": {
          "len": 5,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 254,
    "type": {
      "def": {
        "Array": {
          "len": 6,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 255,
    "type": {
      "def": {
        "Array": {
          "len": 7,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 256,
    "type": {
      "def": {
        "Array": {
          "len": 9,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 257,
    "type": {
      "def": {
        "Array": {
          "len": 10,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 258,
    "type": {
      "def": {
        "Array": {
          "len": 11,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 259,
    "type": {
      "def": {
        "Array": {
          "len": 12,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 260,
    "type": {
      "def": {
        "Array": {
          "len": 13,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 261,
    "type": {
      "def": {
        "Array": {
          "len": 14,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 262,
    "type": {
      "def": {
        "Array": {
          "len": 15,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 263,
    "type": {
      "def": {
        "Array": {
          "len": 17,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 264,
    "type": {
      "def": {
        "Array": {
          "len": 18,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 265,
    "type": {
      "def": {
        "Array": {
          "len": 19,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 266,
    "type": {
      "def": {
        "Array": {
          "len": 21,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 267,
    "type": {
      "def": {
        "Array": {
          "len": 22,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 268,
    "type": {
      "def": {
        "Array": {
          "len": 23,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 269,
    "type": {
      "def": {
        "Array": {
          "len": 24,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 270,
    "type": {
      "def": {
        "Array": {
          "len": 25,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 271,
    "type": {
      "def": {
        "Array": {
          "len": 26,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 272,
    "type": {
      "def": {
        "Array": {
          "len": 27,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 273,
    "type": {
      "def": {
        "Array": {
          "len": 28,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 274,
    "type": {
      "def": {
        "Array": {
          "len": 29,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 275,
    "type": {
      "def": {
        "Array": {
          "len": 30,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 276,
    "type": {
      "def": {
        "Array": {
          "len": 31,
          "type": 2
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 277,
    "type": {
      "def": {
        "Sequence": {
          "type": 247
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 278,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 141,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 141
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 279,
    "type": {
      "def": {
        "Sequence": {
          "type": 280
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 280,
    "type": {
      "def": {
        "Tuple": [
          0,
          248
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 281,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 282,
              "typeName": "BitFlags\u003cIdentityField\u003e"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "pallet_identity",
        "types",
        "IdentityFields"
      ]
    }
  },
  {
    "id": 282,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 1,
              "name": "Display"
            },
            {
              "docs": null,
              "fields": null,
              "index": 2,
              "name": "Legal"
            },
            {
              "docs": null,
              "fields": null,
              "index": 4,
              "name": "Web"
            },
            {
              "docs": null,
              "fields": null,
              "index": 8,
              "name": "Riot"
            },
            {
              "docs": null,
              "fields": null,
              "index": 16,
              "name": "Email"
            },
            {
              "docs": null,
              "fields": null,
              "index": 32,
              "name": "PgpFingerprint"
            },
            {
              "docs": null,
              "fields": null,
              "index": 64,
              "name": "Image"
            },
            {
              "docs": null,
              "fields": null,
              "index": 128,
              "name": "Twitter"
            }
          ]
        }
      },
      "docs": [
        "The fields that we use to identify the owner of an account with. Each corresponds to a field",
        "in the `IdentityInfo` struct."
      ],
      "params": null,
      "path": [
        "pallet_identity",
        "types",
        "IdentityField"
      ]
    }
  },
  {
    "id": 283,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The default value; no opinion is held."
              ],
              "fields": null,
              "index": 0,
              "name": "Unknown"
            },
            {
              "docs": [
                "No judgement is yet in place, but a deposit is reserved as payment for providing one."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 1,
              "name": "FeePaid"
            },
            {
              "docs": [
                "The data appears to be reasonably acceptable in terms of its accuracy, however no in depth",
                "checks (such as in-person meetings or formal KYC) have been conducted."
              ],
              "fields": null,
              "index": 2,
              "name": "Reasonable"
            },
            {
              "docs": [
                "The target is known directly by the registrar and the registrar can fully attest to the",
                "the data\\'s accuracy."
              ],
              "fields": null,
              "index": 3,
              "name": "KnownGood"
            },
            {
              "docs": [
                "The data was once good but is currently out of date. There is no malicious intent in the",
                "inaccuracy. This judgement can be removed through updating the data."
              ],
              "fields": null,
              "index": 4,
              "name": "OutOfDate"
            },
            {
              "docs": [
                "The data is imprecise or of sufficiently low-quality to be problematic. It is not",
                "indicative of malicious intent. This judgement can be removed through updating the data."
              ],
              "fields": null,
              "index": 5,
              "name": "LowQuality"
            },
            {
              "docs": [
                "The data is erroneous. This may be indicative of malicious intent. This cannot be removed",
                "except by the registrar."
              ],
              "fields": null,
              "index": 6,
              "name": "Erroneous"
            }
          ]
        }
      },
      "docs": [
        "An attestation of a registrar over how accurate some `IdentityInfo` is in describing an account.",
        "",
        "NOTE: Registrars may pay little attention to some fields. Registrars may want to make clear",
        "which fields their attestation is relevant for by off-chain means."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_identity",
        "types",
        "Judgement"
      ]
    }
  },
  {
    "id": 284,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" A user outside of the society can make a bid for entry.",
                "r",
                "r\" Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
                "r\" when the bid becomes a member, or if the bid calls `unbid`.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_.",
                "r",
                "r\" Parameters:",
                "r\" - `value`: A one time payment the bid would like to receive when joining the society.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)",
                "r\" - Storage Reads:",
                "r\" \t- One storage read to check for suspended candidate. O(1)",
                "r\" \t- One storage read to check for suspended member. O(1)",
                "r\" \t- One storage read to retrieve all current bids. O(B)",
                "r\" \t- One storage read to retrieve all current candidates. O(C)",
                "r\" \t- One storage read to retrieve all members. O(M)",
                "r\" - Storage Writes:",
                "r\" \t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)",
                "r\" \t- Up to one storage removal if bid.len() \u003e MAX_BID_COUNT. O(1)",
                "r\" - Notable Computation:",
                "r\" \t- O(B + C + log M) search to check user is not already a part of society.",
                "r\" \t- O(log B) search to insert the new bid sorted.",
                "r\" - External Module Operations:",
                "r\" \t- One balance reserve operation. O(X)",
                "r\" \t- Up to one balance unreserve operation if bids.len() \u003e MAX_BID_COUNT.",
                "r\" - Events:",
                "r\" \t- One event for new bid.",
                "r\" \t- Up to one event for AutoUnbid if bid.len() \u003e MAX_BID_COUNT.",
                "r",
                "r\" Total Complexity: O(M + B + C + logM + logB + X)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                }
              ],
              "index": 0,
              "name": "bid"
            },
            {
              "docs": [
                "r\" A bidder can remove their bid for entry into society.",
                "r\" By doing so, they will have their candidate deposit returned or",
                "r\" they will unvouch their voucher.",
                "r",
                "r\" Payment: The bid deposit is unreserved if the user made a bid.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and a bidder.",
                "r",
                "r\" Parameters:",
                "r\" - `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Key: B (len of bids), X (balance unreserve)",
                "r\" - One storage read and write to retrieve and update the bids. O(B)",
                "r\" - Either one unreserve balance action O(X) or one vouching storage removal. O(1)",
                "r\" - One event.",
                "r",
                "r\" Total Complexity: O(B + X)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "unbid"
            },
            {
              "docs": [
                "r\" As a member, vouch for someone to join society by placing a bid on their behalf.",
                "r",
                "r\" There is no deposit required to vouch for a new bid, but a member can only vouch for",
                "r\" one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
                "r\" the suspension judgement origin, the member will be banned from vouching again.",
                "r",
                "r\" As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
                "r\" be paid as a portion of the reward the member will receive for joining the society.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and a member.",
                "r",
                "r\" Parameters:",
                "r\" - `who`: The user who you would like to vouch for.",
                "r\" - `value`: The total reward to be paid between you and the candidate if they become",
                "r\" a member in the society.",
                "r\" - `tip`: Your cut of the total `value` payout when the candidate is inducted into",
                "r\" the society. Tips larger than `value` will be saturated upon payout.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Key: B (len of bids), C (len of candidates), M (len of members)",
                "r\" - Storage Reads:",
                "r\" \t- One storage read to retrieve all members. O(M)",
                "r\" \t- One storage read to check member is not already vouching. O(1)",
                "r\" \t- One storage read to check for suspended candidate. O(1)",
                "r\" \t- One storage read to check for suspended member. O(1)",
                "r\" \t- One storage read to retrieve all current bids. O(B)",
                "r\" \t- One storage read to retrieve all current candidates. O(C)",
                "r\" - Storage Writes:",
                "r\" \t- One storage write to insert vouching status to the member. O(1)",
                "r\" \t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)",
                "r\" \t- Up to one storage removal if bid.len() \u003e MAX_BID_COUNT. O(1)",
                "r\" - Notable Computation:",
                "r\" \t- O(log M) search to check sender is a member.",
                "r\" \t- O(B + C + log M) search to check user is not already a part of society.",
                "r\" \t- O(log B) search to insert the new bid sorted.",
                "r\" - External Module Operations:",
                "r\" \t- One balance reserve operation. O(X)",
                "r\" \t- Up to one balance unreserve operation if bids.len() \u003e MAX_BID_COUNT.",
                "r\" - Events:",
                "r\" \t- One event for vouch.",
                "r\" \t- Up to one event for AutoUnbid if bid.len() \u003e MAX_BID_COUNT.",
                "r",
                "r\" Total Complexity: O(M + B + C + logM + logB + X)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT, I\u003e"
                }
              ],
              "index": 2,
              "name": "vouch"
            },
            {
              "docs": [
                "r\" As a vouching member, unvouch a bid. This only works while vouched user is",
                "r\" only a bidder (and not a candidate).",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and a vouching member.",
                "r",
                "r\" Parameters:",
                "r\" - `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Key: B (len of bids)",
                "r\" - One storage read O(1) to check the signer is a vouching member.",
                "r\" - One storage mutate to retrieve and update the bids. O(B)",
                "r\" - One vouching storage removal. O(1)",
                "r\" - One event.",
                "r",
                "r\" Total Complexity: O(B)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 3,
              "name": "unvouch"
            },
            {
              "docs": [
                "r\" As a member, vote on a candidate.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and a member.",
                "r",
                "r\" Parameters:",
                "r\" - `candidate`: The candidate that the member would like to bid on.",
                "r\" - `approve`: A boolean which says if the candidate should be",
                "r\"              approved (`true`) or rejected (`false`).",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Key: C (len of candidates), M (len of members)",
                "r\" - One storage read O(M) and O(log M) search to check user is a member.",
                "r\" - One account lookup.",
                "r\" - One storage read O(C) and O(C) search to check that user is a candidate.",
                "r\" - One storage write to add vote to votes. O(1)",
                "r\" - One event.",
                "r",
                "r\" Total Complexity: O(M + logM + C)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 4,
              "name": "vote"
            },
            {
              "docs": [
                "r\" As a member, vote on the defender.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and a member.",
                "r",
                "r\" Parameters:",
                "r\" - `approve`: A boolean which says if the candidate should be",
                "r\" approved (`true`) or rejected (`false`).",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Key: M (len of members)",
                "r\" - One storage read O(M) and O(log M) search to check user is a member.",
                "r\" - One storage write to add vote to votes. O(1)",
                "r\" - One event.",
                "r",
                "r\" Total Complexity: O(M + logM)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 5,
              "name": "defender_vote"
            },
            {
              "docs": [
                "r\" Transfer the first matured payout for the sender and remove it from the records.",
                "r",
                "r\" NOTE: This extrinsic needs to be called multiple times to claim multiple matured payouts.",
                "r",
                "r\" Payment: The member will receive a payment equal to their first matured",
                "r\" payout to their free balance.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and a member with",
                "r\" payouts remaining.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Key: M (len of members), P (number of payouts for a particular member)",
                "r\" - One storage read O(M) and O(log M) search to check signer is a member.",
                "r\" - One storage read O(P) to get all payouts for a member.",
                "r\" - One storage read O(1) to get the current block number.",
                "r\" - One currency transfer call. O(X)",
                "r\" - One storage write or removal to update the member's payouts. O(P)",
                "r",
                "r\" Total Complexity: O(M + logM + P + X)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": null,
              "index": 6,
              "name": "payout"
            },
            {
              "docs": [
                "r\" Found the society.",
                "r",
                "r\" This is done as a discrete action in order to allow for the",
                "r\" module to be included into a running chain and can only be done once.",
                "r",
                "r\" The dispatch origin for this call must be from the _FounderSetOrigin_.",
                "r",
                "r\" Parameters:",
                "r\" - `founder` - The first member and head of the newly founded society.",
                "r\" - `max_members` - The initial max number of members for the society.",
                "r\" - `rules` - The rules of this society concerning membership.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Two storage mutates to set `Head` and `Founder`. O(1)",
                "r\" - One storage write to add the first member to society. O(1)",
                "r\" - One event.",
                "r",
                "r\" Total Complexity: O(1)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 7,
              "name": "found"
            },
            {
              "docs": [
                "r\" Annul the founding of the society.",
                "r",
                "r\" The dispatch origin for this call must be Signed, and the signing account must be both",
                "r\" the `Founder` and the `Head`. This implies that it may only be done when there is one",
                "r\" member.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Two storage reads O(1).",
                "r\" - Four storage removals O(1).",
                "r\" - One event.",
                "r",
                "r\" Total Complexity: O(1)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": null,
              "index": 8,
              "name": "unfound"
            },
            {
              "docs": [
                "r\" Allow suspension judgement origin to make judgement on a suspended member.",
                "r",
                "r\" If a suspended member is forgiven, we simply add them back as a member, not affecting",
                "r\" any of the existing storage items for that member.",
                "r",
                "r\" If a suspended member is rejected, remove all associated storage items, including",
                "r\" their payouts, and remove any vouched bids they currently have.",
                "r",
                "r\" The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                "r",
                "r\" Parameters:",
                "r\" - `who` - The suspended member to be judged.",
                "r\" - `forgive` - A boolean representing whether the suspension judgement origin",
                "r\"               forgives (`true`) or rejects (`false`) a suspended member.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Key: B (len of bids), M (len of members)",
                "r\" - One storage read to check `who` is a suspended member. O(1)",
                "r\" - Up to one storage write O(M) with O(log M) binary search to add a member back to society.",
                "r\" - Up to 3 storage removals O(1) to clean up a removed member.",
                "r\" - Up to one storage write O(B) with O(B) search to remove vouched bid from bids.",
                "r\" - Up to one additional event if unvouch takes place.",
                "r\" - One storage removal. O(1)",
                "r\" - One event for the judgement.",
                "r",
                "r\" Total Complexity: O(M + logM + B)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 9,
              "name": "judge_suspended_member"
            },
            {
              "docs": [
                "r\" Allow suspended judgement origin to make judgement on a suspended candidate.",
                "r",
                "r\" If the judgement is `Approve`, we add them to society as a member with the appropriate",
                "r\" payment for joining society.",
                "r",
                "r\" If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
                "r\" to the society treasury, or we ban the voucher from vouching again.",
                "r",
                "r\" If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
                "r\" through the induction process again.",
                "r",
                "r\" The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                "r",
                "r\" Parameters:",
                "r\" - `who` - The suspended candidate to be judged.",
                "r\" - `judgement` - `Approve`, `Reject`, or `Rebid`.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" Key: B (len of bids), M (len of members), X (balance action)",
                "r\" - One storage read to check `who` is a suspended candidate.",
                "r\" - One storage removal of the suspended candidate.",
                "r\" - Approve Logic",
                "r\" \t- One storage read to get the available pot to pay users with. O(1)",
                "r\" \t- One storage write to update the available pot. O(1)",
                "r\" \t- One storage read to get the current block number. O(1)",
                "r\" \t- One storage read to get all members. O(M)",
                "r\" \t- Up to one unreserve currency action.",
                "r\" \t- Up to two new storage writes to payouts.",
                "r\" \t- Up to one storage write with O(log M) binary search to add a member to society.",
                "r\" - Reject Logic",
                "r\" \t- Up to one repatriate reserved currency action. O(X)",
                "r\" \t- Up to one storage write to ban the vouching member from vouching again.",
                "r\" - Rebid Logic",
                "r\" \t- Storage mutate with O(log B) binary search to place the user back into bids.",
                "r\" - Up to one additional event if unvouch takes place.",
                "r\" - One storage removal.",
                "r\" - One event for the judgement.",
                "r",
                "r\" Total Complexity: O(M + logM + B + X)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 285,
                  "typeName": "Judgement"
                }
              ],
              "index": 10,
              "name": "judge_suspended_candidate"
            },
            {
              "docs": [
                "r\" Allows root origin to change the maximum number of members in society.",
                "r\" Max membership count must be greater than 1.",
                "r",
                "r\" The dispatch origin for this call must be from _ROOT_.",
                "r",
                "r\" Parameters:",
                "r\" - `max` - The maximum number of members for the society.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - One storage write to update the max. O(1)",
                "r\" - One event.",
                "r",
                "r\" Total Complexity: O(1)",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 11,
              "name": "set_max_members"
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_society",
        "Call"
      ]
    }
  },
  {
    "id": 285,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The suspension judgement origin takes no direct judgment",
                "and places the candidate back into the bid pool."
              ],
              "fields": null,
              "index": 0,
              "name": "Rebid"
            },
            {
              "docs": [
                "The suspension judgement origin has rejected the candidate\\'s application."
              ],
              "fields": null,
              "index": 1,
              "name": "Reject"
            },
            {
              "docs": [
                "The suspension judgement origin approves of the candidate\\'s application."
              ],
              "fields": null,
              "index": 2,
              "name": "Approve"
            }
          ]
        }
      },
      "docs": [
        "A judgement by the suspension judgement origin on a suspended candidate."
      ],
      "params": null,
      "path": [
        "pallet_society",
        "Judgement"
      ]
    }
  },
  {
    "id": 286,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 0,
              "name": "as_recovered"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 1,
              "name": "set_recovered"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 81,
                  "typeName": "u16"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                }
              ],
              "index": 2,
              "name": "create_recovery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 3,
              "name": "initiate_recovery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 4,
              "name": "vouch_recovery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 5,
              "name": "claim_recovery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 6,
              "name": "close_recovery"
            },
            {
              "docs": null,
              "fields": null,
              "index": 7,
              "name": "remove_recovery"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 8,
              "name": "cancel_recovered"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_recovery",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 287,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "vest"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 1,
              "name": "vest_other"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 288,
                  "typeName": "VestingInfo\u003cBalanceOf\u003cT\u003e, T::BlockNumber\u003e"
                }
              ],
              "index": 2,
              "name": "vested_transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 288,
                  "typeName": "VestingInfo\u003cBalanceOf\u003cT\u003e, T::BlockNumber\u003e"
                }
              ],
              "index": 3,
              "name": "force_vested_transfer"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_vesting",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 288,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Locked amount at genesis."
              ],
              "name": "locked",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Amount that gets unlocked every block after `starting_block`."
              ],
              "name": "per_block",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Starting block for unlocking(vesting)."
              ],
              "name": "starting_block",
              "type": 4,
              "typeName": "BlockNumber"
            }
          ]
        }
      },
      "docs": [
        "Struct to encode the vesting schedule of an individual account."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_vesting",
        "VestingInfo"
      ]
    }
  },
  {
    "id": 289,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 290,
                  "typeName": "Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": "schedule::Priority"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 0,
              "name": "schedule"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "cancel"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 290,
                  "typeName": "Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": "schedule::Priority"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 2,
              "name": "schedule_named"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 3,
              "name": "cancel_named"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 290,
                  "typeName": "Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": "schedule::Priority"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 4,
              "name": "schedule_after"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 290,
                  "typeName": "Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": "schedule::Priority"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 5,
              "name": "schedule_named_after"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_scheduler",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 290,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 77,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 77
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 291,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 292,
                  "typeName": "Option\u003cT::ProxyType\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 0,
              "name": "proxy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 80,
                  "typeName": "T::ProxyType"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                }
              ],
              "index": 1,
              "name": "add_proxy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 80,
                  "typeName": "T::ProxyType"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                }
              ],
              "index": 2,
              "name": "remove_proxy"
            },
            {
              "docs": null,
              "fields": null,
              "index": 3,
              "name": "remove_proxies"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 80,
                  "typeName": "T::ProxyType"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 81,
                  "typeName": "u16"
                }
              ],
              "index": 4,
              "name": "anonymous"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 80,
                  "typeName": "T::ProxyType"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 81,
                  "typeName": "u16"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "u32"
                }
              ],
              "index": 5,
              "name": "kill_anonymous"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "CallHashOf\u003cT\u003e"
                }
              ],
              "index": 6,
              "name": "announce"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "CallHashOf\u003cT\u003e"
                }
              ],
              "index": 7,
              "name": "remove_announcement"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "CallHashOf\u003cT\u003e"
                }
              ],
              "index": 8,
              "name": "reject_announcement"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 292,
                  "typeName": "Option\u003cT::ProxyType\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 9,
              "name": "proxy_announced"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_proxy",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 292,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 80,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 80
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 293,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 0,
              "name": "as_multi_threshold_1"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 81,
                  "typeName": "u16"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 294,
                  "typeName": "Option\u003cTimepoint\u003cT::BlockNumber\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "OpaqueCall"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "Weight"
                }
              ],
              "index": 1,
              "name": "as_multi"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 81,
                  "typeName": "u16"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 294,
                  "typeName": "Option\u003cTimepoint\u003cT::BlockNumber\u003e\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "Weight"
                }
              ],
              "index": 2,
              "name": "approve_as_multi"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 81,
                  "typeName": "u16"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 39,
                  "typeName": "Vec\u003cT::AccountId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 83,
                  "typeName": "Timepoint\u003cT::BlockNumber\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]"
                }
              ],
              "index": 3,
              "name": "cancel_as_multi"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_multisig",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 294,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 83,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 83
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 295,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" Propose a new bounty.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_.",
                "r",
                "r\" Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                "r\" `DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                "r\" or slashed when rejected.",
                "r",
                "r\" - `curator`: The curator account whom will manage this bounty.",
                "r\" - `fee`: The curator fee.",
                "r\" - `value`: The total payment amount of this bounty, curator fee included.",
                "r\" - `description`: The description of this bounty."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 0,
              "name": "propose_bounty"
            },
            {
              "docs": [
                "r\" Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                "r\" and the original deposit will be returned.",
                "r",
                "r\" May only be called from `T::ApproveOrigin`.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - O(1).",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 1,
              "name": "approve_bounty"
            },
            {
              "docs": [
                "r\" Assign a curator to a funded bounty.",
                "r",
                "r\" May only be called from `T::ApproveOrigin`.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - O(1).",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "BountyIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "propose_curator"
            },
            {
              "docs": [
                "r\" Unassign curator from a bounty.",
                "r",
                "r\" This function can only be called by the `RejectOrigin` a signed origin.",
                "r",
                "r\" If this function is called by the `RejectOrigin`, we assume that the curator is malicious",
                "r\" or inactive. As a result, we will slash the curator when possible.",
                "r",
                "r\" If the origin is the curator, we take this as a sign they are unable to do their job and",
                "r\" they willingly give up. We could slash them, but for now we allow them to recover their",
                "r\" deposit and exit without issue. (We may want to change this if it is abused.)",
                "r",
                "r#\" Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows\"#",
                "r\" anyone in the community to call out that a curator is not doing their due diligence, and",
                "r\" we should pick a new curator. In this case the curator should also be slashed.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - O(1).",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 3,
              "name": "unassign_curator"
            },
            {
              "docs": [
                "r\" Accept the curator role for a bounty.",
                "r\" A deposit will be reserved from curator and refund upon successful payout.",
                "r",
                "r\" May only be called from the curator.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - O(1).",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 4,
              "name": "accept_curator"
            },
            {
              "docs": [
                "r\" Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay.",
                "r",
                "r\" The dispatch origin for this call must be the curator of this bounty.",
                "r",
                "r\" - `bounty_id`: Bounty ID to award.",
                "r\" - `beneficiary`: The beneficiary account whom will receive the payout.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - O(1).",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "BountyIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 5,
              "name": "award_bounty"
            },
            {
              "docs": [
                "r\" Claim the payout from an awarded bounty after payout delay.",
                "r",
                "r\" The dispatch origin for this call must be the beneficiary of this bounty.",
                "r",
                "r\" - `bounty_id`: Bounty ID to claim.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - O(1).",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 6,
              "name": "claim_bounty"
            },
            {
              "docs": [
                "r\" Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                "r\" the curator deposit will be unreserved if possible.",
                "r",
                "r\" Only `T::RejectOrigin` is able to cancel a bounty.",
                "r",
                "r\" - `bounty_id`: Bounty ID to cancel.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - O(1).",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "BountyIndex"
                }
              ],
              "index": 7,
              "name": "close_bounty"
            },
            {
              "docs": [
                "r\" Extend the expiry time of an active bounty.",
                "r",
                "r\" The dispatch origin for this call must be the curator of this bounty.",
                "r",
                "r\" - `bounty_id`: Bounty ID to extend.",
                "r\" - `remark`: additional information.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - O(1).",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "BountyIndex"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 8,
              "name": "extend_bounty_expiry"
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_bounties",
        "Call"
      ]
    }
  },
  {
    "id": 296,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "r\" Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_.",
                "r",
                "r\" Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                "r\" `DataDepositPerByte` for each byte in `reason`.",
                "r",
                "r\" - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                "r\"   a UTF-8-encoded URL.",
                "r\" - `who`: The account which should be credited for the tip.",
                "r",
                "r\" Emits `NewTip` if successful.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Complexity: `O(R)` where `R` length of `reason`.",
                "r\"   - encoding and hashing of 'reason'",
                "r\" - DbReads: `Reasons`, `Tips`",
                "r\" - DbWrites: `Reasons`, `Tips`",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                }
              ],
              "index": 0,
              "name": "report_awesome"
            },
            {
              "docs": [
                "r\" Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                "r",
                "r\" If successful, the original deposit will be unreserved.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                "r\" must have been reported by the signing account through `report_awesome` (and not",
                "r\" through `tip_new`).",
                "r",
                "r\" - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "r\"   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                "r",
                "r\" Emits `TipRetracted` if successful.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Complexity: `O(1)`",
                "r\"   - Depends on the length of `T::Hash` which is fixed.",
                "r\" - DbReads: `Tips`, `origin account`",
                "r\" - DbWrites: `Reasons`, `Tips`, `origin account`",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 1,
              "name": "retract_tip"
            },
            {
              "docs": [
                "r\" Give a tip for something new; no finder's fee will be taken.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and the signing account must be a",
                "r\" member of the `Tippers` set.",
                "r",
                "r\" - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                "r\"   a UTF-8-encoded URL.",
                "r\" - `who`: The account which should be credited for the tip.",
                "r\" - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                "r\"   value of active tippers will be given to the `who`.",
                "r",
                "r\" Emits `NewTip` if successful.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                "r\"   - `O(T)`: decoding `Tipper` vec of length `T`",
                "r\"     `T` is charged as upper bound given by `ContainsLengthBound`.",
                "r\"     The actual cost depends on the implementation of `T::Tippers`.",
                "r\"   - `O(R)`: hashing and encoding of reason of length `R`",
                "r\" - DbReads: `Tippers`, `Reasons`",
                "r\" - DbWrites: `Reasons`, `Tips`",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 2,
              "name": "tip_new"
            },
            {
              "docs": [
                "r\" Declare a tip value for an already-open tip.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_ and the signing account must be a",
                "r\" member of the `Tippers` set.",
                "r",
                "r\" - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "r\"   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                "r\"   account ID.",
                "r\" - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                "r\"   value of active tippers will be given to the `who`.",
                "r",
                "r\" Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                "r\" has started.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Complexity: `O(T)` where `T` is the number of tippers.",
                "r\"   decoding `Tipper` vec of length `T`, insert tip and check closing,",
                "r\"   `T` is charged as upper bound given by `ContainsLengthBound`.",
                "r\"   The actual cost depends on the implementation of `T::Tippers`.",
                "r",
                "r\"   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                "r\"   is weighted as if almost full i.e of length `T-1`.",
                "r\" - DbReads: `Tippers`, `Tips`",
                "r\" - DbWrites: `Tips`",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                }
              ],
              "index": 3,
              "name": "tip"
            },
            {
              "docs": [
                "r\" Close and payout a tip.",
                "r",
                "r\" The dispatch origin for this call must be _Signed_.",
                "r",
                "r\" The tip identified by `hash` must have finished its countdown period.",
                "r",
                "r\" - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "r\"   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\" - Complexity: `O(T)` where `T` is the number of tippers.",
                "r\"   decoding `Tipper` vec of length `T`.",
                "r\"   `T` is charged as upper bound given by `ContainsLengthBound`.",
                "r\"   The actual cost depends on the implementation of `T::Tippers`.",
                "r\" - DbReads: `Tips`, `Tippers`, `tip finder`",
                "r\" - DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 4,
              "name": "close_tip"
            },
            {
              "docs": [
                "r\" Remove and slash an already-open tip.",
                "r",
                "r\" May only be called from `T::RejectOrigin`.",
                "r",
                "r\" As a result, the finder is slashed and the deposits are lost.",
                "r",
                "r\" Emits `TipSlashed` if successful.",
                "r",
                "r\" # \u003cweight\u003e",
                "r\"   `T` is charged as upper bound given by `ContainsLengthBound`.",
                "r\"   The actual cost depends on the implementation of `T::Tippers`.",
                "r\" # \u003c/weight\u003e"
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash"
                }
              ],
              "index": 5,
              "name": "slash_tip"
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_tips",
        "Call"
      ]
    }
  },
  {
    "id": 297,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 8,
                  "typeName": "T::Balance"
                }
              ],
              "index": 0,
              "name": "create"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                }
              ],
              "index": 1,
              "name": "force_create"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 298,
                  "typeName": "DestroyWitness"
                }
              ],
              "index": 2,
              "name": "destroy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                }
              ],
              "index": 3,
              "name": "mint"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                }
              ],
              "index": 4,
              "name": "burn"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                }
              ],
              "index": 5,
              "name": "transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                }
              ],
              "index": 6,
              "name": "transfer_keep_alive"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                }
              ],
              "index": 7,
              "name": "force_transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 8,
              "name": "freeze"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 9,
              "name": "thaw"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 10,
              "name": "freeze_asset"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 11,
              "name": "thaw_asset"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 12,
              "name": "transfer_ownership"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 13,
              "name": "set_team"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": "u8"
                }
              ],
              "index": 14,
              "name": "set_metadata"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 15,
              "name": "clear_metadata"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": "u8"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 16,
              "name": "force_set_metadata"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                }
              ],
              "index": 17,
              "name": "force_clear_metadata"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 18,
              "name": "force_asset_status"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                }
              ],
              "index": 19,
              "name": "approve_transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 20,
              "name": "cancel_approval"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 21,
              "name": "force_cancel_approval"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::AssetId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 135,
                  "typeName": "T::Balance"
                }
              ],
              "index": 22,
              "name": "transfer_approved"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_assets",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 298,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The number of accounts holding the asset."
              ],
              "name": "accounts",
              "type": 101,
              "typeName": "u32"
            },
            {
              "docs": [
                "The number of accounts holding the asset with a self-sufficient reference."
              ],
              "name": "sufficients",
              "type": 101,
              "typeName": "u32"
            },
            {
              "docs": [
                "The number of transfer-approvals of the asset."
              ],
              "name": "approvals",
              "type": 101,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "Witness data for the destroy transactions."
      ],
      "params": null,
      "path": [
        "pallet_assets",
        "types",
        "DestroyWitness"
      ]
    }
  },
  {
    "id": 299,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 124,
                  "typeName": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 0,
              "name": "buy_ticket"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 123,
                  "typeName": "Vec\u003c\u003cT as Config\u003e::Call\u003e"
                }
              ],
              "index": 1,
              "name": "set_calls"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 2,
              "name": "start_lottery"
            },
            {
              "docs": null,
              "fields": null,
              "index": 3,
              "name": "stop_repeat"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_lottery",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 300,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 0,
              "name": "place_bid"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 66,
                  "typeName": "BalanceOf\u003cT\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "retract_bid"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 301,
                  "typeName": "Perquintill"
                }
              ],
              "index": 2,
              "name": "set_target"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "ActiveIndex"
                }
              ],
              "index": 3,
              "name": "thaw"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_gilt",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 301,
    "type": {
      "def": {
        "Compact": {
          "type": 302
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 302,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 8,
              "typeName": "u64"
            }
          ]
        }
      },
      "docs": [
        "A fixed point representation of a number in the range [0, 1].",
        "",
        "\"_Parts per Quintillion_"
      ],
      "params": null,
      "path": [
        "sp_arithmetic",
        "per_things",
        "Perquintill"
      ]
    }
  },
  {
    "id": 303,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 0,
              "name": "create"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 1,
              "name": "force_create"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 304,
                  "typeName": "DestroyWitness"
                }
              ],
              "index": 2,
              "name": "destroy"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 3,
              "name": "mint"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 305,
                  "typeName": "Option\u003c\u003cT::Lookup as StaticLookup\u003e::Source\u003e"
                }
              ],
              "index": 4,
              "name": "burn"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 5,
              "name": "transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 92,
                  "typeName": "Vec\u003cT::InstanceId\u003e"
                }
              ],
              "index": 6,
              "name": "redeposit"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                }
              ],
              "index": 7,
              "name": "freeze"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                }
              ],
              "index": 8,
              "name": "thaw"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                }
              ],
              "index": 9,
              "name": "freeze_class"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                }
              ],
              "index": 10,
              "name": "thaw_class"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 11,
              "name": "transfer_ownership"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 12,
              "name": "set_team"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                }
              ],
              "index": 13,
              "name": "approve_transfer"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 305,
                  "typeName": "Option\u003c\u003cT::Lookup as StaticLookup\u003e::Source\u003e"
                }
              ],
              "index": 14,
              "name": "cancel_approval"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": "\u003cT::Lookup as StaticLookup\u003e::Source"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 15,
              "name": "force_asset_status"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 93,
                  "typeName": "Option\u003cT::InstanceId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 94,
                  "typeName": "BoundedVec\u003cu8, T::KeyLimit\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 95,
                  "typeName": "BoundedVec\u003cu8, T::ValueLimit\u003e"
                }
              ],
              "index": 16,
              "name": "set_attribute"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 93,
                  "typeName": "Option\u003cT::InstanceId\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 94,
                  "typeName": "BoundedVec\u003cu8, T::KeyLimit\u003e"
                }
              ],
              "index": 17,
              "name": "clear_attribute"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 91,
                  "typeName": "BoundedVec\u003cu8, T::StringLimit\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 18,
              "name": "set_metadata"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::InstanceId"
                }
              ],
              "index": 19,
              "name": "clear_metadata"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 91,
                  "typeName": "BoundedVec\u003cu8, T::StringLimit\u003e"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 34,
                  "typeName": "bool"
                }
              ],
              "index": 20,
              "name": "set_class_metadata"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 101,
                  "typeName": "T::ClassId"
                }
              ],
              "index": 21,
              "name": "clear_class_metadata"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_uniques",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 304,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The total number of outstanding instances of this asset class."
              ],
              "name": "instances",
              "type": 101,
              "typeName": "u32"
            },
            {
              "docs": [
                "The total number of outstanding instance metadata of this asset class."
              ],
              "name": "instance_metadatas",
              "type": 101,
              "typeName": "u32"
            },
            {
              "docs": [
                "The total number of attributes for this asset class."
              ],
              "name": "attributes",
              "type": 101,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "Witness data for the destroy transactions."
      ],
      "params": null,
      "path": [
        "pallet_uniques",
        "types",
        "DestroyWitness"
      ]
    }
  },
  {
    "id": 305,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 140,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 140
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 306,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                }
              ],
              "index": 0,
              "name": "store"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "u32"
                }
              ],
              "index": 1,
              "name": "renew"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 307,
                  "typeName": "TransactionStorageProof"
                }
              ],
              "index": 2,
              "name": "check_proof"
            }
          ]
        }
      },
      "docs": [
        "r\"Contains one variant per dispatchable that can be called by an extrinsic."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_transaction_storage",
        "pallet",
        "Call"
      ]
    }
  },
  {
    "id": 307,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Data chunk that is proved to exist."
              ],
              "name": "chunk",
              "type": 10,
              "typeName": "Vec\u003cu8\u003e"
            },
            {
              "docs": [
                "Trie nodes that compose the proof."
              ],
              "name": "proof",
              "type": 107,
              "typeName": "Vec\u003cVec\u003cu8\u003e\u003e"
            }
          ]
        }
      },
      "docs": [
        "Holds a chunk of data retrieved from storage along with",
        "a proof that the data was stored at that location in the trie."
      ],
      "params": null,
      "path": [
        "sp_transaction_storage_proof",
        "TransactionStorageProof"
      ]
    }
  },
  {
    "id": 308,
    "type": {
      "def": {
        "Sequence": {
          "type": 309
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 309,
    "type": {
      "def": {
        "Tuple": [
          128,
          8
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 310,
    "type": {
      "def": {
        "Sequence": {
          "type": 1
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 311,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 1,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 1
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 312,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "A constant value that is used in the threshold calculation formula.",
                "Expressed as a rational where the first member of the tuple is the",
                "numerator and the second is the denominator. The rational should",
                "represent a value between 0 and 1.",
                "In the threshold formula calculation, `1 - c` represents the probability",
                "of a slot being empty."
              ],
              "name": "c",
              "type": 132,
              "typeName": "(u64, u64)"
            },
            {
              "docs": [
                "Whether this chain should run with secondary slots, which are assigned",
                "in round-robin manner."
              ],
              "name": "allowed_slots",
              "type": 133,
              "typeName": "AllowedSlots"
            }
          ]
        }
      },
      "docs": [
        "Configuration data used by the BABE consensus engine."
      ],
      "params": null,
      "path": [
        "sp_consensus_babe",
        "BabeEpochConfiguration"
      ]
    }
  },
  {
    "id": 313,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ],
              "fields": null,
              "index": 1,
              "name": "InvalidEquivocationProof"
            },
            {
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ],
              "fields": null,
              "index": 2,
              "name": "InvalidKeyOwnershipProof"
            },
            {
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ],
              "fields": null,
              "index": 3,
              "name": "DuplicateOffenceReport"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_babe",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 314,
    "type": {
      "def": {
        "Sequence": {
          "type": 315
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 315,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber"
                }
              ],
              "index": 0,
              "name": "InclusionHeight"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 9,
                  "typeName": "Hash"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 216,
                  "typeName": "Option\u003cAuthor\u003e"
                }
              ],
              "index": 1,
              "name": "Uncle"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Author",
          "type": 0
        }
      ],
      "path": [
        "pallet_authorship",
        "UncleEntryItem"
      ]
    }
  },
  {
    "id": 316,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "The uncle parent not in the chain."
              ],
              "fields": null,
              "index": 1,
              "name": "InvalidUncleParent"
            },
            {
              "docs": [
                "Uncles already set in the block."
              ],
              "fields": null,
              "index": 2,
              "name": "UnclesAlreadySet"
            },
            {
              "docs": [
                "Too many uncles."
              ],
              "fields": null,
              "index": 3,
              "name": "TooManyUncles"
            },
            {
              "docs": [
                "The uncle is genesis."
              ],
              "fields": null,
              "index": 4,
              "name": "GenesisUncle"
            },
            {
              "docs": [
                "The uncle is too high in chain."
              ],
              "fields": null,
              "index": 5,
              "name": "TooHighUncle"
            },
            {
              "docs": [
                "The uncle is already included."
              ],
              "fields": null,
              "index": 6,
              "name": "UncleAlreadyIncluded"
            },
            {
              "docs": [
                "The uncle isn\\'t recent enough to be included."
              ],
              "fields": null,
              "index": 7,
              "name": "OldUncle"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_authorship",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 317,
    "type": {
      "def": {
        "Tuple": [
          0,
          6,
          34
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 318,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "The index was not already assigned."
              ],
              "fields": null,
              "index": 1,
              "name": "NotAssigned"
            },
            {
              "docs": [
                "The index is assigned to another account."
              ],
              "fields": null,
              "index": 2,
              "name": "NotOwner"
            },
            {
              "docs": [
                "The index was not available."
              ],
              "fields": null,
              "index": 3,
              "name": "InUse"
            },
            {
              "docs": [
                "The source and destination accounts are identical."
              ],
              "fields": null,
              "index": 4,
              "name": "NotTransfer"
            },
            {
              "docs": [
                "The index is permanent and may not be freed/changed."
              ],
              "fields": null,
              "index": 5,
              "name": "Permanent"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_indices",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 319,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 322,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A weakly bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "The length of the vec is not strictly bounded. Decoding a vec with more element that the bound",
        "is accepted, and some method allow to bypass the restriction with warnings."
      ],
      "params": [
        {
          "name": "T",
          "type": 320
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ]
    }
  },
  {
    "id": 320,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "An identifier for this lock. Only one lock may be in existence for each identifier."
              ],
              "name": "id",
              "type": 119,
              "typeName": "LockIdentifier"
            },
            {
              "docs": [
                "The amount which the free balance may not drop below when this lock is in effect."
              ],
              "name": "amount",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "If true, then the lock remains in effect even for payment of transaction fees."
              ],
              "name": "reasons",
              "type": 321,
              "typeName": "Reasons"
            }
          ]
        }
      },
      "docs": [
        "A single lock on a balance. There can be many of these on an account and they \\\"overlap\\\", so the",
        "same balance is frozen by multiple locks."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_balances",
        "BalanceLock"
      ]
    }
  },
  {
    "id": 321,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Paying system transaction fees."
              ],
              "fields": null,
              "index": 0,
              "name": "Fee"
            },
            {
              "docs": [
                "Any reason other than paying system transaction fees."
              ],
              "fields": null,
              "index": 1,
              "name": "Misc"
            },
            {
              "docs": [
                "Any reason at all."
              ],
              "fields": null,
              "index": 2,
              "name": "All"
            }
          ]
        }
      },
      "docs": [
        "Simplified reasons for withdrawing balance."
      ],
      "params": null,
      "path": [
        "pallet_balances",
        "Reasons"
      ]
    }
  },
  {
    "id": 322,
    "type": {
      "def": {
        "Sequence": {
          "type": 320
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 323,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 325,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 324
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 324,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The identifier for the named reserve."
              ],
              "name": "id",
              "type": 119,
              "typeName": "ReserveIdentifier"
            },
            {
              "docs": [
                "The amount of the named reserve."
              ],
              "name": "amount",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "Store named reserved balance."
      ],
      "params": [
        {
          "name": "ReserveIdentifier",
          "type": 119
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_balances",
        "ReserveData"
      ]
    }
  },
  {
    "id": 325,
    "type": {
      "def": {
        "Sequence": {
          "type": 324
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 326,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "V1_0_0"
            },
            {
              "docs": null,
              "fields": null,
              "index": 1,
              "name": "V2_0_0"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "pallet_balances",
        "Releases"
      ]
    }
  },
  {
    "id": 327,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Vesting balance too high to send value"
              ],
              "fields": null,
              "index": 1,
              "name": "VestingBalance"
            },
            {
              "docs": [
                "Account liquidity restrictions prevent withdrawal"
              ],
              "fields": null,
              "index": 2,
              "name": "LiquidityRestrictions"
            },
            {
              "docs": [
                "Balance too low to send value"
              ],
              "fields": null,
              "index": 3,
              "name": "InsufficientBalance"
            },
            {
              "docs": [
                "Value too low to create account due to existential deposit"
              ],
              "fields": null,
              "index": 4,
              "name": "ExistentialDeposit"
            },
            {
              "docs": [
                "Transfer/payment would kill account"
              ],
              "fields": null,
              "index": 5,
              "name": "KeepAlive"
            },
            {
              "docs": [
                "A vesting schedule already exists for this account"
              ],
              "fields": null,
              "index": 6,
              "name": "ExistingVestingSchedule"
            },
            {
              "docs": [
                "Beneficiary account must pre-exist"
              ],
              "fields": null,
              "index": 7,
              "name": "DeadAccount"
            },
            {
              "docs": [
                "Number of named reserves exceed MaxReserves"
              ],
              "fields": null,
              "index": 8,
              "name": "TooManyReserves"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_balances",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 328,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 6,
              "typeName": "u128"
            }
          ]
        }
      },
      "docs": [
        "A fixed point number representation in the range.",
        "",
        "\"_Fixed Point 128 bits unsigned, range = \\\n\t\t[0.000000000000000000, 340282366920938463463.374607431768211455]_"
      ],
      "params": null,
      "path": [
        "sp_arithmetic",
        "fixed_point",
        "FixedU128"
      ]
    }
  },
  {
    "id": 329,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Original version of the pallet."
              ],
              "fields": null,
              "index": 0,
              "name": "V1Ancient"
            },
            {
              "docs": [
                "One that bumps the usage to FixedU128 from FixedI128."
              ],
              "fields": null,
              "index": 1,
              "name": "V2"
            }
          ]
        }
      },
      "docs": [
        "Storage releases of the pallet."
      ],
      "params": null,
      "path": [
        "pallet_transaction_payment",
        "Releases"
      ]
    }
  },
  {
    "id": 330,
    "type": {
      "def": {
        "Sequence": {
          "type": 331
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 331,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The integral part of the coefficient."
              ],
              "name": "coeff_integer",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The fractional part of the coefficient."
              ],
              "name": "coeff_frac",
              "type": 104,
              "typeName": "Perbill"
            },
            {
              "docs": [
                "True iff the coefficient should be interpreted as negative."
              ],
              "name": "negative",
              "type": 34,
              "typeName": "bool"
            },
            {
              "docs": [
                "Degree/exponent of the term."
              ],
              "name": "degree",
              "type": 2,
              "typeName": "u8"
            }
          ]
        }
      },
      "docs": [
        "One coefficient and its position in the `WeightToFeePolynomial`.",
        "",
        "One term of polynomial is calculated as:",
        "",
        "```ignore",
        "coeff_integer * x^(degree) + coeff_frac * x^(degree)",
        "```",
        "",
        "The `negative` value encodes whether the term is added or substracted from the",
        "overall polynomial result."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "frame_support",
        "weights",
        "WeightToFeeCoefficient"
      ]
    }
  },
  {
    "id": 332,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Nothing, the election is not happening."
              ],
              "fields": null,
              "index": 0,
              "name": "Off"
            },
            {
              "docs": [
                "Signed phase is open."
              ],
              "fields": null,
              "index": 1,
              "name": "Signed"
            },
            {
              "docs": [
                "Unsigned phase. First element is whether it is active or not, second the starting block",
                "number.",
                "",
                "We do not yet check whether the unsigned phase is active or passive. The intent is for the",
                "blockchain to be able to declare: \\\"I believe that there exists an adequate signed solution,\\",
                "advising validators not to bother running the unsigned offchain worker.",
                "",
                "As validator nodes are free to edit their OCW code, they could simply ignore this advisory",
                "and always compute their own solution. However, by default, when the unsigned phase is",
                "passive, the offchain workers will not bother running."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 333,
                  "typeName": "(bool, Bn)"
                }
              ],
              "index": 2,
              "name": "Unsigned"
            },
            {
              "docs": [
                "The emergency phase. This is enabled upon a failing call to `T::ElectionProvider::elect`.",
                "After that, the only way to leave this phase is through a successful",
                "`T::ElectionProvider::elect`."
              ],
              "fields": null,
              "index": 3,
              "name": "Emergency"
            }
          ]
        }
      },
      "docs": [
        "Current phase of the pallet."
      ],
      "params": [
        {
          "name": "Bn",
          "type": 4
        }
      ],
      "path": [
        "pallet_election_provider_multi_phase",
        "Phase"
      ]
    }
  },
  {
    "id": 333,
    "type": {
      "def": {
        "Tuple": [
          34,
          4
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 334,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The final supports of the solution.",
                "",
                "This is target-major vector, storing each winners, total backing, and each individual",
                "backer."
              ],
              "name": "supports",
              "type": 198,
              "typeName": "Supports\u003cA\u003e"
            },
            {
              "docs": [
                "The score of the solution.",
                "",
                "This is needed to potentially challenge the solution."
              ],
              "name": "score",
              "type": 195,
              "typeName": "ElectionScore"
            },
            {
              "docs": [
                "How this election was computed."
              ],
              "name": "compute",
              "type": 33,
              "typeName": "ElectionCompute"
            }
          ]
        }
      },
      "docs": [
        "A checked solution, ready to be enacted."
      ],
      "params": [
        {
          "name": "A",
          "type": 0
        }
      ],
      "path": [
        "pallet_election_provider_multi_phase",
        "ReadySolution"
      ]
    }
  },
  {
    "id": 335,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "All of the voters."
              ],
              "name": "voters",
              "type": 336,
              "typeName": "Vec\u003c(A, VoteWeight, Vec\u003cA\u003e)\u003e"
            },
            {
              "docs": [
                "All of the targets."
              ],
              "name": "targets",
              "type": 39,
              "typeName": "Vec\u003cA\u003e"
            }
          ]
        }
      },
      "docs": [
        "A snapshot of all the data that is needed for en entire round. They are provided by",
        "[`ElectionDataProvider`] and are kept around until the round is finished.",
        "",
        "These are stored together because they are often accessed together."
      ],
      "params": [
        {
          "name": "A",
          "type": 0
        }
      ],
      "path": [
        "pallet_election_provider_multi_phase",
        "RoundSnapshot"
      ]
    }
  },
  {
    "id": 336,
    "type": {
      "def": {
        "Sequence": {
          "type": 337
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 337,
    "type": {
      "def": {
        "Tuple": [
          0,
          8,
          39
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 338,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 339,
              "typeName": "BTreeMap\u003cK, V\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded map based on a B-Tree.",
        "",
        "B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing",
        "the amount of work performed in a search. See [`BTreeMap`] for more details.",
        "",
        "Unlike a standard `BTreeMap`, there is an enforced upper limit to the number of items in the",
        "map. All internal operations ensure this bound is respected."
      ],
      "params": [
        {
          "name": "K",
          "type": 195
        },
        {
          "name": "V",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_btree_map",
        "BoundedBTreeMap"
      ]
    }
  },
  {
    "id": 339,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 340,
              "typeName": null
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "K",
          "type": 195
        },
        {
          "name": "V",
          "type": 4
        }
      ],
      "path": [
        "BTreeMap"
      ]
    }
  },
  {
    "id": 340,
    "type": {
      "def": {
        "Sequence": {
          "type": 341
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 341,
    "type": {
      "def": {
        "Tuple": [
          195,
          4
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 342,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Who submitted this solution."
              ],
              "name": "who",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The deposit reserved for storing this solution."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The raw solution itself."
              ],
              "name": "solution",
              "type": 143,
              "typeName": "RawSolution\u003cCompactSolution\u003e"
            }
          ]
        }
      },
      "docs": [
        "A raw, unchecked signed submission.",
        "",
        "This is just a wrapper around [`RawSolution`] and some additional info."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "CompactSolution",
          "type": 144
        }
      ],
      "path": [
        "pallet_election_provider_multi_phase",
        "signed",
        "SignedSubmission"
      ]
    }
  },
  {
    "id": 343,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Submission was too early."
              ],
              "fields": null,
              "index": 1,
              "name": "PreDispatchEarlySubmission"
            },
            {
              "docs": [
                "Wrong number of winners presented."
              ],
              "fields": null,
              "index": 2,
              "name": "PreDispatchWrongWinnerCount"
            },
            {
              "docs": [
                "Submission was too weak, score-wise."
              ],
              "fields": null,
              "index": 3,
              "name": "PreDispatchWeakSubmission"
            },
            {
              "docs": [
                "The queue was full, and the solution was not better than any of the existing ones."
              ],
              "fields": null,
              "index": 4,
              "name": "SignedQueueFull"
            },
            {
              "docs": [
                "The origin failed to pay the deposit."
              ],
              "fields": null,
              "index": 5,
              "name": "SignedCannotPayDeposit"
            },
            {
              "docs": [
                "Witness data to dispatchable is invalid."
              ],
              "fields": null,
              "index": 6,
              "name": "SignedInvalidWitness"
            },
            {
              "docs": [
                "The signed submission consumes too much weight"
              ],
              "fields": null,
              "index": 7,
              "name": "SignedTooMuchWeight"
            },
            {
              "docs": [
                "OCW submitted solution for wrong round"
              ],
              "fields": null,
              "index": 8,
              "name": "OcwCallWrongEra"
            },
            {
              "docs": [
                "Snapshot metadata should exist but didn\\'t."
              ],
              "fields": null,
              "index": 9,
              "name": "MissingSnapshotMetadata"
            },
            {
              "docs": [
                "`Self::insert_submission` returned an invalid index."
              ],
              "fields": null,
              "index": 10,
              "name": "InvalidSubmissionIndex"
            },
            {
              "docs": [
                "The call is not allowed at this point."
              ],
              "fields": null,
              "index": 11,
              "name": "CallNotAllowed"
            }
          ]
        }
      },
      "docs": [
        "Error of the pallet that can be returned in response to dispatches.",
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 344,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The stash account whose balance is actually locked and at stake."
              ],
              "name": "stash",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The total amount of the stash\\'s balance that we are currently accounting for.",
                "It\\'s just `active` plus all the `unlocking` balances."
              ],
              "name": "total",
              "type": 66,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The total amount of the stash\\'s balance that will be at stake in any forthcoming",
                "rounds."
              ],
              "name": "active",
              "type": 66,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Any balance that is becoming free, which may eventually be transferred out",
                "of the stash (assuming it doesn\\'t get slashed first)."
              ],
              "name": "unlocking",
              "type": 345,
              "typeName": "Vec\u003cUnlockChunk\u003cBalance\u003e\u003e"
            },
            {
              "docs": [
                "List of eras for which the stakers behind a validator have claimed rewards. Only updated",
                "for validators."
              ],
              "name": "claimed_rewards",
              "type": 92,
              "typeName": "Vec\u003cEraIndex\u003e"
            }
          ]
        }
      },
      "docs": [
        "The ledger of a (bonded) stash."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_staking",
        "StakingLedger"
      ]
    }
  },
  {
    "id": 345,
    "type": {
      "def": {
        "Sequence": {
          "type": 346
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 346,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Amount of funds to be unlocked."
              ],
              "name": "value",
              "type": 66,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Era number at which point it\\'ll be unlocked."
              ],
              "name": "era",
              "type": 101,
              "typeName": "EraIndex"
            }
          ]
        }
      },
      "docs": [
        "Just a Balance/BlockNumber tuple to encode when a chunk of funds will be unlocked."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_staking",
        "UnlockChunk"
      ]
    }
  },
  {
    "id": 347,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The targets of nomination."
              ],
              "name": "targets",
              "type": 39,
              "typeName": "Vec\u003cAccountId\u003e"
            },
            {
              "docs": [
                "The era the nominations were submitted.",
                "",
                "Except for initial nominations which are considered submitted at era 0."
              ],
              "name": "submitted_in",
              "type": 4,
              "typeName": "EraIndex"
            },
            {
              "docs": [
                "Whether the nominations have been suppressed. This can happen due to slashing of the",
                "validators, or other events that might invalidate the nomination.",
                "",
                "NOTE: this for future proofing and is thus far not used."
              ],
              "name": "suppressed",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": [
        "A record of the nominations made by a specific account."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_staking",
        "Nominations"
      ]
    }
  },
  {
    "id": 348,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Index of era."
              ],
              "name": "index",
              "type": 4,
              "typeName": "EraIndex"
            },
            {
              "docs": [
                "Moment of start expressed as millisecond from `$UNIX_EPOCH`.",
                "",
                "Start can be none if start hasn\\'t been set for the era yet,",
                "Start is set on the first on_finalize of the era to guarantee usage of `Time`."
              ],
              "name": "start",
              "type": 111,
              "typeName": "Option\u003cu64\u003e"
            }
          ]
        }
      },
      "docs": [
        "Information regarding the active era (era in used in session)."
      ],
      "params": null,
      "path": [
        "pallet_staking",
        "ActiveEraInfo"
      ]
    }
  },
  {
    "id": 349,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Total number of points. Equals the sum of reward points for each validator."
              ],
              "name": "total",
              "type": 4,
              "typeName": "RewardPoint"
            },
            {
              "docs": [
                "The reward points earned by a given validator."
              ],
              "name": "individual",
              "type": 350,
              "typeName": "BTreeMap\u003cAccountId, RewardPoint\u003e"
            }
          ]
        }
      },
      "docs": [
        "Reward points of an era. Used to split era total payout between validators.",
        "",
        "This points will be used to reward validators and their respective nominators."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_staking",
        "EraRewardPoints"
      ]
    }
  },
  {
    "id": 350,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 351,
              "typeName": null
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "K",
          "type": 0
        },
        {
          "name": "V",
          "type": 4
        }
      ],
      "path": [
        "BTreeMap"
      ]
    }
  },
  {
    "id": 351,
    "type": {
      "def": {
        "Sequence": {
          "type": 352
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 352,
    "type": {
      "def": {
        "Tuple": [
          0,
          4
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 353,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Not forcing anything - just let whatever happen."
              ],
              "fields": null,
              "index": 0,
              "name": "NotForcing"
            },
            {
              "docs": [
                "Force a new era, then reset to `NotForcing` as soon as it is done.",
                "Note that this will force to trigger an election until a new era is triggered, if the",
                "election failed, the next session end will trigger a new election again, until success."
              ],
              "fields": null,
              "index": 1,
              "name": "ForceNew"
            },
            {
              "docs": [
                "Avoid a new era indefinitely."
              ],
              "fields": null,
              "index": 2,
              "name": "ForceNone"
            },
            {
              "docs": [
                "Force a new era at the end of all sessions indefinitely."
              ],
              "fields": null,
              "index": 3,
              "name": "ForceAlways"
            }
          ]
        }
      },
      "docs": [
        "Mode of era-forcing."
      ],
      "params": null,
      "path": [
        "pallet_staking",
        "Forcing"
      ]
    }
  },
  {
    "id": 354,
    "type": {
      "def": {
        "Sequence": {
          "type": 355
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 355,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The stash ID of the offending validator."
              ],
              "name": "validator",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The validator\\'s own slash."
              ],
              "name": "own",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "All other slashed stakers and amounts."
              ],
              "name": "others",
              "type": 48,
              "typeName": "Vec\u003c(AccountId, Balance)\u003e"
            },
            {
              "docs": [
                "Reporters of the offence; bounty payout recipients."
              ],
              "name": "reporters",
              "type": 39,
              "typeName": "Vec\u003cAccountId\u003e"
            },
            {
              "docs": [
                "The amount of payout."
              ],
              "name": "payout",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "A pending slash record. The value of the slash has been computed but not applied yet,",
        "rather deferred for several eras."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_staking",
        "UnappliedSlash"
      ]
    }
  },
  {
    "id": 356,
    "type": {
      "def": {
        "Tuple": [
          104,
          6
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 357,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "span_index",
              "type": 4,
              "typeName": "SpanIndex"
            },
            {
              "docs": null,
              "name": "last_start",
              "type": 4,
              "typeName": "EraIndex"
            },
            {
              "docs": null,
              "name": "last_nonzero_slash",
              "type": 4,
              "typeName": "EraIndex"
            },
            {
              "docs": null,
              "name": "prior",
              "type": 92,
              "typeName": "Vec\u003cEraIndex\u003e"
            }
          ]
        }
      },
      "docs": [
        "An encoding of all of a nominator\\'s slashing spans."
      ],
      "params": null,
      "path": [
        "pallet_staking",
        "slashing",
        "SlashingSpans"
      ]
    }
  },
  {
    "id": 358,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "slashed",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": null,
              "name": "paid_out",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "A slashing-span record for a particular stash."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_staking",
        "slashing",
        "SpanRecord"
      ]
    }
  },
  {
    "id": 359,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "V1_0_0Ancient"
            },
            {
              "docs": null,
              "fields": null,
              "index": 1,
              "name": "V2_0_0"
            },
            {
              "docs": null,
              "fields": null,
              "index": 2,
              "name": "V3_0_0"
            },
            {
              "docs": null,
              "fields": null,
              "index": 3,
              "name": "V4_0_0"
            },
            {
              "docs": null,
              "fields": null,
              "index": 4,
              "name": "V5_0_0"
            },
            {
              "docs": null,
              "fields": null,
              "index": 5,
              "name": "V6_0_0"
            },
            {
              "docs": null,
              "fields": null,
              "index": 6,
              "name": "V7_0_0"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "pallet_staking",
        "Releases"
      ]
    }
  },
  {
    "id": 360,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Not a controller account."
              ],
              "fields": null,
              "index": 1,
              "name": "NotController"
            },
            {
              "docs": [
                "Not a stash account."
              ],
              "fields": null,
              "index": 2,
              "name": "NotStash"
            },
            {
              "docs": [
                "Stash is already bonded."
              ],
              "fields": null,
              "index": 3,
              "name": "AlreadyBonded"
            },
            {
              "docs": [
                "Controller is already paired."
              ],
              "fields": null,
              "index": 4,
              "name": "AlreadyPaired"
            },
            {
              "docs": [
                "Targets cannot be empty."
              ],
              "fields": null,
              "index": 5,
              "name": "EmptyTargets"
            },
            {
              "docs": [
                "Duplicate index."
              ],
              "fields": null,
              "index": 6,
              "name": "DuplicateIndex"
            },
            {
              "docs": [
                "Slash record index out of bounds."
              ],
              "fields": null,
              "index": 7,
              "name": "InvalidSlashIndex"
            },
            {
              "docs": [
                "Can not bond with value less than minimum required."
              ],
              "fields": null,
              "index": 8,
              "name": "InsufficientBond"
            },
            {
              "docs": [
                "Can not schedule more unlock chunks."
              ],
              "fields": null,
              "index": 9,
              "name": "NoMoreChunks"
            },
            {
              "docs": [
                "Can not rebond without unlocking chunks."
              ],
              "fields": null,
              "index": 10,
              "name": "NoUnlockChunk"
            },
            {
              "docs": [
                "Attempting to target a stash that still has funds."
              ],
              "fields": null,
              "index": 11,
              "name": "FundedTarget"
            },
            {
              "docs": [
                "Invalid era to reward."
              ],
              "fields": null,
              "index": 12,
              "name": "InvalidEraToReward"
            },
            {
              "docs": [
                "Invalid number of nominations."
              ],
              "fields": null,
              "index": 13,
              "name": "InvalidNumberOfNominations"
            },
            {
              "docs": [
                "Items are not sorted and unique."
              ],
              "fields": null,
              "index": 14,
              "name": "NotSortedAndUnique"
            },
            {
              "docs": [
                "Rewards for this era have already been claimed for this validator."
              ],
              "fields": null,
              "index": 15,
              "name": "AlreadyClaimed"
            },
            {
              "docs": [
                "Incorrect previous history depth input provided."
              ],
              "fields": null,
              "index": 16,
              "name": "IncorrectHistoryDepth"
            },
            {
              "docs": [
                "Incorrect number of slashing spans provided."
              ],
              "fields": null,
              "index": 17,
              "name": "IncorrectSlashingSpans"
            },
            {
              "docs": [
                "Internal state has become somehow corrupted and the operation cannot continue."
              ],
              "fields": null,
              "index": 18,
              "name": "BadState"
            },
            {
              "docs": [
                "Too many nomination targets supplied."
              ],
              "fields": null,
              "index": 19,
              "name": "TooManyTargets"
            },
            {
              "docs": [
                "A nomination target was supplied that was blocked or otherwise not a validator."
              ],
              "fields": null,
              "index": 20,
              "name": "BadTarget"
            },
            {
              "docs": [
                "The user has enough bond and thus cannot be chilled forcefully by an external person."
              ],
              "fields": null,
              "index": 21,
              "name": "CannotChillOther"
            },
            {
              "docs": [
                "There are too many nominators in the system. Governance needs to adjust the staking settings",
                "to keep things safe for the runtime."
              ],
              "fields": null,
              "index": 22,
              "name": "TooManyNominators"
            },
            {
              "docs": [
                "There are too many validators in the system. Governance needs to adjust the staking settings",
                "to keep things safe for the runtime."
              ],
              "fields": null,
              "index": 23,
              "name": "TooManyValidators"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_staking",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 361,
    "type": {
      "def": {
        "Sequence": {
          "type": 362
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 362,
    "type": {
      "def": {
        "Tuple": [
          0,
          209
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 363,
    "type": {
      "def": {
        "Tuple": [
          364,
          10
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 364,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 14,
              "typeName": "[u8; 4]"
            }
          ]
        }
      },
      "docs": [
        "An identifier for a type of cryptographic key.",
        "",
        "To avoid clashes with other modules when distributing your module publicly, register your",
        "`KeyTypeId` on the list here by making a PR.",
        "",
        "Values whose first character is `_` are reserved for private use and won\\'t conflict with any",
        "public modules."
      ],
      "params": null,
      "path": [
        "sp_core",
        "crypto",
        "KeyTypeId"
      ]
    }
  },
  {
    "id": 365,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "$crate::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "r\" Invalid ownership proof."
              ],
              "fields": null,
              "index": 1,
              "name": "InvalidProof"
            },
            {
              "docs": [
                "r\" No associated validator ID for account."
              ],
              "fields": null,
              "index": 2,
              "name": "NoAssociatedValidatorId"
            },
            {
              "docs": [
                "r\" Registered duplicate key."
              ],
              "fields": null,
              "index": 3,
              "name": "DuplicatedKey"
            },
            {
              "docs": [
                "r\" No keys are associated with this account."
              ],
              "fields": null,
              "index": 4,
              "name": "NoKeys"
            },
            {
              "docs": [
                "r\" Key setting account is not live, so it's impossible to associate keys."
              ],
              "fields": null,
              "index": 5,
              "name": "NoAccount"
            }
          ]
        }
      },
      "docs": [
        "r\" Error for the session module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_session",
        "Error"
      ]
    }
  },
  {
    "id": 366,
    "type": {
      "def": {
        "Sequence": {
          "type": 367
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 367,
    "type": {
      "def": {
        "Tuple": [
          4,
          9,
          0
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 368,
    "type": {
      "def": {
        "Tuple": [
          39,
          6
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 369,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The preimage is imminently needed at the argument."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber"
                }
              ],
              "index": 0,
              "name": "Missing"
            },
            {
              "docs": [
                "The preimage is available."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": "data",
                  "type": 10,
                  "typeName": "Vec\u003cu8\u003e"
                },
                {
                  "docs": null,
                  "name": "provider",
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance"
                },
                {
                  "docs": null,
                  "name": "since",
                  "type": 4,
                  "typeName": "BlockNumber"
                },
                {
                  "docs": [
                    "None if it\\'s not imminent."
                  ],
                  "name": "expiry",
                  "type": 93,
                  "typeName": "Option\u003cBlockNumber\u003e"
                }
              ],
              "index": 1,
              "name": "Available"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_democracy",
        "PreimageStatus"
      ]
    }
  },
  {
    "id": 370,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Referendum is happening, the arg is the block number at which it will end."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 371,
                  "typeName": "ReferendumStatus\u003cBlockNumber, Hash, Balance\u003e"
                }
              ],
              "index": 0,
              "name": "Ongoing"
            },
            {
              "docs": [
                "Referendum finished at `end`, and has been `approved` or rejected."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": "approved",
                  "type": 34,
                  "typeName": "bool"
                },
                {
                  "docs": null,
                  "name": "end",
                  "type": 4,
                  "typeName": "BlockNumber"
                }
              ],
              "index": 1,
              "name": "Finished"
            }
          ]
        }
      },
      "docs": [
        "Info regarding a referendum, present or past."
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_democracy",
        "types",
        "ReferendumInfo"
      ]
    }
  },
  {
    "id": 371,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "When voting on this referendum will end."
              ],
              "name": "end",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "The hash of the proposal being voted on."
              ],
              "name": "proposal_hash",
              "type": 9,
              "typeName": "Hash"
            },
            {
              "docs": [
                "The thresholding mechanism to determine whether it passed."
              ],
              "name": "threshold",
              "type": 40,
              "typeName": "VoteThreshold"
            },
            {
              "docs": [
                "The delay (in blocks) to wait after a successful referendum before deploying."
              ],
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "The current tally of votes in this referendum."
              ],
              "name": "tally",
              "type": 372,
              "typeName": "Tally\u003cBalance\u003e"
            }
          ]
        }
      },
      "docs": [
        "Info regarding an ongoing referendum."
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_democracy",
        "types",
        "ReferendumStatus"
      ]
    }
  },
  {
    "id": 372,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The number of aye votes, expressed in terms of post-conviction lock-vote."
              ],
              "name": "ayes",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The number of nay votes, expressed in terms of post-conviction lock-vote."
              ],
              "name": "nays",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount of funds currently expressing its opinion. Pre-conviction."
              ],
              "name": "turnout",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "Info regarding an ongoing referendum."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_democracy",
        "types",
        "Tally"
      ]
    }
  },
  {
    "id": 373,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The account is voting directly. `delegations` is the total amount of post-conviction voting",
                "weight that it controls from those that have delegated to it."
              ],
              "fields": [
                {
                  "docs": [
                    "The current votes of the account."
                  ],
                  "name": "votes",
                  "type": 374,
                  "typeName": "Vec\u003c(ReferendumIndex, AccountVote\u003cBalance\u003e)\u003e"
                },
                {
                  "docs": [
                    "The total amount of delegations that this account has received."
                  ],
                  "name": "delegations",
                  "type": 376,
                  "typeName": "Delegations\u003cBalance\u003e"
                },
                {
                  "docs": [
                    "Any pre-existing locks from past voting/delegating activity."
                  ],
                  "name": "prior",
                  "type": 377,
                  "typeName": "PriorLock\u003cBlockNumber, Balance\u003e"
                }
              ],
              "index": 0,
              "name": "Direct"
            },
            {
              "docs": [
                "The account is delegating `balance` of its balance to a `target` account with `conviction`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": "balance",
                  "type": 6,
                  "typeName": "Balance"
                },
                {
                  "docs": null,
                  "name": "target",
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": "conviction",
                  "type": 214,
                  "typeName": "Conviction"
                },
                {
                  "docs": [
                    "The total amount of delegations that this account has received."
                  ],
                  "name": "delegations",
                  "type": 376,
                  "typeName": "Delegations\u003cBalance\u003e"
                },
                {
                  "docs": [
                    "Any pre-existing locks from past voting/delegating activity."
                  ],
                  "name": "prior",
                  "type": 377,
                  "typeName": "PriorLock\u003cBlockNumber, Balance\u003e"
                }
              ],
              "index": 1,
              "name": "Delegating"
            }
          ]
        }
      },
      "docs": [
        "An indicator for what an account is doing; it can either be delegating or voting."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_democracy",
        "vote",
        "Voting"
      ]
    }
  },
  {
    "id": 374,
    "type": {
      "def": {
        "Sequence": {
          "type": 375
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 375,
    "type": {
      "def": {
        "Tuple": [
          4,
          212
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 376,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The number of votes (this is post-conviction)."
              ],
              "name": "votes",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount of raw capital, used for the turnout."
              ],
              "name": "capital",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "Amount of votes and capital placed in delegation for an account."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_democracy",
        "types",
        "Delegations"
      ]
    }
  },
  {
    "id": 377,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": null,
              "name": null,
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "A \\\"prior\\\" lock, i.e. a lock for some now-forgotten reason."
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_democracy",
        "vote",
        "PriorLock"
      ]
    }
  },
  {
    "id": 378,
    "type": {
      "def": {
        "Tuple": [
          9,
          40
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 379,
    "type": {
      "def": {
        "Tuple": [
          4,
          39
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 380,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "V1"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "pallet_democracy",
        "Releases"
      ]
    }
  },
  {
    "id": 381,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Value too low"
              ],
              "fields": null,
              "index": 1,
              "name": "ValueLow"
            },
            {
              "docs": [
                "Proposal does not exist"
              ],
              "fields": null,
              "index": 2,
              "name": "ProposalMissing"
            },
            {
              "docs": [
                "Unknown index"
              ],
              "fields": null,
              "index": 3,
              "name": "BadIndex"
            },
            {
              "docs": [
                "Cannot cancel the same proposal twice"
              ],
              "fields": null,
              "index": 4,
              "name": "AlreadyCanceled"
            },
            {
              "docs": [
                "Proposal already made"
              ],
              "fields": null,
              "index": 5,
              "name": "DuplicateProposal"
            },
            {
              "docs": [
                "Proposal still blacklisted"
              ],
              "fields": null,
              "index": 6,
              "name": "ProposalBlacklisted"
            },
            {
              "docs": [
                "Next external proposal not simple majority"
              ],
              "fields": null,
              "index": 7,
              "name": "NotSimpleMajority"
            },
            {
              "docs": [
                "Invalid hash"
              ],
              "fields": null,
              "index": 8,
              "name": "InvalidHash"
            },
            {
              "docs": [
                "No external proposal"
              ],
              "fields": null,
              "index": 9,
              "name": "NoProposal"
            },
            {
              "docs": [
                "Identity may not veto a proposal twice"
              ],
              "fields": null,
              "index": 10,
              "name": "AlreadyVetoed"
            },
            {
              "docs": [
                "Not delegated"
              ],
              "fields": null,
              "index": 11,
              "name": "NotDelegated"
            },
            {
              "docs": [
                "Preimage already noted"
              ],
              "fields": null,
              "index": 12,
              "name": "DuplicatePreimage"
            },
            {
              "docs": [
                "Not imminent"
              ],
              "fields": null,
              "index": 13,
              "name": "NotImminent"
            },
            {
              "docs": [
                "Too early"
              ],
              "fields": null,
              "index": 14,
              "name": "TooEarly"
            },
            {
              "docs": [
                "Imminent"
              ],
              "fields": null,
              "index": 15,
              "name": "Imminent"
            },
            {
              "docs": [
                "Preimage not found"
              ],
              "fields": null,
              "index": 16,
              "name": "PreimageMissing"
            },
            {
              "docs": [
                "Vote given for invalid referendum"
              ],
              "fields": null,
              "index": 17,
              "name": "ReferendumInvalid"
            },
            {
              "docs": [
                "Invalid preimage"
              ],
              "fields": null,
              "index": 18,
              "name": "PreimageInvalid"
            },
            {
              "docs": [
                "No proposals waiting"
              ],
              "fields": null,
              "index": 19,
              "name": "NoneWaiting"
            },
            {
              "docs": [
                "The target account does not have a lock."
              ],
              "fields": null,
              "index": 20,
              "name": "NotLocked"
            },
            {
              "docs": [
                "The lock on the account to be unlocked has not yet expired."
              ],
              "fields": null,
              "index": 21,
              "name": "NotExpired"
            },
            {
              "docs": [
                "The given account did not vote on the referendum."
              ],
              "fields": null,
              "index": 22,
              "name": "NotVoter"
            },
            {
              "docs": [
                "The actor has no permission to conduct the action."
              ],
              "fields": null,
              "index": 23,
              "name": "NoPermission"
            },
            {
              "docs": [
                "The account is already delegating."
              ],
              "fields": null,
              "index": 24,
              "name": "AlreadyDelegating"
            },
            {
              "docs": [
                "Too high a balance was provided that the account cannot afford."
              ],
              "fields": null,
              "index": 25,
              "name": "InsufficientFunds"
            },
            {
              "docs": [
                "The account is not currently delegating."
              ],
              "fields": null,
              "index": 26,
              "name": "NotDelegating"
            },
            {
              "docs": [
                "The account currently has votes attached to it and the operation cannot succeed until",
                "these are removed, either through `unvote` or `reap_vote`."
              ],
              "fields": null,
              "index": 27,
              "name": "VotesExist"
            },
            {
              "docs": [
                "The instant referendum origin is currently disallowed."
              ],
              "fields": null,
              "index": 28,
              "name": "InstantNotAllowed"
            },
            {
              "docs": [
                "Delegation to oneself makes no sense."
              ],
              "fields": null,
              "index": 29,
              "name": "Nonsense"
            },
            {
              "docs": [
                "Invalid upper bound."
              ],
              "fields": null,
              "index": 30,
              "name": "WrongUpperBound"
            },
            {
              "docs": [
                "Maximum number of votes reached."
              ],
              "fields": null,
              "index": 31,
              "name": "MaxVotesReached"
            },
            {
              "docs": [
                "The provided witness data is wrong."
              ],
              "fields": null,
              "index": 32,
              "name": "InvalidWitness"
            },
            {
              "docs": [
                "Maximum number of proposals reached."
              ],
              "fields": null,
              "index": 33,
              "name": "TooManyProposals"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_democracy",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 382,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 98,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 9
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 383,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The proposal\\'s unique index."
              ],
              "name": "index",
              "type": 4,
              "typeName": "ProposalIndex"
            },
            {
              "docs": [
                "The number of approval votes that are needed to pass the motion."
              ],
              "name": "threshold",
              "type": 4,
              "typeName": "MemberCount"
            },
            {
              "docs": [
                "The current set of voters that approved it."
              ],
              "name": "ayes",
              "type": 39,
              "typeName": "Vec\u003cAccountId\u003e"
            },
            {
              "docs": [
                "The current set of voters that rejected it."
              ],
              "name": "nays",
              "type": 39,
              "typeName": "Vec\u003cAccountId\u003e"
            },
            {
              "docs": [
                "The hard end time of this vote."
              ],
              "name": "end",
              "type": 4,
              "typeName": "BlockNumber"
            }
          ]
        }
      },
      "docs": [
        "Info for keeping track of a motion being voted on."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_collective",
        "Votes"
      ]
    }
  },
  {
    "id": 384,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "$crate::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "r\" Account is not a member"
              ],
              "fields": null,
              "index": 1,
              "name": "NotMember"
            },
            {
              "docs": [
                "r\" Duplicate proposals not allowed"
              ],
              "fields": null,
              "index": 2,
              "name": "DuplicateProposal"
            },
            {
              "docs": [
                "r\" Proposal must exist"
              ],
              "fields": null,
              "index": 3,
              "name": "ProposalMissing"
            },
            {
              "docs": [
                "r\" Mismatched index"
              ],
              "fields": null,
              "index": 4,
              "name": "WrongIndex"
            },
            {
              "docs": [
                "r\" Duplicate vote ignored"
              ],
              "fields": null,
              "index": 5,
              "name": "DuplicateVote"
            },
            {
              "docs": [
                "r\" Members are already initialized!"
              ],
              "fields": null,
              "index": 6,
              "name": "AlreadyInitialized"
            },
            {
              "docs": [
                "r\" The close call was made too early, before the end of the voting."
              ],
              "fields": null,
              "index": 7,
              "name": "TooEarly"
            },
            {
              "docs": [
                "r\" There can only be a maximum of `MaxProposals` active proposals."
              ],
              "fields": null,
              "index": 8,
              "name": "TooManyProposals"
            },
            {
              "docs": [
                "r\" The given weight bound for the proposal was too low."
              ],
              "fields": null,
              "index": 9,
              "name": "WrongProposalWeight"
            },
            {
              "docs": [
                "r\" The given length bound for the proposal was too low."
              ],
              "fields": null,
              "index": 10,
              "name": "WrongProposalLength"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_collective",
        "Error"
      ]
    }
  },
  {
    "id": 385,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 98,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 9
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 386,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "$crate::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "r\" Account is not a member"
              ],
              "fields": null,
              "index": 1,
              "name": "NotMember"
            },
            {
              "docs": [
                "r\" Duplicate proposals not allowed"
              ],
              "fields": null,
              "index": 2,
              "name": "DuplicateProposal"
            },
            {
              "docs": [
                "r\" Proposal must exist"
              ],
              "fields": null,
              "index": 3,
              "name": "ProposalMissing"
            },
            {
              "docs": [
                "r\" Mismatched index"
              ],
              "fields": null,
              "index": 4,
              "name": "WrongIndex"
            },
            {
              "docs": [
                "r\" Duplicate vote ignored"
              ],
              "fields": null,
              "index": 5,
              "name": "DuplicateVote"
            },
            {
              "docs": [
                "r\" Members are already initialized!"
              ],
              "fields": null,
              "index": 6,
              "name": "AlreadyInitialized"
            },
            {
              "docs": [
                "r\" The close call was made too early, before the end of the voting."
              ],
              "fields": null,
              "index": 7,
              "name": "TooEarly"
            },
            {
              "docs": [
                "r\" There can only be a maximum of `MaxProposals` active proposals."
              ],
              "fields": null,
              "index": 8,
              "name": "TooManyProposals"
            },
            {
              "docs": [
                "r\" The given weight bound for the proposal was too low."
              ],
              "fields": null,
              "index": 9,
              "name": "WrongProposalWeight"
            },
            {
              "docs": [
                "r\" The given length bound for the proposal was too low."
              ],
              "fields": null,
              "index": 10,
              "name": "WrongProposalLength"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_collective",
        "Error"
      ]
    }
  },
  {
    "id": 387,
    "type": {
      "def": {
        "Sequence": {
          "type": 388
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 388,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The holder."
              ],
              "name": "who",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The total backing stake."
              ],
              "name": "stake",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount of deposit held on-chain.",
                "",
                "To be unreserved upon renouncing, or slashed upon being a loser."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "A holder of a seat as either a member or a runner-up."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_elections_phragmen",
        "SeatHolder"
      ]
    }
  },
  {
    "id": 389,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The members being backed."
              ],
              "name": "votes",
              "type": 39,
              "typeName": "Vec\u003cAccountId\u003e"
            },
            {
              "docs": [
                "The amount of stake placed on this vote."
              ],
              "name": "stake",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount of deposit reserved for this vote.",
                "",
                "To be unreserved upon removal."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "An active voter."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_elections_phragmen",
        "Voter"
      ]
    }
  },
  {
    "id": 390,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Cannot vote when no candidates or members exist."
              ],
              "fields": null,
              "index": 1,
              "name": "UnableToVote"
            },
            {
              "docs": [
                "Must vote for at least one candidate."
              ],
              "fields": null,
              "index": 2,
              "name": "NoVotes"
            },
            {
              "docs": [
                "Cannot vote more than candidates."
              ],
              "fields": null,
              "index": 3,
              "name": "TooManyVotes"
            },
            {
              "docs": [
                "Cannot vote more than maximum allowed."
              ],
              "fields": null,
              "index": 4,
              "name": "MaximumVotesExceeded"
            },
            {
              "docs": [
                "Cannot vote with stake less than minimum balance."
              ],
              "fields": null,
              "index": 5,
              "name": "LowBalance"
            },
            {
              "docs": [
                "Voter can not pay voting bond."
              ],
              "fields": null,
              "index": 6,
              "name": "UnableToPayBond"
            },
            {
              "docs": [
                "Must be a voter."
              ],
              "fields": null,
              "index": 7,
              "name": "MustBeVoter"
            },
            {
              "docs": [
                "Cannot report self."
              ],
              "fields": null,
              "index": 8,
              "name": "ReportSelf"
            },
            {
              "docs": [
                "Duplicated candidate submission."
              ],
              "fields": null,
              "index": 9,
              "name": "DuplicatedCandidate"
            },
            {
              "docs": [
                "Member cannot re-submit candidacy."
              ],
              "fields": null,
              "index": 10,
              "name": "MemberSubmit"
            },
            {
              "docs": [
                "Runner cannot re-submit candidacy."
              ],
              "fields": null,
              "index": 11,
              "name": "RunnerUpSubmit"
            },
            {
              "docs": [
                "Candidate does not have enough funds."
              ],
              "fields": null,
              "index": 12,
              "name": "InsufficientCandidateFunds"
            },
            {
              "docs": [
                "Not a member."
              ],
              "fields": null,
              "index": 13,
              "name": "NotMember"
            },
            {
              "docs": [
                "The provided count of number of candidates is incorrect."
              ],
              "fields": null,
              "index": 14,
              "name": "InvalidWitnessData"
            },
            {
              "docs": [
                "The provided count of number of votes is incorrect."
              ],
              "fields": null,
              "index": 15,
              "name": "InvalidVoteCount"
            },
            {
              "docs": [
                "The renouncing origin presented a wrong `Renouncing` parameter."
              ],
              "fields": null,
              "index": 16,
              "name": "InvalidRenouncing"
            },
            {
              "docs": [
                "Prediction regarding replacement after member removal is wrong."
              ],
              "fields": null,
              "index": 17,
              "name": "InvalidReplacement"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 391,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "$crate::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "r\" Already a member."
              ],
              "fields": null,
              "index": 1,
              "name": "AlreadyMember"
            },
            {
              "docs": [
                "r\" Not a member."
              ],
              "fields": null,
              "index": 2,
              "name": "NotMember"
            }
          ]
        }
      },
      "docs": [
        "r\" Error for the nicks module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_membership",
        "Error"
      ]
    }
  },
  {
    "id": 392,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The current authority set is live, and GRANDPA is enabled."
              ],
              "fields": null,
              "index": 0,
              "name": "Live"
            },
            {
              "docs": [
                "There is a pending pause event which will be enacted at the given block",
                "height."
              ],
              "fields": [
                {
                  "docs": [
                    "Block at which the intention to pause was scheduled."
                  ],
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N"
                },
                {
                  "docs": [
                    "Number of blocks after which the change will be enacted."
                  ],
                  "name": "delay",
                  "type": 4,
                  "typeName": "N"
                }
              ],
              "index": 1,
              "name": "PendingPause"
            },
            {
              "docs": [
                "The current GRANDPA authority set is paused."
              ],
              "fields": null,
              "index": 2,
              "name": "Paused"
            },
            {
              "docs": [
                "There is a pending resume event which will be enacted at the given block",
                "height."
              ],
              "fields": [
                {
                  "docs": [
                    "Block at which the intention to resume was scheduled."
                  ],
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N"
                },
                {
                  "docs": [
                    "Number of blocks after which the change will be enacted."
                  ],
                  "name": "delay",
                  "type": 4,
                  "typeName": "N"
                }
              ],
              "index": 3,
              "name": "PendingResume"
            }
          ]
        }
      },
      "docs": [
        "Current state of the GRANDPA authority set. State transitions must happen in",
        "the same order of states defined below, e.g. `Paused` implies a prior",
        "`PendingPause`."
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "path": [
        "pallet_grandpa",
        "StoredState"
      ]
    }
  },
  {
    "id": 393,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The block number this was scheduled at."
              ],
              "name": "scheduled_at",
              "type": 4,
              "typeName": "N"
            },
            {
              "docs": [
                "The delay in blocks until it will be applied."
              ],
              "name": "delay",
              "type": 4,
              "typeName": "N"
            },
            {
              "docs": [
                "The next authority set."
              ],
              "name": "next_authorities",
              "type": 53,
              "typeName": "AuthorityList"
            },
            {
              "docs": [
                "If defined it means the change was forced and the given block number",
                "indicates the median last finalized block when the change was signaled."
              ],
              "name": "forced",
              "type": 93,
              "typeName": "Option\u003cN\u003e"
            }
          ]
        }
      },
      "docs": [
        "A stored pending change."
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "path": [
        "pallet_grandpa",
        "StoredPendingChange"
      ]
    }
  },
  {
    "id": 394,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Attempt to signal GRANDPA pause when the authority set isn\\'t live",
                "(either paused or already pending pause)."
              ],
              "fields": null,
              "index": 1,
              "name": "PauseFailed"
            },
            {
              "docs": [
                "Attempt to signal GRANDPA resume when the authority set isn\\'t paused",
                "(either live or already pending resume)."
              ],
              "fields": null,
              "index": 2,
              "name": "ResumeFailed"
            },
            {
              "docs": [
                "Attempt to signal GRANDPA change with one already pending."
              ],
              "fields": null,
              "index": 3,
              "name": "ChangePending"
            },
            {
              "docs": [
                "Cannot signal forced change so soon after last."
              ],
              "fields": null,
              "index": 4,
              "name": "TooSoon"
            },
            {
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ],
              "fields": null,
              "index": 5,
              "name": "InvalidKeyOwnershipProof"
            },
            {
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ],
              "fields": null,
              "index": 6,
              "name": "InvalidEquivocationProof"
            },
            {
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ],
              "fields": null,
              "index": 7,
              "name": "DuplicateOffenceReport"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_grandpa",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 395,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The account proposing it."
              ],
              "name": "proposer",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The (total) amount that should be paid if the proposal is accepted."
              ],
              "name": "value",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The account to whom the payment should be made if the proposal is accepted."
              ],
              "name": "beneficiary",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The amount held on deposit (reserved) for making this proposal."
              ],
              "name": "bond",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "A spending proposal."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_treasury",
        "Proposal"
      ]
    }
  },
  {
    "id": 396,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 92,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 397,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "A fixed point representation of a number in the range [0, 1].",
        "",
        "\"_Parts per Million_"
      ],
      "params": null,
      "path": [
        "sp_arithmetic",
        "per_things",
        "Permill"
      ]
    }
  },
  {
    "id": 398,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 119,
              "typeName": "[u8; 8]"
            }
          ]
        }
      },
      "docs": [
        "A pallet identifier. These are per pallet and should be stored in a registry somewhere."
      ],
      "params": null,
      "path": [
        "frame_support",
        "PalletId"
      ]
    }
  },
  {
    "id": 399,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Proposer\\'s balance is too low."
              ],
              "fields": null,
              "index": 1,
              "name": "InsufficientProposersBalance"
            },
            {
              "docs": [
                "No proposal or bounty at that index."
              ],
              "fields": null,
              "index": 2,
              "name": "InvalidIndex"
            },
            {
              "docs": [
                "Too many approvals in the queue."
              ],
              "fields": null,
              "index": 3,
              "name": "TooManyApprovals"
            }
          ]
        }
      },
      "docs": [
        "Error for the treasury pallet.",
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_treasury",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 400,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Version of the instruction weights with which the code was instrumented."
              ],
              "name": "instruction_weights_version",
              "type": 101,
              "typeName": "u32"
            },
            {
              "docs": [
                "Initial memory size of a contract\\'s sandbox."
              ],
              "name": "initial",
              "type": 101,
              "typeName": "u32"
            },
            {
              "docs": [
                "The maximum memory size of a contract\\'s sandbox."
              ],
              "name": "maximum",
              "type": 101,
              "typeName": "u32"
            },
            {
              "docs": [
                "The number of alive contracts that use this as their contract code.",
                "",
                "If this number drops to zero this module is removed from storage."
              ],
              "name": "refcount",
              "type": 135,
              "typeName": "u64"
            },
            {
              "docs": [
                "This field is reserved for future evolution of format.",
                "",
                "For now this field is serialized as `None`. In the future we are able to change the",
                "type parameter to a new struct that contains the fields that we want to add.",
                "That new struct would also contain a reserved field for its future extensions.",
                "This works because in SCALE `None` is encoded independently from the type parameter",
                "of the option."
              ],
              "name": "_reserved",
              "type": 401,
              "typeName": "Option\u003c()\u003e"
            },
            {
              "docs": [
                "Code instrumented with the latest schedule."
              ],
              "name": "code",
              "type": 10,
              "typeName": "Vec\u003cu8\u003e"
            },
            {
              "docs": [
                "The size of the uninstrumented code.",
                "",
                "We cache this value here in order to avoid the need to pull the pristine code",
                "from storage when we only need its length for rent calculations."
              ],
              "name": "original_code_len",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "A prepared wasm module ready for execution.",
        "",
        "# Note",
        "",
        "This data structure is mostly immutable once created and stored. The exceptions that",
        "can be changed by calling a contract are `refcount`, `instruction_weights_version` and `code`.",
        "`refcount` can change when a contract instantiates a new contract or self terminates.",
        "`instruction_weights_version` and `code` when a contract with an outdated instrumention is",
        "called. Therefore one must be careful when holding any in-memory representation of this",
        "type while calling into a contract as those fields can get out of date."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_contracts",
        "wasm",
        "PrefabWasmModule"
      ]
    }
  },
  {
    "id": 401,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 44,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 44
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 402,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 403,
                  "typeName": "AliveContractInfo\u003cT\u003e"
                }
              ],
              "index": 0,
              "name": "Alive"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 404,
                  "typeName": "TombstoneContractInfo\u003cT\u003e"
                }
              ],
              "index": 1,
              "name": "Tombstone"
            }
          ]
        }
      },
      "docs": [
        "Information for managing an account and its sub trie abstraction.",
        "This is the required info to cache for an account"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_contracts",
        "storage",
        "ContractInfo"
      ]
    }
  },
  {
    "id": 403,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Unique ID for the subtree encoded as a bytes vector."
              ],
              "name": "trie_id",
              "type": 10,
              "typeName": "TrieId"
            },
            {
              "docs": [
                "The total number of bytes used by this contract.",
                "",
                "It is a sum of each key-value pair stored by this contract."
              ],
              "name": "storage_size",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The total number of key-value pairs in storage of this contract."
              ],
              "name": "pair_count",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The code associated with a given account."
              ],
              "name": "code_hash",
              "type": 9,
              "typeName": "CodeHash"
            },
            {
              "docs": [
                "Pay rent at most up to this value."
              ],
              "name": "rent_allowance",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount of rent that was paid by the contract over its whole lifetime.",
                "",
                "A restored contract starts with a value of zero just like a new contract."
              ],
              "name": "rent_paid",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Last block rent has been paid."
              ],
              "name": "deduct_block",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "Last block child storage has been written."
              ],
              "name": "last_write",
              "type": 93,
              "typeName": "Option\u003cBlockNumber\u003e"
            },
            {
              "docs": [
                "This field is reserved for future evolution of format."
              ],
              "name": "_reserved",
              "type": 401,
              "typeName": "Option\u003c()\u003e"
            }
          ]
        }
      },
      "docs": [
        "Information for managing an account and its sub trie abstraction.",
        "This is the required info to cache for an account."
      ],
      "params": [
        {
          "name": "CodeHash",
          "type": 9
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_contracts",
        "storage",
        "RawAliveContractInfo"
      ]
    }
  },
  {
    "id": 404,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 9,
              "typeName": "H"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "Hasher",
          "type": 405
        }
      ],
      "path": [
        "pallet_contracts",
        "storage",
        "RawTombstoneContractInfo"
      ]
    }
  },
  {
    "id": 405,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "Blake2-256 Hash implementation."
      ],
      "params": null,
      "path": [
        "sp_runtime",
        "traits",
        "BlakeTwo256"
      ]
    }
  },
  {
    "id": 406,
    "type": {
      "def": {
        "Sequence": {
          "type": 407
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 407,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": "pair_count",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "trie_id",
              "type": 10,
              "typeName": "TrieId"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "pallet_contracts",
        "storage",
        "DeletedContract"
      ]
    }
  },
  {
    "id": 408,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Describes the upper limits on various metrics."
              ],
              "name": "limits",
              "type": 409,
              "typeName": "Limits"
            },
            {
              "docs": [
                "The weights for individual wasm instructions."
              ],
              "name": "instruction_weights",
              "type": 410,
              "typeName": "InstructionWeights\u003cT\u003e"
            },
            {
              "docs": [
                "The weights for each imported function a contract is allowed to call."
              ],
              "name": "host_fn_weights",
              "type": 411,
              "typeName": "HostFnWeights\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "Definition of the cost schedule and other parameterizations for the wasm vm.",
        "",
        "Its [`Default`] implementation is the designated way to initialize this type. It uses",
        "the benchmarked information supplied by [`Config::WeightInfo`]. All of its fields are",
        "public and can therefore be modified. For example in order to change some of the limits",
        "and set a custom instruction weight version the following code could be used:",
        "```rust",
        "use pallet_contracts::{Schedule, Limits, InstructionWeights, Config};",
        "",
        "fn create_schedule\u003cT: Config\u003e() -\u003e Schedule\u003cT\u003e {",
        "    Schedule {",
        "        limits: Limits {",
        "\"\\t\\t        globals: 3,",
        "\"\\t\\t        parameters: 3,",
        "\"\\t\\t        memory_pages: 16,",
        "\"\\t\\t        table_size: 3,",
        "\"\\t\\t        br_table_size: 3,",
        "\"\\t\\t        .. Default::default()",
        "\"\\t        },",
        "        instruction_weights: InstructionWeights {",
        "\"\\t            version: 5,",
        "            .. Default::default()",
        "        },",
        "\"\\t        .. Default::default()",
        "    }",
        "}",
        "```",
        "",
        "# Note",
        "",
        "Please make sure to bump the [`InstructionWeights::version`] whenever substantial",
        "changes are made to its values."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_contracts",
        "schedule",
        "Schedule"
      ]
    }
  },
  {
    "id": 409,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The maximum number of topics supported by an event."
              ],
              "name": "event_topics",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Maximum allowed stack height in number of elements.",
                "",
                "See \u003chttps://wiki.parity.io/WebAssembly-StackHeight\u003e to find out",
                "how the stack frame cost is calculated. Each element can be of one of the",
                "wasm value types. This means the maximum size per element is 64bit."
              ],
              "name": "stack_height",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Maximum number of globals a module is allowed to declare.",
                "",
                "Globals are not limited through the `stack_height` as locals are. Neither does",
                "the linear memory limit `memory_pages` applies to them."
              ],
              "name": "globals",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Maximum numbers of parameters a function can have.",
                "",
                "Those need to be limited to prevent a potentially exploitable interaction with",
                "the stack height instrumentation: The costs of executing the stack height",
                "instrumentation for an indirectly called function scales linearly with the amount",
                "of parameters of this function. Because the stack height instrumentation itself is",
                "is not weight metered its costs must be static (via this limit) and included in",
                "the costs of the instructions that cause them (call, call_indirect)."
              ],
              "name": "parameters",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Maximum number of memory pages allowed for a contract."
              ],
              "name": "memory_pages",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Maximum number of elements allowed in a table.",
                "",
                "Currently, the only type of element that is allowed in a table is funcref."
              ],
              "name": "table_size",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Maximum number of elements that can appear as immediate value to the br_table instruction."
              ],
              "name": "br_table_size",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The maximum length of a subject in bytes used for PRNG generation."
              ],
              "name": "subject_len",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The maximum nesting level of the call stack."
              ],
              "name": "call_depth",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The maximum size of a storage value and event payload in bytes."
              ],
              "name": "payload_len",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The maximum length of a contract code in bytes. This limit applies to the instrumented",
                "version of the code. Therefore `instantiate_with_code` can fail even when supplying",
                "a wasm binary below this maximum size."
              ],
              "name": "code_len",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "Describes the upper limits on various metrics.",
        "",
        "# Note",
        "",
        "The values in this struct should never be decreased. The reason is that decreasing those",
        "values will break existing contracts which are above the new limits when a",
        "re-instrumentation is triggered."
      ],
      "params": null,
      "path": [
        "pallet_contracts",
        "schedule",
        "Limits"
      ]
    }
  },
  {
    "id": 410,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Version of the instruction weights.",
                "",
                "# Note",
                "",
                "Should be incremented whenever any instruction weight is changed. The",
                "reason is that changes to instruction weights require a re-instrumentation",
                "in order to apply the changes to an already deployed code. The re-instrumentation",
                "is triggered by comparing the version of the current schedule with the version the code was",
                "instrumented with. Changes usually happen when pallet_contracts is re-benchmarked.",
                "",
                "Changes to other parts of the schedule should not increment the version in",
                "order to avoid unnecessary re-instrumentations."
              ],
              "name": "version",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64const",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64load",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64store",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "select",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "r#if",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "br",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "br_if",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "br_table",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "br_table_per_entry",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "call",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "call_indirect",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "call_indirect_per_param",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "local_get",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "local_set",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "local_tee",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "global_get",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "global_set",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "memory_current",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "memory_grow",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64clz",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64ctz",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64popcnt",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64eqz",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64extendsi32",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64extendui32",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i32wrapi64",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64eq",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64ne",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64lts",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64ltu",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64gts",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64gtu",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64les",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64leu",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64ges",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64geu",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64add",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64sub",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64mul",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64divs",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64divu",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64rems",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64remu",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64and",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64or",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64xor",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64shl",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64shrs",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64shru",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64rotl",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": null,
              "name": "i64rotr",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "Describes the weight for all categories of supported wasm instructions.",
        "",
        "There there is one field for each wasm instruction that describes the weight to",
        "execute one instruction of that name. There are a few execptions:",
        "",
        "1. If there is a i64 and a i32 variant of an instruction we use the weight",
        "   of the former for both.",
        "2. The following instructions are free of charge because they merely structure the",
        "   wasm module and cannot be spammed without making the module invalid (and rejected):",
        "   End, Unreachable, Return, Else",
        "3. The following instructions cannot be benchmarked because they are removed by any",
        "   real world execution engine as a preprocessing step and therefore don\\'t yield a",
        "   meaningful benchmark result. However, in contrast to the instructions mentioned",
        "   in 2. they can be spammed. We price them with the same weight as the \\\"default\\",
        "   instruction (i64.const): Block, Loop, Nop",
        "4. We price both i64.const and drop as InstructionWeights.i64const / 2. The reason",
        "   for that is that we cannot benchmark either of them on its own but we need their",
        "   individual values to derive (by subtraction) the weight of all other instructions",
        "   that use them as supporting instructions. Supporting means mainly pushing arguments",
        "   and dropping return values in order to maintain a valid module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_contracts",
        "schedule",
        "InstructionWeights"
      ]
    }
  },
  {
    "id": 411,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Weight of calling `seal_caller`."
              ],
              "name": "caller",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_address`."
              ],
              "name": "address",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_gas_left`."
              ],
              "name": "gas_left",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_balance`."
              ],
              "name": "balance",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_value_transferred`."
              ],
              "name": "value_transferred",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_minimum_balance`."
              ],
              "name": "minimum_balance",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_tombstone_deposit`."
              ],
              "name": "tombstone_deposit",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_rent_allowance`."
              ],
              "name": "rent_allowance",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_block_number`."
              ],
              "name": "block_number",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_now`."
              ],
              "name": "now",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_weight_to_fee`."
              ],
              "name": "weight_to_fee",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `gas`."
              ],
              "name": "gas",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_input`."
              ],
              "name": "input",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per input byte copied to contract memory by `seal_input`."
              ],
              "name": "input_per_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_return`."
              ],
              "name": "r#return",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per byte returned through `seal_return`."
              ],
              "name": "return_per_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_terminate`."
              ],
              "name": "terminate",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_restore_to`."
              ],
              "name": "restore_to",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per delta key supplied to `seal_restore_to`."
              ],
              "name": "restore_to_per_delta",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_random`."
              ],
              "name": "random",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_reposit_event`."
              ],
              "name": "deposit_event",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per topic supplied to `seal_deposit_event`."
              ],
              "name": "deposit_event_per_topic",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per byte of an event deposited through `seal_deposit_event`."
              ],
              "name": "deposit_event_per_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_debug_message`."
              ],
              "name": "debug_message",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_set_rent_allowance`."
              ],
              "name": "set_rent_allowance",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_set_storage`."
              ],
              "name": "set_storage",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per byte of an item stored with `seal_set_storage`."
              ],
              "name": "set_storage_per_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_clear_storage`."
              ],
              "name": "clear_storage",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_get_storage`."
              ],
              "name": "get_storage",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per byte of an item received via `seal_get_storage`."
              ],
              "name": "get_storage_per_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_transfer`."
              ],
              "name": "transfer",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_call`."
              ],
              "name": "call",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight surcharge that is claimed if `seal_call` does a balance transfer."
              ],
              "name": "call_transfer_surcharge",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per input byte supplied to `seal_call`."
              ],
              "name": "call_per_input_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per output byte received through `seal_call`."
              ],
              "name": "call_per_output_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_instantiate`."
              ],
              "name": "instantiate",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per input byte supplied to `seal_instantiate`."
              ],
              "name": "instantiate_per_input_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per output byte received through `seal_instantiate`."
              ],
              "name": "instantiate_per_output_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per salt byte supplied to `seal_instantiate`."
              ],
              "name": "instantiate_per_salt_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_hash_sha_256`."
              ],
              "name": "hash_sha2_256",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per byte hashed by `seal_hash_sha_256`."
              ],
              "name": "hash_sha2_256_per_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_hash_keccak_256`."
              ],
              "name": "hash_keccak_256",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per byte hashed by `seal_hash_keccak_256`."
              ],
              "name": "hash_keccak_256_per_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_hash_blake2_256`."
              ],
              "name": "hash_blake2_256",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per byte hashed by `seal_hash_blake2_256`."
              ],
              "name": "hash_blake2_256_per_byte",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight of calling `seal_hash_blake2_128`."
              ],
              "name": "hash_blake2_128",
              "type": 8,
              "typeName": "Weight"
            },
            {
              "docs": [
                "Weight per byte hashed by `seal_hash_blake2_128`."
              ],
              "name": "hash_blake2_128_per_byte",
              "type": 8,
              "typeName": "Weight"
            }
          ]
        }
      },
      "docs": [
        "Describes the weight for each imported function that a contract is allowed to call."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_contracts",
        "schedule",
        "HostFnWeights"
      ]
    }
  },
  {
    "id": 412,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "A new schedule must have a greater version than the current one."
              ],
              "fields": null,
              "index": 1,
              "name": "InvalidScheduleVersion"
            },
            {
              "docs": [
                "An origin must be signed or inherent and auxiliary sender only provided on inherent."
              ],
              "fields": null,
              "index": 2,
              "name": "InvalidSurchargeClaim"
            },
            {
              "docs": [
                "Cannot restore from nonexisting or tombstone contract."
              ],
              "fields": null,
              "index": 3,
              "name": "InvalidSourceContract"
            },
            {
              "docs": [
                "Cannot restore to nonexisting or alive contract."
              ],
              "fields": null,
              "index": 4,
              "name": "InvalidDestinationContract"
            },
            {
              "docs": [
                "Tombstones don\\'t match."
              ],
              "fields": null,
              "index": 5,
              "name": "InvalidTombstone"
            },
            {
              "docs": [
                "An origin TrieId written in the current block."
              ],
              "fields": null,
              "index": 6,
              "name": "InvalidContractOrigin"
            },
            {
              "docs": [
                "The executed contract exhausted its gas limit."
              ],
              "fields": null,
              "index": 7,
              "name": "OutOfGas"
            },
            {
              "docs": [
                "The output buffer supplied to a contract API call was too small."
              ],
              "fields": null,
              "index": 8,
              "name": "OutputBufferTooSmall"
            },
            {
              "docs": [
                "Performing the requested transfer would have brought the contract below",
                "the subsistence threshold. No transfer is allowed to do this in order to allow",
                "for a tombstone to be created. Use `seal_terminate` to remove a contract without",
                "leaving a tombstone behind."
              ],
              "fields": null,
              "index": 9,
              "name": "BelowSubsistenceThreshold"
            },
            {
              "docs": [
                "The newly created contract is below the subsistence threshold after executing",
                "its contructor. No contracts are allowed to exist below that threshold."
              ],
              "fields": null,
              "index": 10,
              "name": "NewContractNotFunded"
            },
            {
              "docs": [
                "Performing the requested transfer failed for a reason originating in the",
                "chosen currency implementation of the runtime. Most probably the balance is",
                "too low or locks are placed on it."
              ],
              "fields": null,
              "index": 11,
              "name": "TransferFailed"
            },
            {
              "docs": [
                "Performing a call was denied because the calling depth reached the limit",
                "of what is specified in the schedule."
              ],
              "fields": null,
              "index": 12,
              "name": "MaxCallDepthReached"
            },
            {
              "docs": [
                "No contract was found at the specified address."
              ],
              "fields": null,
              "index": 13,
              "name": "ContractNotFound"
            },
            {
              "docs": [
                "A tombstone exist at the specified address.",
                "",
                "Tombstone cannot be called. Anyone can use `seal_restore_to` in order to revive",
                "the contract, though."
              ],
              "fields": null,
              "index": 14,
              "name": "ContractIsTombstone"
            },
            {
              "docs": [
                "The called contract does not have enough balance to pay for its storage.",
                "",
                "The contract ran out of balance and is therefore eligible for eviction into a",
                "tombstone. Anyone can evict the contract by submitting a `claim_surcharge`",
                "extrinsic. Alternatively, a plain balance transfer can be used in order to",
                "increase the contracts funds so that it can be called again."
              ],
              "fields": null,
              "index": 15,
              "name": "RentNotPaid"
            },
            {
              "docs": [
                "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
                "current schedule."
              ],
              "fields": null,
              "index": 16,
              "name": "CodeTooLarge"
            },
            {
              "docs": [
                "No code could be found at the supplied code hash."
              ],
              "fields": null,
              "index": 17,
              "name": "CodeNotFound"
            },
            {
              "docs": [
                "A buffer outside of sandbox memory was passed to a contract API function."
              ],
              "fields": null,
              "index": 18,
              "name": "OutOfBounds"
            },
            {
              "docs": [
                "Input passed to a contract API function failed to decode as expected type."
              ],
              "fields": null,
              "index": 19,
              "name": "DecodingFailed"
            },
            {
              "docs": [
                "Contract trapped during execution."
              ],
              "fields": null,
              "index": 20,
              "name": "ContractTrapped"
            },
            {
              "docs": [
                "The size defined in `T::MaxValueSize` was exceeded."
              ],
              "fields": null,
              "index": 21,
              "name": "ValueTooLarge"
            },
            {
              "docs": [
                "Termination of a contract is not allowed while the contract is already",
                "on the call stack. Can be triggered by `seal_terminate` or `seal_restore_to."
              ],
              "fields": null,
              "index": 22,
              "name": "TerminatedWhileReentrant"
            },
            {
              "docs": [
                "`seal_call` forwarded this contracts input. It therefore is no longer available."
              ],
              "fields": null,
              "index": 23,
              "name": "InputForwarded"
            },
            {
              "docs": [
                "The subject passed to `seal_random` exceeds the limit."
              ],
              "fields": null,
              "index": 24,
              "name": "RandomSubjectTooLong"
            },
            {
              "docs": [
                "The amount of topics passed to `seal_deposit_events` exceeds the limit."
              ],
              "fields": null,
              "index": 25,
              "name": "TooManyTopics"
            },
            {
              "docs": [
                "The topics passed to `seal_deposit_events` contains at least one duplicate."
              ],
              "fields": null,
              "index": 26,
              "name": "DuplicateTopics"
            },
            {
              "docs": [
                "The chain does not provide a chain extension. Calling the chain extension results",
                "in this error. Note that this usually  shouldn\\'t happen as deploying such contracts",
                "is rejected."
              ],
              "fields": null,
              "index": 27,
              "name": "NoChainExtension"
            },
            {
              "docs": [
                "Removal of a contract failed because the deletion queue is full.",
                "",
                "This can happen when either calling [`Pallet::claim_surcharge`] or `seal_terminate`.",
                "The queue is filled by deleting contracts and emptied by a fixed amount each block.",
                "Trying again during another block is the only way to resolve this issue."
              ],
              "fields": null,
              "index": 28,
              "name": "DeletionQueueFull"
            },
            {
              "docs": [
                "A contract could not be evicted because it has enough balance to pay rent.",
                "",
                "This can be returned from [`Pallet::claim_surcharge`] because the target",
                "contract has enough balance to pay for its rent."
              ],
              "fields": null,
              "index": 29,
              "name": "ContractNotEvictable"
            },
            {
              "docs": [
                "A storage modification exhausted the 32bit type that holds the storage size.",
                "",
                "This can either happen when the accumulated storage in bytes is too large or",
                "when number of storage items is too large."
              ],
              "fields": null,
              "index": 30,
              "name": "StorageExhausted"
            },
            {
              "docs": [
                "A contract with the same AccountId already exists."
              ],
              "fields": null,
              "index": 31,
              "name": "DuplicateContract"
            },
            {
              "docs": [
                "A contract self destructed in its constructor.",
                "",
                "This can be triggered by a call to `seal_terminate` or `seal_restore_to`."
              ],
              "fields": null,
              "index": 32,
              "name": "TerminatedInConstructor"
            },
            {
              "docs": [
                "The debug message specified to `seal_debug_message` does contain invalid UTF-8."
              ],
              "fields": null,
              "index": 33,
              "name": "DebugMessageInvalidUTF8"
            },
            {
              "docs": [
                "A call tried to invoke a contract that is flagged as non-reentrant."
              ],
              "fields": null,
              "index": 34,
              "name": "ReentranceDenied"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_contracts",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 413,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Sender must be the Sudo account"
              ],
              "fields": null,
              "index": 1,
              "name": "RequireSudo"
            }
          ]
        }
      },
      "docs": [
        "Error for the Sudo pallet",
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_sudo",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 414,
    "type": {
      "def": {
        "Sequence": {
          "type": 61
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 415,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Non existent public key."
              ],
              "fields": null,
              "index": 1,
              "name": "InvalidKey"
            },
            {
              "docs": [
                "Duplicated heartbeat."
              ],
              "fields": null,
              "index": 2,
              "name": "DuplicatedHeartbeat"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_im_online",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 416,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The offending authority id"
              ],
              "name": "offender",
              "type": 64,
              "typeName": "Offender"
            },
            {
              "docs": [
                "A list of reporters of offences of this authority ID. Possibly empty where there are no",
                "particular reporters."
              ],
              "name": "reporters",
              "type": 39,
              "typeName": "Vec\u003cReporter\u003e"
            }
          ]
        }
      },
      "docs": [
        "A details about an offending authority for a particular kind of offence."
      ],
      "params": [
        {
          "name": "Reporter",
          "type": 0
        },
        {
          "name": "Offender",
          "type": 64
        }
      ],
      "path": [
        "sp_staking",
        "offence",
        "OffenceDetails"
      ]
    }
  },
  {
    "id": 417,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Judgements from the registrars on this identity. Stored ordered by `RegistrarIndex`. There",
                "may be only a single judgement from each registrar."
              ],
              "name": "judgements",
              "type": 418,
              "typeName": "BoundedVec\u003c(RegistrarIndex, Judgement\u003cBalance\u003e), MaxJudgements\u003e"
            },
            {
              "docs": [
                "Amount held on deposit for this information."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Information on the identity."
              ],
              "name": "info",
              "type": 245,
              "typeName": "IdentityInfo\u003cMaxAdditionalFields\u003e"
            }
          ]
        }
      },
      "docs": [
        "Information concerning the identity of the controller of an account.",
        "",
        "NOTE: This is stored separately primarily to facilitate the addition of extra fields in a",
        "backwards compatible way through a specialized `Decode` impl."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "MaxJudgements",
          "type": null
        },
        {
          "name": "MaxAdditionalFields",
          "type": null
        }
      ],
      "path": [
        "pallet_identity",
        "types",
        "Registration"
      ]
    }
  },
  {
    "id": 418,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 420,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 419
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 419,
    "type": {
      "def": {
        "Tuple": [
          4,
          283
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 420,
    "type": {
      "def": {
        "Sequence": {
          "type": 419
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 421,
    "type": {
      "def": {
        "Tuple": [
          6,
          422
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 422,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 39,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 423,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 426,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 424
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 424,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 425,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 425
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 425,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The account of the registrar."
              ],
              "name": "account",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "Amount required to be given to the registrar for them to provide judgement."
              ],
              "name": "fee",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Relevant fields for this registrar. Registrar judgements are limited to attestations on",
                "these fields."
              ],
              "name": "fields",
              "type": 281,
              "typeName": "IdentityFields"
            }
          ]
        }
      },
      "docs": [
        "Information concerning a registrar."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_identity",
        "types",
        "RegistrarInfo"
      ]
    }
  },
  {
    "id": 426,
    "type": {
      "def": {
        "Sequence": {
          "type": 424
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 427,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Too many subs-accounts."
              ],
              "fields": null,
              "index": 1,
              "name": "TooManySubAccounts"
            },
            {
              "docs": [
                "Account isn\\'t found."
              ],
              "fields": null,
              "index": 2,
              "name": "NotFound"
            },
            {
              "docs": [
                "Account isn\\'t named."
              ],
              "fields": null,
              "index": 3,
              "name": "NotNamed"
            },
            {
              "docs": [
                "Empty index."
              ],
              "fields": null,
              "index": 4,
              "name": "EmptyIndex"
            },
            {
              "docs": [
                "Fee is changed."
              ],
              "fields": null,
              "index": 5,
              "name": "FeeChanged"
            },
            {
              "docs": [
                "No identity found."
              ],
              "fields": null,
              "index": 6,
              "name": "NoIdentity"
            },
            {
              "docs": [
                "Sticky judgement."
              ],
              "fields": null,
              "index": 7,
              "name": "StickyJudgement"
            },
            {
              "docs": [
                "Judgement given."
              ],
              "fields": null,
              "index": 8,
              "name": "JudgementGiven"
            },
            {
              "docs": [
                "Invalid judgement."
              ],
              "fields": null,
              "index": 9,
              "name": "InvalidJudgement"
            },
            {
              "docs": [
                "The index is invalid."
              ],
              "fields": null,
              "index": 10,
              "name": "InvalidIndex"
            },
            {
              "docs": [
                "The target is invalid."
              ],
              "fields": null,
              "index": 11,
              "name": "InvalidTarget"
            },
            {
              "docs": [
                "Too many additional fields."
              ],
              "fields": null,
              "index": 12,
              "name": "TooManyFields"
            },
            {
              "docs": [
                "Maximum amount of registrars reached. Cannot add any more."
              ],
              "fields": null,
              "index": 13,
              "name": "TooManyRegistrars"
            },
            {
              "docs": [
                "Account ID is already named."
              ],
              "fields": null,
              "index": 14,
              "name": "AlreadyClaimed"
            },
            {
              "docs": [
                "Sender is not a sub-account."
              ],
              "fields": null,
              "index": 15,
              "name": "NotSub"
            },
            {
              "docs": [
                "Sub-account isn\\'t owned by sender."
              ],
              "fields": null,
              "index": 16,
              "name": "NotOwned"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_identity",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 428,
    "type": {
      "def": {
        "Sequence": {
          "type": 429
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 429,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The bidder/candidate trying to enter society"
              ],
              "name": "who",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The kind of bid placed for this bidder/candidate. See `BidKind`."
              ],
              "name": "kind",
              "type": 430,
              "typeName": "BidKind\u003cAccountId, Balance\u003e"
            },
            {
              "docs": [
                "The reward that the bidder has requested for successfully joining the society."
              ],
              "name": "value",
              "type": 6,
              "typeName": "Balance"
            }
          ]
        }
      },
      "docs": [
        "A bid for entry into society."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_society",
        "Bid"
      ]
    }
  },
  {
    "id": 430,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The CandidateDeposit was paid for this bid."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 0,
              "name": "Deposit"
            },
            {
              "docs": [
                "A member vouched for this bid. The account should be reinstated into `Members` once the",
                "bid is successful (or if it is rescinded prior to launch)."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 6,
                  "typeName": "Balance"
                }
              ],
              "index": 1,
              "name": "Vouch"
            }
          ]
        }
      },
      "docs": [
        "A vote by a member on a candidate application."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_society",
        "BidKind"
      ]
    }
  },
  {
    "id": 431,
    "type": {
      "def": {
        "Tuple": [
          6,
          430
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 432,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "Member is currently vouching for a user."
              ],
              "fields": null,
              "index": 0,
              "name": "Vouching"
            },
            {
              "docs": [
                "Member is banned from vouching for other members."
              ],
              "fields": null,
              "index": 1,
              "name": "Banned"
            }
          ]
        }
      },
      "docs": [
        "Status of a vouching member."
      ],
      "params": null,
      "path": [
        "pallet_society",
        "VouchingStatus"
      ]
    }
  },
  {
    "id": 433,
    "type": {
      "def": {
        "Sequence": {
          "type": 434
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 434,
    "type": {
      "def": {
        "Tuple": [
          4,
          6
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 435,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The member has been chosen to be skeptic and has not yet taken any action."
              ],
              "fields": null,
              "index": 0,
              "name": "Skeptic"
            },
            {
              "docs": [
                "The member has rejected the candidate\\'s application."
              ],
              "fields": null,
              "index": 1,
              "name": "Reject"
            },
            {
              "docs": [
                "The member approves of the candidate\\'s application."
              ],
              "fields": null,
              "index": 2,
              "name": "Approve"
            }
          ]
        }
      },
      "docs": [
        "A vote by a member on a candidate application."
      ],
      "params": null,
      "path": [
        "pallet_society",
        "Vote"
      ]
    }
  },
  {
    "id": 436,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "$crate::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "r\" An incorrect position was provided."
              ],
              "fields": null,
              "index": 1,
              "name": "BadPosition"
            },
            {
              "docs": [
                "r\" User is not a member."
              ],
              "fields": null,
              "index": 2,
              "name": "NotMember"
            },
            {
              "docs": [
                "r\" User is already a member."
              ],
              "fields": null,
              "index": 3,
              "name": "AlreadyMember"
            },
            {
              "docs": [
                "r\" User is suspended."
              ],
              "fields": null,
              "index": 4,
              "name": "Suspended"
            },
            {
              "docs": [
                "r\" User is not suspended."
              ],
              "fields": null,
              "index": 5,
              "name": "NotSuspended"
            },
            {
              "docs": [
                "r\" Nothing to payout."
              ],
              "fields": null,
              "index": 6,
              "name": "NoPayout"
            },
            {
              "docs": [
                "r\" Society already founded."
              ],
              "fields": null,
              "index": 7,
              "name": "AlreadyFounded"
            },
            {
              "docs": [
                "r\" Not enough in pot to accept candidate."
              ],
              "fields": null,
              "index": 8,
              "name": "InsufficientPot"
            },
            {
              "docs": [
                "r\" Member is already vouching or banned from vouching again."
              ],
              "fields": null,
              "index": 9,
              "name": "AlreadyVouching"
            },
            {
              "docs": [
                "r\" Member is not vouching."
              ],
              "fields": null,
              "index": 10,
              "name": "NotVouching"
            },
            {
              "docs": [
                "r\" Cannot remove the head of the chain."
              ],
              "fields": null,
              "index": 11,
              "name": "Head"
            },
            {
              "docs": [
                "r\" Cannot remove the founder."
              ],
              "fields": null,
              "index": 12,
              "name": "Founder"
            },
            {
              "docs": [
                "r\" User has already made a bid."
              ],
              "fields": null,
              "index": 13,
              "name": "AlreadyBid"
            },
            {
              "docs": [
                "r\" User is already a candidate."
              ],
              "fields": null,
              "index": 14,
              "name": "AlreadyCandidate"
            },
            {
              "docs": [
                "r\" User is not a candidate."
              ],
              "fields": null,
              "index": 15,
              "name": "NotCandidate"
            },
            {
              "docs": [
                "r\" Too many members in the society."
              ],
              "fields": null,
              "index": 16,
              "name": "MaxMembers"
            },
            {
              "docs": [
                "r\" The caller is not the founder."
              ],
              "fields": null,
              "index": 17,
              "name": "NotFounder"
            },
            {
              "docs": [
                "r\" The caller is not the head."
              ],
              "fields": null,
              "index": 18,
              "name": "NotHead"
            }
          ]
        }
      },
      "docs": [
        "r\" Errors for this module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_society",
        "Error"
      ]
    }
  },
  {
    "id": 437,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The minimum number of blocks since the start of the recovery process before the account",
                "can be recovered."
              ],
              "name": "delay_period",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "The amount held in reserve of the `depositor`,",
                "to be returned once this configuration is removed."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The list of friends which can help recover an account. Always sorted."
              ],
              "name": "friends",
              "type": 39,
              "typeName": "Vec\u003cAccountId\u003e"
            },
            {
              "docs": [
                "The number of approving friends needed to recover an account."
              ],
              "name": "threshold",
              "type": 81,
              "typeName": "u16"
            }
          ]
        }
      },
      "docs": [
        "Configuration for recovering an account."
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_recovery",
        "RecoveryConfig"
      ]
    }
  },
  {
    "id": 438,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The block number when the recovery process started."
              ],
              "name": "created",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "The amount held in reserve of the `depositor`,",
                "To be returned once this recovery process is closed."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The friends which have vouched so far. Always sorted."
              ],
              "name": "friends",
              "type": 39,
              "typeName": "Vec\u003cAccountId\u003e"
            }
          ]
        }
      },
      "docs": [
        "An active recovery process."
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_recovery",
        "ActiveRecovery"
      ]
    }
  },
  {
    "id": 439,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "User is not allowed to make a call on behalf of this account"
              ],
              "fields": null,
              "index": 1,
              "name": "NotAllowed"
            },
            {
              "docs": [
                "Threshold must be greater than zero"
              ],
              "fields": null,
              "index": 2,
              "name": "ZeroThreshold"
            },
            {
              "docs": [
                "Friends list must be greater than zero and threshold"
              ],
              "fields": null,
              "index": 3,
              "name": "NotEnoughFriends"
            },
            {
              "docs": [
                "Friends list must be less than max friends"
              ],
              "fields": null,
              "index": 4,
              "name": "MaxFriends"
            },
            {
              "docs": [
                "Friends list must be sorted and free of duplicates"
              ],
              "fields": null,
              "index": 5,
              "name": "NotSorted"
            },
            {
              "docs": [
                "This account is not set up for recovery"
              ],
              "fields": null,
              "index": 6,
              "name": "NotRecoverable"
            },
            {
              "docs": [
                "This account is already set up for recovery"
              ],
              "fields": null,
              "index": 7,
              "name": "AlreadyRecoverable"
            },
            {
              "docs": [
                "A recovery process has already started for this account"
              ],
              "fields": null,
              "index": 8,
              "name": "AlreadyStarted"
            },
            {
              "docs": [
                "A recovery process has not started for this rescuer"
              ],
              "fields": null,
              "index": 9,
              "name": "NotStarted"
            },
            {
              "docs": [
                "This account is not a friend who can vouch"
              ],
              "fields": null,
              "index": 10,
              "name": "NotFriend"
            },
            {
              "docs": [
                "The friend must wait until the delay period to vouch for this recovery"
              ],
              "fields": null,
              "index": 11,
              "name": "DelayPeriod"
            },
            {
              "docs": [
                "This user has already vouched for this recovery"
              ],
              "fields": null,
              "index": 12,
              "name": "AlreadyVouched"
            },
            {
              "docs": [
                "The threshold for recovering this account has not been met"
              ],
              "fields": null,
              "index": 13,
              "name": "Threshold"
            },
            {
              "docs": [
                "There are still active recovery attempts that need to be closed"
              ],
              "fields": null,
              "index": 14,
              "name": "StillActive"
            },
            {
              "docs": [
                "This account is already set up for recovery"
              ],
              "fields": null,
              "index": 15,
              "name": "AlreadyProxy"
            },
            {
              "docs": [
                "Some internal state is broken."
              ],
              "fields": null,
              "index": 16,
              "name": "BadState"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_recovery",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 440,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "The account given is not vesting."
              ],
              "fields": null,
              "index": 1,
              "name": "NotVesting"
            },
            {
              "docs": [
                "An existing vesting schedule already exists for this account that cannot be clobbered."
              ],
              "fields": null,
              "index": 2,
              "name": "ExistingVestingSchedule"
            },
            {
              "docs": [
                "Amount being transferred is too low to create a vesting schedule."
              ],
              "fields": null,
              "index": 3,
              "name": "AmountLow"
            }
          ]
        }
      },
      "docs": [
        "Error for the vesting pallet.",
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_vesting",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 441,
    "type": {
      "def": {
        "Sequence": {
          "type": 442
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 442,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "None"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 443,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Some"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "T",
          "type": 443
        }
      ],
      "path": [
        "Option"
      ]
    }
  },
  {
    "id": 443,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The unique identity for this task, if there is one."
              ],
              "name": "maybe_id",
              "type": 78,
              "typeName": "Option\u003cVec\u003cu8\u003e\u003e"
            },
            {
              "docs": [
                "This task\\'s priority."
              ],
              "name": "priority",
              "type": 2,
              "typeName": "schedule::Priority"
            },
            {
              "docs": [
                "The call to be dispatched."
              ],
              "name": "call",
              "type": 124,
              "typeName": "Call"
            },
            {
              "docs": [
                "If the call is periodic, then this points to the information concerning that."
              ],
              "name": "maybe_periodic",
              "type": 290,
              "typeName": "Option\u003cschedule::Period\u003cBlockNumber\u003e\u003e"
            },
            {
              "docs": [
                "The origin to dispatch the call."
              ],
              "name": "origin",
              "type": 444,
              "typeName": "PalletsOrigin"
            }
          ]
        }
      },
      "docs": [
        "Information regarding an item to be executed in the future."
      ],
      "params": [
        {
          "name": "Call",
          "type": 124
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "PalletsOrigin",
          "type": 444
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_scheduler",
        "ScheduledV2"
      ]
    }
  },
  {
    "id": 444,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 445,
                  "typeName": "frame_system::Origin\u003cRuntime\u003e"
                }
              ],
              "index": 0,
              "name": "system"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 446,
                  "typeName": "pallet_collective::Origin\u003cRuntime, pallet_collective::Instance1\u003e"
                }
              ],
              "index": 12,
              "name": "Council"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 447,
                  "typeName": "pallet_collective::Origin\u003cRuntime, pallet_collective::Instance2\u003e"
                }
              ],
              "index": 13,
              "name": "TechnicalCommittee"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 448,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                }
              ],
              "index": 3,
              "name": "Void"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "node_runtime",
        "OriginCaller"
      ]
    }
  },
  {
    "id": 445,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The system itself ordained this dispatch to happen: this is the highest privilege level."
              ],
              "fields": null,
              "index": 0,
              "name": "Root"
            },
            {
              "docs": [
                "It is signed by some public key and we provide the `AccountId`."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 1,
              "name": "Signed"
            },
            {
              "docs": [
                "It is signed by nobody, can be either:",
                "* included and agreed upon by the validators anyway,",
                "* or unsigned transaction validated by a pallet."
              ],
              "fields": null,
              "index": 2,
              "name": "None"
            }
          ]
        }
      },
      "docs": [
        "Origin for the System pallet."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "frame_system",
        "RawOrigin"
      ]
    }
  },
  {
    "id": 446,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "It has been condoned by a given number of members of the collective from a given total."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 0,
              "name": "Members"
            },
            {
              "docs": [
                "It has been condoned by a single member of the collective."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 1,
              "name": "Member"
            },
            {
              "docs": [
                "Dummy to manage the fact we have instancing."
              ],
              "fields": null,
              "index": 2,
              "name": "_Phantom"
            }
          ]
        }
      },
      "docs": [
        "Origin for the collective module."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": 42
        }
      ],
      "path": [
        "pallet_collective",
        "RawOrigin"
      ]
    }
  },
  {
    "id": 447,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "It has been condoned by a given number of members of the collective from a given total."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                },
                {
                  "docs": null,
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount"
                }
              ],
              "index": 0,
              "name": "Members"
            },
            {
              "docs": [
                "It has been condoned by a single member of the collective."
              ],
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 1,
              "name": "Member"
            },
            {
              "docs": [
                "Dummy to manage the fact we have instancing."
              ],
              "fields": null,
              "index": 2,
              "name": "_Phantom"
            }
          ]
        }
      },
      "docs": [
        "Origin for the collective module."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": 46
        }
      ],
      "path": [
        "pallet_collective",
        "RawOrigin"
      ]
    }
  },
  {
    "id": 448,
    "type": {
      "def": {
        "Variant": {
          "variants": null
        }
      },
      "docs": [
        "The void type - it cannot exist."
      ],
      "params": null,
      "path": [
        "sp_core",
        "Void"
      ]
    }
  },
  {
    "id": 449,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "V1"
            },
            {
              "docs": null,
              "fields": null,
              "index": 1,
              "name": "V2"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "pallet_scheduler",
        "Releases"
      ]
    }
  },
  {
    "id": 450,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Failed to schedule a call"
              ],
              "fields": null,
              "index": 1,
              "name": "FailedToSchedule"
            },
            {
              "docs": [
                "Cannot find the scheduled call."
              ],
              "fields": null,
              "index": 2,
              "name": "NotFound"
            },
            {
              "docs": [
                "Given target block number is in the past."
              ],
              "fields": null,
              "index": 3,
              "name": "TargetBlockNumberInPast"
            },
            {
              "docs": [
                "Reschedule failed because it does not change scheduled time."
              ],
              "fields": null,
              "index": 4,
              "name": "RescheduleNoChange"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_scheduler",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 451,
    "type": {
      "def": {
        "Tuple": [
          452,
          6
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 452,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 454,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 453
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 453,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The account which may act on behalf of another."
              ],
              "name": "delegate",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "A value defining the subset of calls that it is allowed to make."
              ],
              "name": "proxy_type",
              "type": 80,
              "typeName": "ProxyType"
            },
            {
              "docs": [
                "The number of blocks that an announcement must be in place for before the corresponding call",
                "may be dispatched. If zero, then no announcement is needed."
              ],
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber"
            }
          ]
        }
      },
      "docs": [
        "The parameters under which a particular account has a proxy relationship with some other",
        "account."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "ProxyType",
          "type": 80
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_proxy",
        "ProxyDefinition"
      ]
    }
  },
  {
    "id": 454,
    "type": {
      "def": {
        "Sequence": {
          "type": 453
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 455,
    "type": {
      "def": {
        "Tuple": [
          456,
          6
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 456,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 458,
              "typeName": "Vec\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounded vector.",
        "",
        "It has implementations for efficient append and length decoding, as with a normal `Vec\u003c_\u003e`, once",
        "put into storage as a raw value, map or double-map.",
        "",
        "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
        "this bound is respected."
      ],
      "params": [
        {
          "name": "T",
          "type": 457
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ]
    }
  },
  {
    "id": 457,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The account which made the announcement."
              ],
              "name": "real",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The hash of the call to be made."
              ],
              "name": "call_hash",
              "type": 9,
              "typeName": "Hash"
            },
            {
              "docs": [
                "The height at which the announcement was made."
              ],
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber"
            }
          ]
        }
      },
      "docs": [
        "Details surrounding a specific instance of an announcement to make a call."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_proxy",
        "Announcement"
      ]
    }
  },
  {
    "id": 458,
    "type": {
      "def": {
        "Sequence": {
          "type": 457
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 459,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "There are too many proxies registered or too many announcements pending."
              ],
              "fields": null,
              "index": 1,
              "name": "TooMany"
            },
            {
              "docs": [
                "Proxy registration not found."
              ],
              "fields": null,
              "index": 2,
              "name": "NotFound"
            },
            {
              "docs": [
                "Sender is not a proxy of the account to be proxied."
              ],
              "fields": null,
              "index": 3,
              "name": "NotProxy"
            },
            {
              "docs": [
                "A call which is incompatible with the proxy type\\'s filter was attempted."
              ],
              "fields": null,
              "index": 4,
              "name": "Unproxyable"
            },
            {
              "docs": [
                "Account is already a proxy."
              ],
              "fields": null,
              "index": 5,
              "name": "Duplicate"
            },
            {
              "docs": [
                "Call may not be made by proxy because it may escalate its privileges."
              ],
              "fields": null,
              "index": 6,
              "name": "NoPermission"
            },
            {
              "docs": [
                "Announcement, if made at all, was made too recently."
              ],
              "fields": null,
              "index": 7,
              "name": "Unannounced"
            },
            {
              "docs": [
                "Cannot add self as proxy."
              ],
              "fields": null,
              "index": 8,
              "name": "NoSelfProxy"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_proxy",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 460,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The extrinsic when the multisig operation was opened."
              ],
              "name": "when",
              "type": 83,
              "typeName": "Timepoint\u003cBlockNumber\u003e"
            },
            {
              "docs": [
                "The amount held in reserve of the `depositor`, to be returned once the operation ends."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The account who opened it (i.e. the first to approve it)."
              ],
              "name": "depositor",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The approvals achieved so far, including the depositor. Always sorted."
              ],
              "name": "approvals",
              "type": 39,
              "typeName": "Vec\u003cAccountId\u003e"
            }
          ]
        }
      },
      "docs": [
        "An open multisig operation."
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_multisig",
        "Multisig"
      ]
    }
  },
  {
    "id": 461,
    "type": {
      "def": {
        "Tuple": [
          10,
          0,
          6
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 462,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Threshold must be 2 or greater."
              ],
              "fields": null,
              "index": 1,
              "name": "MinimumThreshold"
            },
            {
              "docs": [
                "Call is already approved by this signatory."
              ],
              "fields": null,
              "index": 2,
              "name": "AlreadyApproved"
            },
            {
              "docs": [
                "Call doesn\\'t need any (more) approvals."
              ],
              "fields": null,
              "index": 3,
              "name": "NoApprovalsNeeded"
            },
            {
              "docs": [
                "There are too few signatories in the list."
              ],
              "fields": null,
              "index": 4,
              "name": "TooFewSignatories"
            },
            {
              "docs": [
                "There are too many signatories in the list."
              ],
              "fields": null,
              "index": 5,
              "name": "TooManySignatories"
            },
            {
              "docs": [
                "The signatories were provided out of order; they should be ordered."
              ],
              "fields": null,
              "index": 6,
              "name": "SignatoriesOutOfOrder"
            },
            {
              "docs": [
                "The sender was contained in the other signatories; it shouldn\\'t be."
              ],
              "fields": null,
              "index": 7,
              "name": "SenderInSignatories"
            },
            {
              "docs": [
                "Multisig operation not found when attempting to cancel."
              ],
              "fields": null,
              "index": 8,
              "name": "NotFound"
            },
            {
              "docs": [
                "Only the account that originally created the multisig is able to cancel it."
              ],
              "fields": null,
              "index": 9,
              "name": "NotOwner"
            },
            {
              "docs": [
                "No timepoint was given, yet the multisig operation is already underway."
              ],
              "fields": null,
              "index": 10,
              "name": "NoTimepoint"
            },
            {
              "docs": [
                "A different timepoint was given to the multisig operation that is underway."
              ],
              "fields": null,
              "index": 11,
              "name": "WrongTimepoint"
            },
            {
              "docs": [
                "A timepoint was given, yet no multisig operation is underway."
              ],
              "fields": null,
              "index": 12,
              "name": "UnexpectedTimepoint"
            },
            {
              "docs": [
                "The maximum weight information provided was too low."
              ],
              "fields": null,
              "index": 13,
              "name": "MaxWeightTooLow"
            },
            {
              "docs": [
                "The data to be stored is already stored."
              ],
              "fields": null,
              "index": 14,
              "name": "AlreadyStored"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_multisig",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 463,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The account proposing it."
              ],
              "name": "proposer",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The (total) amount that should be paid if the bounty is rewarded."
              ],
              "name": "value",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The curator fee. Included in value."
              ],
              "name": "fee",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The deposit of curator."
              ],
              "name": "curator_deposit",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount held on deposit (reserved) for making this proposal."
              ],
              "name": "bond",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The status of this bounty."
              ],
              "name": "status",
              "type": 464,
              "typeName": "BountyStatus\u003cAccountId, BlockNumber\u003e"
            }
          ]
        }
      },
      "docs": [
        "A bounty proposal."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_bounties",
        "Bounty"
      ]
    }
  },
  {
    "id": 464,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": [
                "The bounty is proposed and waiting for approval."
              ],
              "fields": null,
              "index": 0,
              "name": "Proposed"
            },
            {
              "docs": [
                "The bounty is approved and waiting to become active at next spend period."
              ],
              "fields": null,
              "index": 1,
              "name": "Approved"
            },
            {
              "docs": [
                "The bounty is funded and waiting for curator assignment."
              ],
              "fields": null,
              "index": 2,
              "name": "Funded"
            },
            {
              "docs": [
                "A curator has been proposed by the `ApproveOrigin`. Waiting for acceptance from the curator."
              ],
              "fields": [
                {
                  "docs": [
                    "The assigned curator of this bounty."
                  ],
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId"
                }
              ],
              "index": 3,
              "name": "CuratorProposed"
            },
            {
              "docs": [
                "The bounty is active and waiting to be awarded."
              ],
              "fields": [
                {
                  "docs": [
                    "The curator of this bounty."
                  ],
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": [
                    "An update from the curator is due by this block, else they are considered inactive."
                  ],
                  "name": "update_due",
                  "type": 4,
                  "typeName": "BlockNumber"
                }
              ],
              "index": 4,
              "name": "Active"
            },
            {
              "docs": [
                "The bounty is awarded and waiting to released after a delay."
              ],
              "fields": [
                {
                  "docs": [
                    "The curator of this bounty."
                  ],
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": [
                    "The beneficiary of the bounty."
                  ],
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "AccountId"
                },
                {
                  "docs": [
                    "When the bounty can be claimed."
                  ],
                  "name": "unlock_at",
                  "type": 4,
                  "typeName": "BlockNumber"
                }
              ],
              "index": 5,
              "name": "PendingPayout"
            }
          ]
        }
      },
      "docs": [
        "The status of a bounty proposal."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_bounties",
        "BountyStatus"
      ]
    }
  },
  {
    "id": 465,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "$crate::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "r\" Proposer's balance is too low."
              ],
              "fields": null,
              "index": 1,
              "name": "InsufficientProposersBalance"
            },
            {
              "docs": [
                "r\" No proposal or bounty at that index."
              ],
              "fields": null,
              "index": 2,
              "name": "InvalidIndex"
            },
            {
              "docs": [
                "r\" The reason given is just too big."
              ],
              "fields": null,
              "index": 3,
              "name": "ReasonTooBig"
            },
            {
              "docs": [
                "r\" The bounty status is unexpected."
              ],
              "fields": null,
              "index": 4,
              "name": "UnexpectedStatus"
            },
            {
              "docs": [
                "r\" Require bounty curator."
              ],
              "fields": null,
              "index": 5,
              "name": "RequireCurator"
            },
            {
              "docs": [
                "r\" Invalid bounty value."
              ],
              "fields": null,
              "index": 6,
              "name": "InvalidValue"
            },
            {
              "docs": [
                "r\" Invalid bounty fee."
              ],
              "fields": null,
              "index": 7,
              "name": "InvalidFee"
            },
            {
              "docs": [
                "r\" A bounty payout is pending.",
                "r\" To cancel the bounty, you must unassign and slash the curator."
              ],
              "fields": null,
              "index": 8,
              "name": "PendingPayout"
            },
            {
              "docs": [
                "r\" The bounties cannot be claimed/closed because it's still in the countdown period."
              ],
              "fields": null,
              "index": 9,
              "name": "Premature"
            }
          ]
        }
      },
      "docs": [
        "r\" Error for the treasury module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_bounties",
        "Error"
      ]
    }
  },
  {
    "id": 466,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The hash of the reason for the tip. The reason should be a human-readable UTF-8 encoded string. A URL would be",
                "sensible."
              ],
              "name": "reason",
              "type": 9,
              "typeName": "Hash"
            },
            {
              "docs": [
                "The account to be tipped."
              ],
              "name": "who",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The account who began this tip."
              ],
              "name": "finder",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The amount held on deposit for this tip."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The block number at which this tip will close if `Some`. If `None`, then no closing is",
                "scheduled."
              ],
              "name": "closes",
              "type": 93,
              "typeName": "Option\u003cBlockNumber\u003e"
            },
            {
              "docs": [
                "The members who have voted for this tip. Sorted by AccountId."
              ],
              "name": "tips",
              "type": 48,
              "typeName": "Vec\u003c(AccountId, Balance)\u003e"
            },
            {
              "docs": [
                "Whether this tip should result in the finder taking a fee."
              ],
              "name": "finders_fee",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": [
        "An open tipping \\\"motion\\\". Retains all details of a tip including information on the finder",
        "and the members who have voted."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "path": [
        "pallet_tips",
        "OpenTip"
      ]
    }
  },
  {
    "id": 467,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "$crate::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "r\" The reason given is just too big."
              ],
              "fields": null,
              "index": 1,
              "name": "ReasonTooBig"
            },
            {
              "docs": [
                "r\" The tip was already found/started."
              ],
              "fields": null,
              "index": 2,
              "name": "AlreadyKnown"
            },
            {
              "docs": [
                "r\" The tip hash is unknown."
              ],
              "fields": null,
              "index": 3,
              "name": "UnknownTip"
            },
            {
              "docs": [
                "r\" The account attempting to retract the tip is not the finder of the tip."
              ],
              "fields": null,
              "index": 4,
              "name": "NotFinder"
            },
            {
              "docs": [
                "r\" The tip cannot be claimed/closed because there are not enough tippers yet."
              ],
              "fields": null,
              "index": 5,
              "name": "StillOpen"
            },
            {
              "docs": [
                "r\" The tip cannot be claimed/closed because it's still in the countdown period."
              ],
              "fields": null,
              "index": 6,
              "name": "Premature"
            }
          ]
        }
      },
      "docs": [
        "r\" Error for the tips module."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_tips",
        "Error"
      ]
    }
  },
  {
    "id": 468,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Can change `owner`, `issuer`, `freezer` and `admin` accounts."
              ],
              "name": "owner",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "Can mint tokens."
              ],
              "name": "issuer",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "Can thaw tokens, force transfers and burn tokens from any account."
              ],
              "name": "admin",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "Can freeze tokens."
              ],
              "name": "freezer",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The total supply across all accounts."
              ],
              "name": "supply",
              "type": 8,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The balance deposited for this asset. This pays for the data stored here."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance"
            },
            {
              "docs": [
                "The ED for virtual accounts."
              ],
              "name": "min_balance",
              "type": 8,
              "typeName": "Balance"
            },
            {
              "docs": [
                "If `true`, then any account with this asset is given a provider reference. Otherwise, it",
                "requires a consumer reference."
              ],
              "name": "is_sufficient",
              "type": 34,
              "typeName": "bool"
            },
            {
              "docs": [
                "The total number of accounts."
              ],
              "name": "accounts",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The total number of accounts for which we have placed a self-sufficient reference."
              ],
              "name": "sufficients",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The total number of approvals."
              ],
              "name": "approvals",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Whether the asset is frozen for non-admin transfers."
              ],
              "name": "is_frozen",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "Balance",
          "type": 8
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "path": [
        "pallet_assets",
        "types",
        "AssetDetails"
      ]
    }
  },
  {
    "id": 469,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The balance."
              ],
              "name": "balance",
              "type": 8,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Whether the account is frozen."
              ],
              "name": "is_frozen",
              "type": 34,
              "typeName": "bool"
            },
            {
              "docs": [
                "`true` if this balance gave the account a self-sufficient reference."
              ],
              "name": "sufficient",
              "type": 34,
              "typeName": "bool"
            },
            {
              "docs": [
                "Additional \\\"sidecar\\\" data, in case some other pallet wants to use this storage item."
              ],
              "name": "extra",
              "type": 44,
              "typeName": "Extra"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "Balance",
          "type": 8
        },
        {
          "name": "Extra",
          "type": 44
        }
      ],
      "path": [
        "pallet_assets",
        "types",
        "AssetBalance"
      ]
    }
  },
  {
    "id": 470,
    "type": {
      "def": {
        "Tuple": [
          4,
          0,
          0
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 471,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The amount of funds approved for the balance transfer from the owner to some delegated",
                "target."
              ],
              "name": "amount",
              "type": 8,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The amount reserved on the owner\\'s account to hold this item in storage."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance"
            }
          ]
        }
      },
      "docs": [
        "Data concerning an approval."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 8
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "path": [
        "pallet_assets",
        "types",
        "Approval"
      ]
    }
  },
  {
    "id": 472,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The balance deposited for this metadata.",
                "",
                "This pays for the data stored in this struct."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance"
            },
            {
              "docs": [
                "The user friendly name of this asset. Limited in length by `StringLimit`."
              ],
              "name": "name",
              "type": 91,
              "typeName": "BoundedString"
            },
            {
              "docs": [
                "The ticker symbol for this asset. Limited in length by `StringLimit`."
              ],
              "name": "symbol",
              "type": 91,
              "typeName": "BoundedString"
            },
            {
              "docs": [
                "The number of decimals this asset uses to represent one unit."
              ],
              "name": "decimals",
              "type": 2,
              "typeName": "u8"
            },
            {
              "docs": [
                "Whether the asset metadata may be changed by a non Force origin."
              ],
              "name": "is_frozen",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "BoundedString",
          "type": 91
        }
      ],
      "path": [
        "pallet_assets",
        "types",
        "AssetMetadata"
      ]
    }
  },
  {
    "id": 473,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Account balance must be greater than or equal to the transfer amount."
              ],
              "fields": null,
              "index": 1,
              "name": "BalanceLow"
            },
            {
              "docs": [
                "Balance should be non-zero."
              ],
              "fields": null,
              "index": 2,
              "name": "BalanceZero"
            },
            {
              "docs": [
                "The signing account has no permission to do the operation."
              ],
              "fields": null,
              "index": 3,
              "name": "NoPermission"
            },
            {
              "docs": [
                "The given asset ID is unknown."
              ],
              "fields": null,
              "index": 4,
              "name": "Unknown"
            },
            {
              "docs": [
                "The origin account is frozen."
              ],
              "fields": null,
              "index": 5,
              "name": "Frozen"
            },
            {
              "docs": [
                "The asset ID is already taken."
              ],
              "fields": null,
              "index": 6,
              "name": "InUse"
            },
            {
              "docs": [
                "Invalid witness data given."
              ],
              "fields": null,
              "index": 7,
              "name": "BadWitness"
            },
            {
              "docs": [
                "Minimum balance should be non-zero."
              ],
              "fields": null,
              "index": 8,
              "name": "MinBalanceZero"
            },
            {
              "docs": [
                "No provider reference exists to allow a non-zero balance of a non-self-sufficient asset."
              ],
              "fields": null,
              "index": 9,
              "name": "NoProvider"
            },
            {
              "docs": [
                "Invalid metadata given."
              ],
              "fields": null,
              "index": 10,
              "name": "BadMetadata"
            },
            {
              "docs": [
                "No approval exists that would allow the transfer."
              ],
              "fields": null,
              "index": 11,
              "name": "Unapproved"
            },
            {
              "docs": [
                "The source account would not survive the transfer and it needs to stay alive."
              ],
              "fields": null,
              "index": 12,
              "name": "WouldDie"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_assets",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 474,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Price per entry."
              ],
              "name": "price",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "Starting block of the lottery."
              ],
              "name": "start",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "Length of the lottery (start + length = end)."
              ],
              "name": "length",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "Delay for choosing the winner of the lottery. (start + length + delay = payout).",
                "Randomness in the \\\"payout\\\" block will be used to determine the winner."
              ],
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber"
            },
            {
              "docs": [
                "Whether this lottery will repeat after it completes."
              ],
              "name": "repeat",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_lottery",
        "LotteryConfig"
      ]
    }
  },
  {
    "id": 475,
    "type": {
      "def": {
        "Tuple": [
          4,
          476
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 476,
    "type": {
      "def": {
        "Sequence": {
          "type": 88
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 477,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "A lottery has not been configured."
              ],
              "fields": null,
              "index": 1,
              "name": "NotConfigured"
            },
            {
              "docs": [
                "A lottery is already in progress."
              ],
              "fields": null,
              "index": 2,
              "name": "InProgress"
            },
            {
              "docs": [
                "A lottery has already ended."
              ],
              "fields": null,
              "index": 3,
              "name": "AlreadyEnded"
            },
            {
              "docs": [
                "The call is not valid for an open lottery."
              ],
              "fields": null,
              "index": 4,
              "name": "InvalidCall"
            },
            {
              "docs": [
                "You are already participating in the lottery with this call."
              ],
              "fields": null,
              "index": 5,
              "name": "AlreadyParticipating"
            },
            {
              "docs": [
                "Too many calls for a single lottery."
              ],
              "fields": null,
              "index": 6,
              "name": "TooManyCalls"
            },
            {
              "docs": [
                "Failed to encode calls"
              ],
              "fields": null,
              "index": 7,
              "name": "EncodingFailed"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_lottery",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 478,
    "type": {
      "def": {
        "Sequence": {
          "type": 479
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 479,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The amount bid."
              ],
              "name": "amount",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The owner of the bid."
              ],
              "name": "who",
              "type": 0,
              "typeName": "AccountId"
            }
          ]
        }
      },
      "docs": [
        "A single bid on a gilt, an item of a *queue* in `Queues`."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "path": [
        "pallet_gilt",
        "pallet",
        "GiltBid"
      ]
    }
  },
  {
    "id": 480,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The total amount of funds held in reserve for all active gilts."
              ],
              "name": "frozen",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The proportion of funds that the `frozen` balance represents to total issuance."
              ],
              "name": "proportion",
              "type": 302,
              "typeName": "Perquintill"
            },
            {
              "docs": [
                "The total number of gilts issued so far."
              ],
              "name": "index",
              "type": 4,
              "typeName": "ActiveIndex"
            },
            {
              "docs": [
                "The target proportion of gilts within total issuance."
              ],
              "name": "target",
              "type": 302,
              "typeName": "Perquintill"
            }
          ]
        }
      },
      "docs": [
        "Overall information package on the active gilts.",
        "",
        "The way of determining the net issuance (i.e. after factoring in all maturing frozen funds)",
        "is:",
        "",
        "`issuance - frozen + proportion * issuance`",
        "",
        "where `issuance = total_issuance - IgnoredIssuance`"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "path": [
        "pallet_gilt",
        "pallet",
        "ActiveGiltsTotal"
      ]
    }
  },
  {
    "id": 481,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The proportion of the effective total issuance (i.e. accounting for any eventual gilt",
                "expansion or contraction that may eventually be claimed)."
              ],
              "name": "proportion",
              "type": 302,
              "typeName": "Perquintill"
            },
            {
              "docs": [
                "The amount reserved under this gilt."
              ],
              "name": "amount",
              "type": 6,
              "typeName": "Balance"
            },
            {
              "docs": [
                "The account to whom this gilt belongs."
              ],
              "name": "who",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The time after which this gilt can be redeemed for the proportional amount of balance."
              ],
              "name": "expiry",
              "type": 4,
              "typeName": "BlockNumber"
            }
          ]
        }
      },
      "docs": [
        "Information representing an active gilt."
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "path": [
        "pallet_gilt",
        "pallet",
        "ActiveGilt"
      ]
    }
  },
  {
    "id": 482,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "The duration of the bid is less than one."
              ],
              "fields": null,
              "index": 1,
              "name": "DurationTooSmall"
            },
            {
              "docs": [
                "The duration is the bid is greater than the number of queues."
              ],
              "fields": null,
              "index": 2,
              "name": "DurationTooBig"
            },
            {
              "docs": [
                "The amount of the bid is less than the minimum allowed."
              ],
              "fields": null,
              "index": 3,
              "name": "AmountTooSmall"
            },
            {
              "docs": [
                "The queue for the bid\\'s duration is full and the amount bid is too low to get in through",
                "replacing an existing bid."
              ],
              "fields": null,
              "index": 4,
              "name": "BidTooLow"
            },
            {
              "docs": [
                "Gilt index is unknown."
              ],
              "fields": null,
              "index": 5,
              "name": "Unknown"
            },
            {
              "docs": [
                "Not the owner of the gilt."
              ],
              "fields": null,
              "index": 6,
              "name": "NotOwner"
            },
            {
              "docs": [
                "Gilt not yet at expiry date."
              ],
              "fields": null,
              "index": 7,
              "name": "NotExpired"
            },
            {
              "docs": [
                "The given bid for retraction is not found."
              ],
              "fields": null,
              "index": 8,
              "name": "NotFound"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_gilt",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 483,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Can change `owner`, `issuer`, `freezer` and `admin` accounts."
              ],
              "name": "owner",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "Can mint tokens."
              ],
              "name": "issuer",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "Can thaw tokens, force transfers and burn tokens from any account."
              ],
              "name": "admin",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "Can freeze tokens."
              ],
              "name": "freezer",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The total balance deposited for the all storage associated with this asset class. Used by",
                "`destroy`."
              ],
              "name": "total_deposit",
              "type": 6,
              "typeName": "DepositBalance"
            },
            {
              "docs": [
                "If `true`, then no deposit is needed to hold instances of this class."
              ],
              "name": "free_holding",
              "type": 34,
              "typeName": "bool"
            },
            {
              "docs": [
                "The total number of outstanding instances of this asset class."
              ],
              "name": "instances",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The total number of outstanding instance metadata of this asset class."
              ],
              "name": "instance_metadatas",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "The total number of attributes for this asset class."
              ],
              "name": "attributes",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Whether the asset is frozen for non-admin transfers."
              ],
              "name": "is_frozen",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "path": [
        "pallet_uniques",
        "types",
        "ClassDetails"
      ]
    }
  },
  {
    "id": 484,
    "type": {
      "def": {
        "Tuple": [
          0,
          4,
          4
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 485,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The owner of this asset."
              ],
              "name": "owner",
              "type": 0,
              "typeName": "AccountId"
            },
            {
              "docs": [
                "The approved transferrer of this asset, if one is set."
              ],
              "name": "approved",
              "type": 216,
              "typeName": "Option\u003cAccountId\u003e"
            },
            {
              "docs": [
                "Whether the asset can be transferred or not."
              ],
              "name": "is_frozen",
              "type": 34,
              "typeName": "bool"
            },
            {
              "docs": [
                "The amount held in the pallet\\'s default account for this asset. Free-hold assets will have",
                "this as zero."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance"
            }
          ]
        }
      },
      "docs": [
        "Information concerning the ownership of a single unique asset."
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "path": [
        "pallet_uniques",
        "types",
        "InstanceDetails"
      ]
    }
  },
  {
    "id": 486,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The balance deposited for this metadata.",
                "",
                "This pays for the data stored in this struct."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance"
            },
            {
              "docs": [
                "General information concerning this asset. Limited in length by `StringLimit`. This will",
                "generally be either a JSON dump or the hash of some JSON which can be found on a",
                "hash-addressable global publication system such as IPFS."
              ],
              "name": "data",
              "type": 91,
              "typeName": "BoundedVec\u003cu8, StringLimit\u003e"
            },
            {
              "docs": [
                "Whether the asset metadata may be changed by a non Force origin."
              ],
              "name": "is_frozen",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "StringLimit",
          "type": null
        }
      ],
      "path": [
        "pallet_uniques",
        "types",
        "ClassMetadata"
      ]
    }
  },
  {
    "id": 487,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "The balance deposited for this metadata.",
                "",
                "This pays for the data stored in this struct."
              ],
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance"
            },
            {
              "docs": [
                "General information concerning this asset. Limited in length by `StringLimit`. This will",
                "generally be either a JSON dump or the hash of some JSON which can be found on a",
                "hash-addressable global publication system such as IPFS."
              ],
              "name": "data",
              "type": 91,
              "typeName": "BoundedVec\u003cu8, StringLimit\u003e"
            },
            {
              "docs": [
                "Whether the asset metadata may be changed by a non Force origin."
              ],
              "name": "is_frozen",
              "type": 34,
              "typeName": "bool"
            }
          ]
        }
      },
      "docs": null,
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "StringLimit",
          "type": null
        }
      ],
      "path": [
        "pallet_uniques",
        "types",
        "InstanceMetadata"
      ]
    }
  },
  {
    "id": 488,
    "type": {
      "def": {
        "Tuple": [
          4,
          93,
          94
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 489,
    "type": {
      "def": {
        "Tuple": [
          95,
          6
        ]
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 490,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "The signing account has no permission to do the operation."
              ],
              "fields": null,
              "index": 1,
              "name": "NoPermission"
            },
            {
              "docs": [
                "The given asset ID is unknown."
              ],
              "fields": null,
              "index": 2,
              "name": "Unknown"
            },
            {
              "docs": [
                "The asset instance ID has already been used for an asset."
              ],
              "fields": null,
              "index": 3,
              "name": "AlreadyExists"
            },
            {
              "docs": [
                "The owner turned out to be different to what was expected."
              ],
              "fields": null,
              "index": 4,
              "name": "WrongOwner"
            },
            {
              "docs": [
                "Invalid witness data given."
              ],
              "fields": null,
              "index": 5,
              "name": "BadWitness"
            },
            {
              "docs": [
                "The asset ID is already taken."
              ],
              "fields": null,
              "index": 6,
              "name": "InUse"
            },
            {
              "docs": [
                "The asset instance or class is frozen."
              ],
              "fields": null,
              "index": 7,
              "name": "Frozen"
            },
            {
              "docs": [
                "The delegate turned out to be different to what was expected."
              ],
              "fields": null,
              "index": 8,
              "name": "WrongDelegate"
            },
            {
              "docs": [
                "There is no delegate approved."
              ],
              "fields": null,
              "index": 9,
              "name": "NoDelegate"
            },
            {
              "docs": [
                "No approval exists that would allow the transfer."
              ],
              "fields": null,
              "index": 10,
              "name": "Unapproved"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "path": [
        "pallet_uniques",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 491,
    "type": {
      "def": {
        "Sequence": {
          "type": 492
        }
      },
      "docs": null,
      "params": null,
      "path": null
    }
  },
  {
    "id": 492,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": [
                "Chunk trie root."
              ],
              "name": "chunk_root",
              "type": 9,
              "typeName": "\u003cBlakeTwo256 as Hash\u003e::Output"
            },
            {
              "docs": [
                "Plain hash of indexed data."
              ],
              "name": "content_hash",
              "type": 9,
              "typeName": "\u003cBlakeTwo256 as Hash\u003e::Output"
            },
            {
              "docs": [
                "Size of indexed data in bytes."
              ],
              "name": "size",
              "type": 4,
              "typeName": "u32"
            },
            {
              "docs": [
                "Total number of chunks added in the block with this transaction. This",
                "is used find transaction info by block chunk index using binary search."
              ],
              "name": "block_chunks",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "docs": [
        "State data for a stored transaction."
      ],
      "params": null,
      "path": [
        "pallet_transaction_storage",
        "TransactionInfo"
      ]
    }
  },
  {
    "id": 493,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 121,
                  "typeName": "frame_support::Never"
                }
              ],
              "index": 0,
              "name": "__Ignore"
            },
            {
              "docs": [
                "Insufficient account balance."
              ],
              "fields": null,
              "index": 1,
              "name": "InsufficientFunds"
            },
            {
              "docs": [
                "Invalid configuration."
              ],
              "fields": null,
              "index": 2,
              "name": "NotConfigured"
            },
            {
              "docs": [
                "Renewed extrinsic is not found."
              ],
              "fields": null,
              "index": 3,
              "name": "RenewedNotFound"
            },
            {
              "docs": [
                "Attempting to store empty transaction"
              ],
              "fields": null,
              "index": 4,
              "name": "EmptyTransaction"
            },
            {
              "docs": [
                "Proof was not expected in this block."
              ],
              "fields": null,
              "index": 5,
              "name": "UnexpectedProof"
            },
            {
              "docs": [
                "Proof failed verification."
              ],
              "fields": null,
              "index": 6,
              "name": "InvalidProof"
            },
            {
              "docs": [
                "Missing storage proof."
              ],
              "fields": null,
              "index": 7,
              "name": "MissingProof"
            },
            {
              "docs": [
                "Unable to verify proof becasue state data is missing."
              ],
              "fields": null,
              "index": 8,
              "name": "MissingStateData"
            },
            {
              "docs": [
                "Double proof check in the block."
              ],
              "fields": null,
              "index": 9,
              "name": "DoubleCheck"
            },
            {
              "docs": [
                "Storage proof was not checked in the block."
              ],
              "fields": null,
              "index": 10,
              "name": "ProofNotChecked"
            },
            {
              "docs": [
                "Transaction is too large."
              ],
              "fields": null,
              "index": 11,
              "name": "TransactionTooLarge"
            },
            {
              "docs": [
                "Too many transactions in the block."
              ],
              "fields": null,
              "index": 12,
              "name": "TooManyTransactions"
            },
            {
              "docs": [
                "Attempted to call `store` outside of block execution."
              ],
              "fields": null,
              "index": 13,
              "name": "BadContext"
            }
          ]
        }
      },
      "docs": [
        "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_transaction_storage",
        "pallet",
        "Error"
      ]
    }
  },
  {
    "id": 494,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 10,
              "typeName": null
            }
          ]
        }
      },
      "docs": [
        "UncheckedExtrinsic raw bytes, requires custom decoding routine"
      ],
      "params": null,
      "path": [
        "sp_runtime",
        "generic",
        "unchecked_extrinsic",
        "UncheckedExtrinsic"
      ]
    }
  },
  {
    "id": 495,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "Ensure the runtime version registered in the transaction is the same as at present."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "extensions",
        "check_spec_version",
        "CheckSpecVersion"
      ]
    }
  },
  {
    "id": 496,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "Ensure the transaction version registered in the transaction is the same as at present."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "extensions",
        "check_tx_version",
        "CheckTxVersion"
      ]
    }
  },
  {
    "id": 497,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "Genesis hash check to provide replay protection between different networks."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "extensions",
        "check_genesis",
        "CheckGenesis"
      ]
    }
  },
  {
    "id": 498,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 499,
              "typeName": "Era"
            }
          ]
        }
      },
      "docs": [
        "Check for transaction mortality."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "extensions",
        "check_mortality",
        "CheckMortality"
      ]
    }
  },
  {
    "id": 499,
    "type": {
      "def": {
        "Variant": {
          "variants": [
            {
              "docs": null,
              "fields": null,
              "index": 0,
              "name": "Immortal"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 1,
              "name": "Mortal1"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 2,
              "name": "Mortal2"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 3,
              "name": "Mortal3"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 4,
              "name": "Mortal4"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 5,
              "name": "Mortal5"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 6,
              "name": "Mortal6"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 7,
              "name": "Mortal7"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 8,
              "name": "Mortal8"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 9,
              "name": "Mortal9"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 10,
              "name": "Mortal10"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 11,
              "name": "Mortal11"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 12,
              "name": "Mortal12"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 13,
              "name": "Mortal13"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 14,
              "name": "Mortal14"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 15,
              "name": "Mortal15"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 16,
              "name": "Mortal16"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 17,
              "name": "Mortal17"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 18,
              "name": "Mortal18"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 19,
              "name": "Mortal19"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 20,
              "name": "Mortal20"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 21,
              "name": "Mortal21"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 22,
              "name": "Mortal22"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 23,
              "name": "Mortal23"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 24,
              "name": "Mortal24"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 25,
              "name": "Mortal25"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 26,
              "name": "Mortal26"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 27,
              "name": "Mortal27"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 28,
              "name": "Mortal28"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 29,
              "name": "Mortal29"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 30,
              "name": "Mortal30"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 31,
              "name": "Mortal31"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 32,
              "name": "Mortal32"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 33,
              "name": "Mortal33"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 34,
              "name": "Mortal34"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 35,
              "name": "Mortal35"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 36,
              "name": "Mortal36"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 37,
              "name": "Mortal37"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 38,
              "name": "Mortal38"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 39,
              "name": "Mortal39"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 40,
              "name": "Mortal40"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 41,
              "name": "Mortal41"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 42,
              "name": "Mortal42"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 43,
              "name": "Mortal43"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 44,
              "name": "Mortal44"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 45,
              "name": "Mortal45"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 46,
              "name": "Mortal46"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 47,
              "name": "Mortal47"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 48,
              "name": "Mortal48"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 49,
              "name": "Mortal49"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 50,
              "name": "Mortal50"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 51,
              "name": "Mortal51"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 52,
              "name": "Mortal52"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 53,
              "name": "Mortal53"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 54,
              "name": "Mortal54"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 55,
              "name": "Mortal55"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 56,
              "name": "Mortal56"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 57,
              "name": "Mortal57"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 58,
              "name": "Mortal58"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 59,
              "name": "Mortal59"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 60,
              "name": "Mortal60"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 61,
              "name": "Mortal61"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 62,
              "name": "Mortal62"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 63,
              "name": "Mortal63"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 64,
              "name": "Mortal64"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 65,
              "name": "Mortal65"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 66,
              "name": "Mortal66"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 67,
              "name": "Mortal67"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 68,
              "name": "Mortal68"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 69,
              "name": "Mortal69"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 70,
              "name": "Mortal70"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 71,
              "name": "Mortal71"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 72,
              "name": "Mortal72"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 73,
              "name": "Mortal73"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 74,
              "name": "Mortal74"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 75,
              "name": "Mortal75"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 76,
              "name": "Mortal76"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 77,
              "name": "Mortal77"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 78,
              "name": "Mortal78"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 79,
              "name": "Mortal79"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 80,
              "name": "Mortal80"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 81,
              "name": "Mortal81"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 82,
              "name": "Mortal82"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 83,
              "name": "Mortal83"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 84,
              "name": "Mortal84"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 85,
              "name": "Mortal85"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 86,
              "name": "Mortal86"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 87,
              "name": "Mortal87"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 88,
              "name": "Mortal88"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 89,
              "name": "Mortal89"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 90,
              "name": "Mortal90"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 91,
              "name": "Mortal91"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 92,
              "name": "Mortal92"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 93,
              "name": "Mortal93"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 94,
              "name": "Mortal94"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 95,
              "name": "Mortal95"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 96,
              "name": "Mortal96"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 97,
              "name": "Mortal97"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 98,
              "name": "Mortal98"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 99,
              "name": "Mortal99"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 100,
              "name": "Mortal100"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 101,
              "name": "Mortal101"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 102,
              "name": "Mortal102"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 103,
              "name": "Mortal103"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 104,
              "name": "Mortal104"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 105,
              "name": "Mortal105"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 106,
              "name": "Mortal106"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 107,
              "name": "Mortal107"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 108,
              "name": "Mortal108"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 109,
              "name": "Mortal109"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 110,
              "name": "Mortal110"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 111,
              "name": "Mortal111"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 112,
              "name": "Mortal112"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 113,
              "name": "Mortal113"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 114,
              "name": "Mortal114"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 115,
              "name": "Mortal115"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 116,
              "name": "Mortal116"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 117,
              "name": "Mortal117"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 118,
              "name": "Mortal118"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 119,
              "name": "Mortal119"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 120,
              "name": "Mortal120"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 121,
              "name": "Mortal121"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 122,
              "name": "Mortal122"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 123,
              "name": "Mortal123"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 124,
              "name": "Mortal124"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 125,
              "name": "Mortal125"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 126,
              "name": "Mortal126"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 127,
              "name": "Mortal127"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 128,
              "name": "Mortal128"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 129,
              "name": "Mortal129"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 130,
              "name": "Mortal130"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 131,
              "name": "Mortal131"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 132,
              "name": "Mortal132"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 133,
              "name": "Mortal133"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 134,
              "name": "Mortal134"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 135,
              "name": "Mortal135"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 136,
              "name": "Mortal136"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 137,
              "name": "Mortal137"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 138,
              "name": "Mortal138"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 139,
              "name": "Mortal139"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 140,
              "name": "Mortal140"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 141,
              "name": "Mortal141"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 142,
              "name": "Mortal142"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 143,
              "name": "Mortal143"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 144,
              "name": "Mortal144"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 145,
              "name": "Mortal145"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 146,
              "name": "Mortal146"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 147,
              "name": "Mortal147"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 148,
              "name": "Mortal148"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 149,
              "name": "Mortal149"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 150,
              "name": "Mortal150"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 151,
              "name": "Mortal151"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 152,
              "name": "Mortal152"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 153,
              "name": "Mortal153"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 154,
              "name": "Mortal154"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 155,
              "name": "Mortal155"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 156,
              "name": "Mortal156"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 157,
              "name": "Mortal157"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 158,
              "name": "Mortal158"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 159,
              "name": "Mortal159"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 160,
              "name": "Mortal160"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 161,
              "name": "Mortal161"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 162,
              "name": "Mortal162"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 163,
              "name": "Mortal163"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 164,
              "name": "Mortal164"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 165,
              "name": "Mortal165"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 166,
              "name": "Mortal166"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 167,
              "name": "Mortal167"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 168,
              "name": "Mortal168"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 169,
              "name": "Mortal169"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 170,
              "name": "Mortal170"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 171,
              "name": "Mortal171"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 172,
              "name": "Mortal172"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 173,
              "name": "Mortal173"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 174,
              "name": "Mortal174"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 175,
              "name": "Mortal175"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 176,
              "name": "Mortal176"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 177,
              "name": "Mortal177"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 178,
              "name": "Mortal178"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 179,
              "name": "Mortal179"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 180,
              "name": "Mortal180"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 181,
              "name": "Mortal181"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 182,
              "name": "Mortal182"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 183,
              "name": "Mortal183"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 184,
              "name": "Mortal184"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 185,
              "name": "Mortal185"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 186,
              "name": "Mortal186"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 187,
              "name": "Mortal187"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 188,
              "name": "Mortal188"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 189,
              "name": "Mortal189"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 190,
              "name": "Mortal190"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 191,
              "name": "Mortal191"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 192,
              "name": "Mortal192"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 193,
              "name": "Mortal193"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 194,
              "name": "Mortal194"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 195,
              "name": "Mortal195"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 196,
              "name": "Mortal196"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 197,
              "name": "Mortal197"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 198,
              "name": "Mortal198"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 199,
              "name": "Mortal199"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 200,
              "name": "Mortal200"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 201,
              "name": "Mortal201"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 202,
              "name": "Mortal202"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 203,
              "name": "Mortal203"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 204,
              "name": "Mortal204"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 205,
              "name": "Mortal205"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 206,
              "name": "Mortal206"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 207,
              "name": "Mortal207"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 208,
              "name": "Mortal208"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 209,
              "name": "Mortal209"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 210,
              "name": "Mortal210"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 211,
              "name": "Mortal211"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 212,
              "name": "Mortal212"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 213,
              "name": "Mortal213"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 214,
              "name": "Mortal214"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 215,
              "name": "Mortal215"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 216,
              "name": "Mortal216"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 217,
              "name": "Mortal217"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 218,
              "name": "Mortal218"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 219,
              "name": "Mortal219"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 220,
              "name": "Mortal220"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 221,
              "name": "Mortal221"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 222,
              "name": "Mortal222"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 223,
              "name": "Mortal223"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 224,
              "name": "Mortal224"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 225,
              "name": "Mortal225"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 226,
              "name": "Mortal226"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 227,
              "name": "Mortal227"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 228,
              "name": "Mortal228"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 229,
              "name": "Mortal229"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 230,
              "name": "Mortal230"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 231,
              "name": "Mortal231"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 232,
              "name": "Mortal232"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 233,
              "name": "Mortal233"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 234,
              "name": "Mortal234"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 235,
              "name": "Mortal235"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 236,
              "name": "Mortal236"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 237,
              "name": "Mortal237"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 238,
              "name": "Mortal238"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 239,
              "name": "Mortal239"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 240,
              "name": "Mortal240"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 241,
              "name": "Mortal241"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 242,
              "name": "Mortal242"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 243,
              "name": "Mortal243"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 244,
              "name": "Mortal244"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 245,
              "name": "Mortal245"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 246,
              "name": "Mortal246"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 247,
              "name": "Mortal247"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 248,
              "name": "Mortal248"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 249,
              "name": "Mortal249"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 250,
              "name": "Mortal250"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 251,
              "name": "Mortal251"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 252,
              "name": "Mortal252"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 253,
              "name": "Mortal253"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 254,
              "name": "Mortal254"
            },
            {
              "docs": null,
              "fields": [
                {
                  "docs": null,
                  "name": null,
                  "type": 2,
                  "typeName": null
                }
              ],
              "index": 255,
              "name": "Mortal255"
            }
          ]
        }
      },
      "docs": null,
      "params": null,
      "path": [
        "sp_runtime",
        "generic",
        "era",
        "Era"
      ]
    }
  },
  {
    "id": 500,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 101,
              "typeName": "T::Index"
            }
          ]
        }
      },
      "docs": [
        "Nonce check and increment to give replay protection for transactions.",
        "",
        "Note that this does not set any priority by default. Make sure that AT LEAST one of the signed",
        "extension sets some kind of priority upon validating transactions."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "extensions",
        "check_nonce",
        "CheckNonce"
      ]
    }
  },
  {
    "id": 501,
    "type": {
      "def": {
        "Composite": {
          "fields": null
        }
      },
      "docs": [
        "Block resource (weight) limit check."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "frame_system",
        "extensions",
        "check_weight",
        "CheckWeight"
      ]
    }
  },
  {
    "id": 502,
    "type": {
      "def": {
        "Composite": {
          "fields": [
            {
              "docs": null,
              "name": null,
              "type": 66,
              "typeName": "BalanceOf\u003cT\u003e"
            }
          ]
        }
      },
      "docs": [
        "Require the transactor pay for themselves and maybe include a tip to gain additional priority",
        "in the queue."
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "path": [
        "pallet_transaction_payment",
        "ChargeTransactionPayment"
      ]
    }
  }
]